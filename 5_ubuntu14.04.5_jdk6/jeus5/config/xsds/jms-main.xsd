<?xml version="1.0" encoding="EUC-KR"?>
<xs:schema
        xmlns="http://www.tmaxsoft.com/xml/ns/jeus"
        targetNamespace="http://www.tmaxsoft.com/xml/ns/jeus"
        xmlns:j2ee="http://java.sun.com/xml/ns/j2ee"
        xmlns:xs="http://www.w3.org/2001/XMLSchema"
        elementFormDefault="qualified"
        attributeFormDefault="unqualified"
        version="5.0">


    <xs:include schemaLocation="jeus-common.xsd"/>

    <xs:element name="jms-server" type="jms-serverType">
        <xs:annotation>
            <xs:documentation><![CDATA[
                [Description]: JMSMain.xml 내의 최고 레벨의 element 이다.
                내부 설정값들 중 token 혹은 String 에 해당하는 값들은 다음의 문자들을 포함할 수 없다. ':', ',', '*', '?', '='
            ]]></xs:documentation>
        </xs:annotation>
    </xs:element>

    <xs:complexType name="jms-serverType">
        <xs:sequence>
            <xs:element minOccurs="0" name="broker-name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]:JMS 메시지 브로커의 이름이다. 설정하지 않는 경우 호스트 이름이 사용된다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element minOccurs="1" maxOccurs="unbounded" name="service-config" type="service-config">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]:메시징 서비스를 제공하기 위한 서비스 채널에 대한 설정이다. 최소 하나 이상 설정되어야 한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element minOccurs="0" name="thread-pool" type="jms-thread-poolType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]:JMS 메시지 브로커가 사용하는 thread pool 에 대한 설정이다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element minOccurs="0" name="access-log" type="system-loggingType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]:access log 에 대한 정보를 지정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element minOccurs="0" maxOccurs="unbounded" name="durable-subscriber" type="durable-subscriberType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Durable subscriber 에 대한 정보를 지정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element minOccurs="0" maxOccurs="unbounded" name="connection-factory" type="connection-factoryType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: connection factory 에 대한 정보를 지정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element minOccurs="0" maxOccurs="unbounded" name="destination" type="destinationType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 데스티네이션에 대한 정보를 지정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element minOccurs="0" maxOccurs="unbounded" name="queue-cluster"
                        type="queue-clusterType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: queue 클러스터링 방식을 설정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element minOccurs="0" maxOccurs="unbounded" name="topic-cluster"
                        type="topic-clusterType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: topic 클러스터링 방식을 설정한다.
                        ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element minOccurs="0" name="storage" type="storageType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: persistent message 를 위한 storage 정보를 설정한다.
                      ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element minOccurs="0" name="jms-server-cluster" type="jms-server-clusterType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 데스티네이션 클러스터링을 사용하는 경우 여기에 참여하는 JMS 메시지 브로커에 대한 설정을 한다.
                      ]]></xs:documentation>
                </xs:annotation>
                <xs:unique name="cluster-server-name">
                    <xs:selector xpath="jms-server-info"/>
                    <xs:field xpath="broker-name"/>
                </xs:unique>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="service-config">
        <xs:sequence>
            <xs:element name="name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 서비스 채널의 이름이다. Connection Factory 에 채널 정보를 지정하기 위해 용도로 사용된다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:choice>
                <xs:element name="server-url" type="xs:token">
                    <xs:annotation>
                        <xs:documentation><![CDATA[
                        [Description]: 서비스 채널의 URL 을 지정한다. OnePort일 경우에는 'oneport'만 설정하고 'tcp'인 경우 'tcp://host:port'형식으로 설정한다.
                    ]]></xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:group ref="jms-tcp-address"></xs:group>
            </xs:choice>
            <xs:element minOccurs="0" name="use-ssl" type="xs:boolean" default="false">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]:  서비스 채널에 SSL 을 적용할 것인지를 설정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="ssl-configuration" type="jms-server-sslType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]:  SSL 에 관련된 환경값들을 설정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="client-limit" type="nonNegativeIntType" default="1000">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 서비스 채널이 허용하는 최대 클라이언트 수를 지정한다.
                        blocking socket 을 사용하는 경우 메시지 브로커에 설정된 최대 쓰레드 수를 넘을 수 없다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="backlog-size" type="nonNegativeIntType" default="100">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 서비스 채널이 허용하는 백로그의 크기이다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element minOccurs="0" name="blocking-socket" type="xs:boolean" default="true">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 해당 서비스 채널이 blocking socket 을 사용할 것인가 non-blocking socket 을 사용할 것인가를 결정한다.
                        확장성을 위해 non-blocking socket 을 사용할 것을 권장한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

<!--
            <xs:element minOccurs="0" name="direct-byte-buffer" type="xs:boolean" default="false">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: non-blocking socket을 사용할 때 ByteBuffer를 DirectByteBuffer를 사용할지를 결정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
-->


            <xs:element minOccurs="0" name="read-buffer-size" type="nonNegativeIntType" default="65536">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 클라이언트로 부터 메시지를 읽어 들이는 네트워크 버퍼의 크기이다. 디폴트는 64K 이다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element minOccurs="0" name="write-buffer-size" type="nonNegativeIntType" default="65536">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 클라이언트에게 메시지를 전송하기 위한 네트워크 버퍼의 크기이다. 디폴트는 64K 이다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element minOccurs="0" name="connection-timeout" type="nonNegativeIntType" default="120">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: blocking socket 을 사용할 경우 지정된 시간동안 클라이언트로 부터 아무런 요청이 없으면 연결을 종료한다.
                        분단위로 설정하며 디폴트는 120분 이다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="check-security" type="xs:boolean" default="false">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 클라이언트가 수행하는 동작에 대한 권한 검사를 할 지를 결정한다.
                        이 값이 true이면 jeus.jms.client.connectionFactory에 대한 createConnection 권한이 있는 사용자만
                        이 서비스 채널로의 Connection을 생성할 수 있고, jeus.jms.destination.creation에 대한 createDestination 권한이 있는 사용자만
                        실행 중인 JMS 메시지 브로커에 동적으로 데스티네이션을 생성할 수 있다.
                  ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="client-keepalive-timeout" type="xs:int" default="30">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 클라이언트와의 연결이 비정상 종료되었을 경우 재접속을 기다리는 시간이다. 이 시간이 지나면
                        해당 클라이언트의 리소스는 모두 서버에 반환된다. 설정된 시간내에는 해당 클라이언트의 clientID 값이 유지되므로
                        네트워크 상태가 불량한 경우에만 설정하도록 한다.
                        초단위로 설정하며 0 이하의 값을 지정하면 기다리지 않고 즉시 리소스를 반환한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:group name="jms-tcp-address">
        <xs:sequence>
            <xs:element minOccurs="0" name="server-address" type="xs:token" default="127.0.0.1">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 서비스 채널의 IP 어드레스를 설정한다. 커넥션 팩토리의 주소로 사용된다.
                        설정하지 않는 경우 "127.0.0.1" 이 사용된다.
                        [Example]: 123.123.123.123
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="port" type="nonNegativeIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 서비스 채널의 TCP 포트 번호이다.
                        [Example]: 9741
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:group>

    <xs:complexType name="jms-ssl-baseType">
        <xs:sequence>
            <xs:element name="protocol" type="xs:token" minOccurs="0" default="TLS"/>
            <xs:element name="key-store-type" type="xs:string" minOccurs="0" default="JKS"/>
            <xs:element name="key-store-file" type="xs:string" minOccurs="1"/>
            <xs:element name="key-store-pass" type="xs:string" minOccurs="1"/>
            <xs:element name="key-management-algorithm" type="xs:string" minOccurs="0" default="SunX509"/>
        </xs:sequence>
    </xs:complexType>

    <xs:group name="jms-ssl-trustType">
        <xs:sequence>
            <xs:element name="trust-store-type" type="xs:string" minOccurs="0" default="JKS"/>
            <xs:element name="trust-store-file" type="xs:string" minOccurs="1"/>
            <xs:element name="trust-store-pass" type="xs:string" minOccurs="1"/>
            <xs:element name="trust-management-algorithm" type="xs:string" minOccurs="0" default="SunX509"/>
        </xs:sequence>
    </xs:group>

    <xs:complexType name="jms-server-sslType">
        <xs:complexContent>
			<xs:extension base="jms-ssl-baseType">
                <xs:sequence>
                    <xs:element name="client-auth" type="client-authType" minOccurs="0"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="client-authType">
        <xs:group ref="jms-ssl-trustType"/>
    </xs:complexType>

    <xs:complexType name="jms-client-sslType">
        <xs:complexContent>
			<xs:extension base="jms-ssl-baseType">
                <xs:group ref="jms-ssl-trustType"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>


    <xs:complexType name="connection-factoryType">
        <xs:sequence>
            <xs:element minOccurs="0" name="type" type="factory-typeType" default="nonxa">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 해당 Connection Factory 의 종류를 설정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: JMS 시스템 내에서 관리의 목적으로 사용되는 Connection Factory 의 이름이다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="service" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 해당 Connection Factory 가 연결을 시도할 service 의 이름을 설정한다. service-config 에 지정된 이름을 사용하도록 한다.
                        이름을 지정하지 않을 경우 처음 설정된 서비스로 임의 지정된다.
                    ]]></xs:documentation>
                </xs:annotation>
                <xs:unique name="factory-service-config-name">
                    <xs:selector xpath="xs:jms-server/service-config"/>
                    <xs:field xpath="name"/>
                </xs:unique>
            </xs:element>
            <xs:element minOccurs="0" name="export-name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 해당 Connection Factory 가 네이밍 서버에 binding 되는 이름. 설정하지 않으면 name 속성이 그대로 사용된다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="clustered-factory" type="xs:boolean" default="false">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: connection factory 의 범위를 지정한다. true 인 경우 cluster factory 로 사용된다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="client-id" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 해당 Connection Factory 를 이용하여 생성되는 connection 에 기본값으로 설정되는 ClientID 값이다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="fixed-client-id" type="xs:boolean" default="true">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: connection ID 의 생성 정책이다. true 일 경우 지정된 client-id 를 그대로 사용하며
                        false 인 경우 JMS 메시지 브로커에 의해 자동적으로 생성된다.
                        생성된 connection ID 는 getClientID() API 를 이용하여 확인할 수 있다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="broker-selection-policy" type="broker-selection-policyType" default="round-robin">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: ConnectionFactory가 Connection을 생성할 때 어떤 Channel을 선택할 지를 결정하는 정책이다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="thread-pool" type="jms-thread-poolType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: client 가 이 Connection Factory 로 부터 connection 을 만들 경우
                        그 connection 에 대한 thread pool 의 정보를 지정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:simpleType name="destination-typeType">
        <xs:restriction base="xs:token">
            <xs:enumeration value="queue"/>
            <xs:enumeration value="topic"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="factory-typeType">
        <xs:restriction base="xs:token">
            <xs:enumeration value="nonxa"/>
            <xs:enumeration value="xa"/>
            <xs:enumeration value="queue"/>
            <xs:enumeration value="topic"/>
            <xs:enumeration value="xaqueue"/>
            <xs:enumeration value="xatopic"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="broker-selection-policyType">
        <xs:restriction base="xs:token">
            <xs:enumeration value="round-robin"/>
            <xs:enumeration value="active-standby"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="destinationType">
        <xs:sequence>
            <xs:element name="type" type="destination-typeType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 해당 데스티네이션의 종류를 설정한다. queue와 topic 중 하나를 지정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: JMS 메시지 브로커 내에서 관리 목적으로 사용되는 데스티네이션의 이름이다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="broker-name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 이 destination으로 오는 메세지를 routing할 broker 이름을 지정한다.
                         이 이름을 지정하지 않으면 connection factory에 연결된 server의 destination으로 간주한다.
                         지정하면 다른 clustering server에 접속하더라도 이 destination의 producer가 보내는 메세지는
                         항상 지정된 broker로 전달되고 접속한 server의 destination에는 전달되지 않는다.
                         clustering destination에는 이 설정이 의미가 없고 사용해서는 안된다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="export-name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 해당 데스티네이션이 네이밍 서버에 binding 되는 이름.설정하지 않으면 name 속성이 그대로 사용된다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="multiple-receiver" type="xs:boolean" default="false">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: queue 타입의 데스티네이션에 대해 다중의 receiver 를 허용하여 분산처리를 할 것인지를 설정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="consumer-limit" type="positiveIntType" default="2147483647">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 데스티네이션에 접근할 수 있는 컨슈머의 수를 제한한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="local-distribute" type="local-distributeType" default="round-robin">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: multiple-receiver 로 설정된 queue 데스티네이션의 메시지 분산 방식을 결정한다.
                        round-robin, random 중에 하나를 지정할 수 있다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="limit" type="nonNegativeIntType" default="2147483647">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 해당 destination 에서 사용할수 있는 최대 메모리 크기를 설정한다.
                        사용중인 메모리가 이 값을 초과하는 경우 클라이언트의 메시지 전달은 바로 에러 처리되게 된다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="high-mark" type="nonNegativeIntType" default="2147483647">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 플로우 컨트롤을 사용하기 시작하는 메모리 크기를 설정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="low-mark" type="nonNegativeIntType" default="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 소프트 캐싱을 시작하는 메모리 크기를 설정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="max-pending-limit" type="nonNegativeIntType" default="2147483647">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Queue나 Topic에 MessageListener가 등록되어 있는 경우 Destination에
                        메시지가 도착하자 마자 Consumer로 메시지가 보내지므로 클라이언트가 이 메시지들을 빨리 처리 하지
                        않으면 클라이언트 메모리에 쌓이게 되어 OutOfMemory 에러가 발생할 수 있다.
                        DISPATCH는 되었지만 ACKNOWLEDGE를 수신하지 않은 메시지의 최대 허용범위를 지정하여 이런 문제를
                        방지할 수 있다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="resume-dispatch-factor" type="xs:float" default="0.4">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: PENDING메시지가 max-pending-limit보다 크게 되면 메시지 전달은 일시적으로 중단된다.
                        클라이언트가 메시지를 완전히 처리한 후 ACKNOWLEDGE들을 보내어 PENDING된 메시지의 수가
                        (max-pending-limit * resume-dispatch-factor) 작거나 같으면 DISPATCH는 다시 시작하게 된다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:choice minOccurs="0">
                <xs:element minOccurs="0" name="queue-cluster-name" type="xs:token">
                    <xs:annotation>
                        <xs:documentation><![CDATA[
                            [Description]: queue-cluster 로 지정된 클러스터링 타입을 선택한다.
                        ]]></xs:documentation>
                    </xs:annotation>
                    <xs:unique name="queue-cluster-config-name">
                        <xs:selector xpath="xs:jms-server/queue-cluster"/>
                        <xs:field xpath="queue-cluster-name"/>
                    </xs:unique>
                </xs:element>
                <xs:element minOccurs="0" name="topic-cluster-name" type="xs:token">
                    <xs:annotation>
                        <xs:documentation><![CDATA[
                            [Description]: topic-cluster 로 지정된 클러스터링 타입을 선택한다.
                        ]]></xs:documentation>
                    </xs:annotation>
                    <xs:unique name="topic-cluster-config-name">
                        <xs:selector xpath="xs:jms-server/topic-cluster"/>
                        <xs:field xpath="topic-cluster-name"/>
                    </xs:unique>
                </xs:element>
            </xs:choice>

        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="topic-clusterType">
        <xs:sequence>
            <xs:element name="topic-cluster-name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: topic 클러스터링을 위한 클러스터링 타입을 설정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="relay-type" type="relay-typeType" default="non-durable">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 위에서 지정된 cluster 서버에 message 를 전달하는 방식이다. non-durable 과 durable을 지정할 수 있다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" name="target" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 클러스터링에 참여하는 broker name 을 지정한다. 해당 이름은 jms-server-info 에 설정된 이름이어야 한다.
                    ]]></xs:documentation>
                </xs:annotation>
                <xs:unique name="topic-cluster-broker-name">
                    <xs:selector xpath="xs:jms-server/jms-server-info"/>
                    <xs:field xpath="broker-name"/>
                </xs:unique>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="queue-clusterType">
        <xs:sequence>
            <xs:element name="queue-cluster-name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: queue 클러스터링을 위한 클러스터링 타입을 설정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="cluster-distribute" type="cluster-distributeType" default="round-robin">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: queue 클러스터링에 참여하는 각각의 브로커에 메시지를 분산하기 위한 방식을 지정한다.
                        server-weighted, consumer-weighted, round-robin, random 중에 하나를 지정할 수 있다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="local-preference" type="positiveIntType" default="1">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: local 브로커에서 처리하는 메시지의 비중을 높인다.
                        server-weighted 혹은 consumer-weighted 방식을 사용할 경우에만 의미가 있다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" name="target" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 클러스터링에 참여하는 broker name 을 지정한다. 해당 이름은 jms-server-info 에 설정된 이름이어야 한다.
                    ]]></xs:documentation>
                </xs:annotation>
                <xs:unique name="queue-cluster-broker-name">
                    <xs:selector xpath="xs:jms-server/jms-server-info"/>
                    <xs:field xpath="broker-name"/>
                </xs:unique>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:simpleType name="relay-typeType">
        <xs:restriction base="xs:token">
            <xs:enumeration value="non-durable"/>
            <xs:enumeration value="durable"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="cluster-distributeType">
        <xs:restriction base="xs:token">
            <xs:enumeration value="server-weighted"/>
            <xs:enumeration value="consumer-weighted"/>
            <xs:enumeration value="round-robin"/>
            <xs:enumeration value="random"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="local-distributeType">
        <xs:restriction base="xs:token">
            <xs:enumeration value="round-robin"/>
            <xs:enumeration value="random"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="durable-subscriberType">
        <xs:sequence>
            <xs:element name="client-id" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 이 태그는 클라이언트를 식별하는 값을 설정한다.
                        connection-factory element 내에서 뿐만 아니라 durable-subscirber element
                        내에서 모든 client-id 값들 중에서 중복 되어서는 안된다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: JMS 메시지 브로커 내에서 관리 목적으로 사용되는 Durable Subscriber 의 이름이다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="destination-name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Durable Subscriber 가 메시지를 받고자 하는 데스티네이션의 이름이다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="message-selector" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Durable Subscriber 의 message selector 를 설정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="storageType">
        <xs:sequence>
            <xs:choice>
                <xs:element minOccurs="0" name="db-storage" type="db-storageType">
                    <xs:annotation>
                        <xs:documentation><![CDATA[
                            [Description]: 데이터베이스를 스토리지로 사용하는 경우에 설정한다.
                        ]]></xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element minOccurs="0" name="file-storage" type="file-storageType">
                    <xs:annotation>
                        <xs:documentation><![CDATA[
                            [Description]: 파일 시스템을 스토리지로 사용하는 경우에 설정한다.
                            @OBSOLETE 더 이상 사용되지 않는다.
                        ]]></xs:documentation>
                    </xs:annotation>
                </xs:element>
            </xs:choice>

            <xs:element minOccurs="0" name="reliability-level" type="reliability-levelType" default="produce">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 메시지를 스토리지에 저장할 때 신뢰도 수준을 지정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element minOccurs="0" name="delete-invalid-destinations" type="xs:boolean" default="false">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: JMS 엔진을 시작할 때 스토리지로부터 복구된 Destination이 'JMSMain.xml'에 설정되지 않았다면 이 Destination을 스토리지로부터 완전 삭제할지 여부를 결정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>

    </xs:complexType>

    <xs:simpleType name="reliability-levelType">
        <xs:restriction base="xs:token">
            <xs:enumeration value="produce">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                            [Description]: 메시지를 스토리지에 저장하기는 하지만 메시지가 Consumer로 보내질 경우 이에 대한 정보를 남기지 않는다.
                            만약, Consumer가 Acknowledge를 보냈지만 스토리지 장애에 의해 이를 처리 못한 경우에는 복구시에 받아가지 않은 메시지로 처리되어
                            재전송 될 수 있다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="consume">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                            [Description]: 메시지를 스토리지에 저장하고 메시지가 Consumer로 보내질 경우 이에 대한 정보를 남긴다.
                            만약, Consumer가 Acknowledge를 보냈지만 스토리지 장애에 의해 이를 처리 못한 경우에는 복구시에 받아간 메시지로 처리되어
                            각 Destination의 Pending Queue에 저장되게 된다. Pending된 메시지들은 관리자에 의해 삭제되거나 재전송될 수 있다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="complete">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                            [Description]: 
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="embeddedType">
        <xs:sequence>
            <xs:element name="path" type="xs:token" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation><![CDATA[
                            [Description]: Embedded DB 스토리지의 경로를 설정한다.
                        ]]></xs:documentation>
                    </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>


    <xs:complexType name="db-storageType">
        <xs:sequence>
            <xs:choice>
                <xs:element name="data-source-name" type="xs:token">
                    <xs:annotation>
                        <xs:documentation><![CDATA[
                            [Description]: 스토리지로 사용하고자 하는 DB datasource 의 JNDI 이름을 설정한다.
                        ]]></xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="embedded" type="embeddedType">
                    <xs:annotation>
                        <xs:documentation><![CDATA[
                            [Description]: Embedded DB를 스토리지로 사용하고자 할 때 지정한다.
                        ]]></xs:documentation>
                    </xs:annotation>
                </xs:element>
            </xs:choice>
            <xs:element minOccurs="0" name="destination-table-name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: destination 정보를 저장할 테이블 이름을 지정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="durable-subscriber-table-name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
					    [Description]: Durable Subscriber 정보를 저장할 테이블 이름을 지정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="message-table-name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
					    [Description]: message 정보를 저장할 테이블 이름을 지정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="user-property-table-name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
					    [Description]: user property 정보를 저장할 테이블 이름을 지정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="durable-message-table-name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
					    [Description]: Durable message 정보를 저장할 테이블 이름을 지정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="xa-table-name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
					    [Description]: XA 정보를 저장할 테이블 이름을 지정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element minOccurs="0" name="sql-poll-timeout" type="xs:long" default="500">
                <xs:annotation>
                    <xs:documentation><![CDATA[
					    [Description]: 백그라운드에서 데이터베이스작업을 실행하는 SQLCommandExecutor가 SQL Queue로 부터 SQL 명령 가져오기 위해 대기하는 시간을 설정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element minOccurs="0" name="wait-sql-executor" type="xs:boolean" default="true">
                <xs:annotation>
                    <xs:documentation><![CDATA[
					    [Description]: 백그라운드에서 데이터베이스작업을 실행하는 SQLCommandExecutor가 종료될 때 SQL Queue에 작업할 내용이 남아있을 경우 남은 작업들이 끝날 때 까지 기다릴지 여부를 설정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="file-storageType">
        <xs:sequence>
            <xs:element name="path" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 파일 스토리지가 위치하는 path 를 지정한다. 상대 경로를 지정할 경우 JEUS_LOG_HOME 밑에 생성된다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="jms-thread-poolType">
        <xs:sequence>
            <xs:element minOccurs="0" name="min" type="nonNegativeIntType"
                        default="1">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: thread pool 의 최소 크기를 지정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="max" type="nonNegativeIntType" default="300">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: thread pool 의 최대 크기를 지정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="keep-alive-time" type="nonNegativeIntType"
                        default="300000">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: min 갯수를 초과하는 thread 에 대해서 여기에 지정된 시간동안 사용되지 않은 thread 는 소멸하게 된다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="jms-server-clusterType">
        <xs:annotation>
            <xs:documentation><![CDATA[
                [Description]: 데스티네이션 클러스터을 사용하는 경우 설정하며 이 부분은 클러스터링에 참여하는 모든 JMS 메시지 브로커가 동일하여야 한다.
            ]]></xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element minOccurs="0" name="cluster-service" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 클러스터링간 통신을 담당하는 서비스 이름을 지정한다. 지정하지 않을 경우 임의로 지정된다.
                    ]]></xs:documentation>
                </xs:annotation>
                <xs:unique name="cluster-service-config-name">
                    <xs:selector xpath="xs:jms-server/service-config"/>
                    <xs:field xpath="name"/>
                </xs:unique>
            </xs:element>
            <xs:element maxOccurs="unbounded" name="jms-server-info" type="jms-server-infoType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 클러스터에 참여하는 JMS 메시지 브로커에 대한 정보를 설정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="jms-server-infoType">
        <xs:sequence>
            <xs:element name="broker-name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 클러스터간 통신에 사용되는 이름이다. 클러스터링에 참여하는 모든 JMS 메시지 브로커는 각각 유일한 값을 가져야 한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="broker-id" type="positiveShortType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 클러스터간의 통신에 사용되는 브러커 아이디이다. 클러스터에 참여하는 모든 JMS 메시지 브로커는 각각 유일한 값을 가져야 한다.
                        값을 지정하지 않을 경우 cluster 테이블에 설정된 순서대로 임의 지정된다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="oneport" type="xs:boolean" default="false"  minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: JMS Service Channel이 OnePort Transport로 서비스 중 일 때 이값을 true로 한다.
                        이때 ip-address, jms-port값은 JEUSManager나 EngineContainer의 base port이어야 한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="ip-address" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: 해당 JMS 메시지 브로커의 ip-address 주소값이다.
            ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="jms-port" type="nonNegativeIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 해당 JMS 메시지 브로커의 service port 값이다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="use-ssl" type="xs:boolean" default="false">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: SSL 을 사용할 것인지를 설정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="ssl-configuration" type="jms-client-sslType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]:  SSL 에 관련된 환경값들을 설정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="connection-interval" type="nonNegativeIntType" default="60000">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 다른 클러스터 서버와의 connection 을 시도하는 주기이다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="weight" type="positiveIntType" default="1">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: server-weighted 방식의 메시지 분산 방식을 사용하는 경우 이 값이 사용된다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
</xs:schema>
