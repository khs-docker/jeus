<?xml version="1.0" encoding="EUC-KR"?>
<description>     
    <text key="jms-server"><![CDATA[
                [Description]: JMSMain.xml 내의 최고 레벨의 element 이다.
                내부 설정값들 중 token 혹은 String 에 해당하는 값들은 다음의 문자들을 포함할 수 없다. ':', ',', '*', '?', '='
            ]]>     
    </text>
     
    <text key="jms-serverType.broker-name"><![CDATA[
                        [Description]:JMS 메시지 브로커의 이름이다. 설정하지 않는 경우 호스트 이름이 사용된다.
                    ]]>     
    </text>
     
    <text key="jms-serverType.service-config"><![CDATA[
                        [Description]:메시징 서비스를 제공하기 위한 서비스 채널에 대한 설정이다. 최소 하나 이상 설정되어야 한다.
                    ]]>     
    </text>
     
    <text key="jms-serverType.thread-pool"><![CDATA[
                        [Description]:JMS 메시지 브로커가 사용하는 thread pool 에 대한 설정이다.
                    ]]>     
    </text>
     
    <text key="jms-serverType.access-log"><![CDATA[
                        [Description]:access log 에 대한 정보를 지정한다.
                    ]]>     
    </text>
     
    <text key="jms-serverType.durable-subscriber"><![CDATA[
                        [Description]: Durable subscriber 에 대한 정보를 지정한다.
                    ]]>     
    </text>
     
    <text key="jms-serverType.connection-factory"><![CDATA[
                    [Description]: connection factory 에 대한 정보를 지정한다.
                    ]]>     
    </text>
     
    <text key="jms-serverType.destination"><![CDATA[
                        [Description]: 데스티네이션에 대한 정보를 지정한다.
                    ]]>     
    </text>
     
    <text key="jms-serverType.queue-cluster"><![CDATA[
                        [Description]: queue 클러스터링 방식을 설정한다.
                    ]]>     
    </text>
     
    <text key="jms-serverType.topic-cluster"><![CDATA[
                        [Description]: topic 클러스터링 방식을 설정한다.
                        ]]>     
    </text>
     
    <text key="jms-serverType.storage"><![CDATA[
                        [Description]: persistent message 를 위한 storage 정보를 설정한다.
                      ]]>     
    </text>
     
    <text key="jms-serverType.jms-server-cluster"><![CDATA[
                        [Description]: 데스티네이션 클러스터링을 사용하는 경우 여기에 참여하는 JMS 메시지 브로커에 대한 설정을 한다.
                      ]]>     
    </text>
     
    <text key="service-config.name"><![CDATA[
                        [Description]: 서비스 채널의 이름이다. Connection Factory 에 채널 정보를 지정하기 위해 용도로 사용된다.
                    ]]>     
    </text>
     
    <text key="service-config.use-ssl"><![CDATA[
                        [Description]:  서비스 채널에 SSL 을 적용할 것인지를 설정한다.
                    ]]>     
    </text>
     
    <text key="service-config.ssl-configuration"><![CDATA[
                        [Description]:  SSL 에 관련된 환경값들을 설정한다.
                    ]]>     
    </text>
     
    <text key="service-config.client-limit"><![CDATA[
                        [Description]: 서비스 채널이 허용하는 최대 클라이언트 수를 지정한다.
                        blocking socket 을 사용하는 경우 메시지 브로커에 설정된 최대 쓰레드 수를 넘을 수 없다.
                    ]]>     
    </text>
     
    <text key="service-config.backlog-size"><![CDATA[
                        [Description]: 서비스 채널이 허용하는 백로그의 크기이다.
                    ]]>     
    </text>
     
    <text key="service-config.blocking-socket"><![CDATA[
                        [Description]: 해당 서비스 채널이 blocking socket 을 사용할 것인가 non-blocking socket 을 사용할 것인가를 결정한다.
                        확장성을 위해 non-blocking socket 을 사용할 것을 권장한다.
                    ]]>     
    </text>
     
    <text key="service-config.read-buffer-size"><![CDATA[
                        [Description]: 클라이언트로 부터 메시지를 읽어 들이는 네트워크 버퍼의 크기이다. 디폴트는 64K 이다.
                    ]]>     
    </text>
     
    <text key="service-config.write-buffer-size"><![CDATA[
                        [Description]: 클라이언트에게 메시지를 전송하기 위한 네트워크 버퍼의 크기이다. 디폴트는 64K 이다.
                    ]]>     
    </text>
     
    <text key="service-config.connection-timeout"><![CDATA[
                        [Description]: blocking socket 을 사용할 경우 지정된 시간동안 클라이언트로 부터 아무런 요청이 없으면 연결을 종료한다.
                        분단위로 설정하며 디폴트는 120분 이다.
                    ]]>     
    </text>
     
    <text key="service-config.check-security"><![CDATA[
                        [Description]: 클라이언트가 수행하는 동작에 대한 권한 검사를 할 지를 결정한다.
                        이 값이 true이면 jeus.jms.client.connectionFactory에 대한 createConnection 권한이 있는 사용자만
                        이 서비스 채널로의 Connection을 생성할 수 있고, jeus.jms.destination.creation에 대한 createDestination 권한이 있는 사용자만
                        실행 중인 JMS 메시지 브로커에 동적으로 데스티네이션을 생성할 수 있다.
                  ]]>     
    </text>
     
    <text key="service-config.client-keepalive-timeout"><![CDATA[
                        [Description]: 클라이언트와의 연결이 비정상 종료되었을 경우 재접속을 기다리는 시간이다. 이 시간이 지나면
                        해당 클라이언트의 리소스는 모두 서버에 반환된다. 설정된 시간내에는 해당 클라이언트의 clientID 값이 유지되므로
                        네트워크 상태가 불량한 경우에만 설정하도록 한다.
                        초단위로 설정하며 0 이하의 값을 지정하면 기다리지 않고 즉시 리소스를 반환한다.
                    ]]>     
    </text>
     
    <text key="service-config.server-url"><![CDATA[
                        [Description]: 서비스 채널의 URL 을 지정한다. OnePort일 경우에는 'oneport'만 설정하고 'tcp'인 경우 'tcp://host:port'형식으로 설정한다.
                    ]]>     
    </text>
     <ref key="service-config">jms-tcp-address</ref>
     <ref key="jms-server-sslType">jms-ssl-baseType</ref>
     <ref key="client-authType">jms-ssl-trustType</ref>
     <ref key="jms-client-sslType">jms-ssl-trustType</ref>
     <ref key="jms-client-sslType">jms-ssl-baseType</ref>
     
    <text key="connection-factoryType.type"><![CDATA[
                        [Description]: 해당 Connection Factory 의 종류를 설정한다.
                    ]]>     
    </text>
     
    <text key="connection-factoryType.name"><![CDATA[
                        [Description]: JMS 시스템 내에서 관리의 목적으로 사용되는 Connection Factory 의 이름이다.
                    ]]>     
    </text>
     
    <text key="connection-factoryType.service"><![CDATA[
                        [Description]: 해당 Connection Factory 가 연결을 시도할 service 의 이름을 설정한다. service-config 에 지정된 이름을 사용하도록 한다.
                        이름을 지정하지 않을 경우 처음 설정된 서비스로 임의 지정된다.
                    ]]>     
    </text>
     
    <text key="connection-factoryType.export-name"><![CDATA[
                        [Description]: 해당 Connection Factory 가 네이밍 서버에 binding 되는 이름. 설정하지 않으면 name 속성이 그대로 사용된다.
                    ]]>     
    </text>
     
    <text key="connection-factoryType.clustered-factory"><![CDATA[
                        [Description]: connection factory 의 범위를 지정한다. true 인 경우 cluster factory 로 사용된다.
                    ]]>     
    </text>
     
    <text key="connection-factoryType.client-id"><![CDATA[
                        [Description]: 해당 Connection Factory 를 이용하여 생성되는 connection 에 기본값으로 설정되는 ClientID 값이다.
                    ]]>     
    </text>
     
    <text key="connection-factoryType.fixed-client-id"><![CDATA[
                        [Description]: connection ID 의 생성 정책이다. true 일 경우 지정된 client-id 를 그대로 사용하며
                        false 인 경우 JMS 메시지 브로커에 의해 자동적으로 생성된다.
                        생성된 connection ID 는 getClientID() API 를 이용하여 확인할 수 있다.
                    ]]>     
    </text>
     
    <text key="connection-factoryType.broker-selection-policy"><![CDATA[
                        [Description]: ConnectionFactory가 Connection을 생성할 때 어떤 Channel을 선택할 지를 결정하는 정책이다.
                    ]]>     
    </text>
     
    <text key="connection-factoryType.thread-pool"><![CDATA[
                        [Description]: client 가 이 Connection Factory 로 부터 connection 을 만들 경우
                        그 connection 에 대한 thread pool 의 정보를 지정한다.
                    ]]>     
    </text>
     
    <text key="destinationType.type"><![CDATA[
                        [Description]: 해당 데스티네이션의 종류를 설정한다. queue와 topic 중 하나를 지정한다.
                    ]]>     
    </text>
     
    <text key="destinationType.name"><![CDATA[
                        [Description]: JMS 메시지 브로커 내에서 관리 목적으로 사용되는 데스티네이션의 이름이다.
                    ]]>     
    </text>
     
    <text key="destinationType.broker-name"><![CDATA[
                        [Description]: 이 destination으로 오는 메세지를 routing할 broker 이름을 지정한다.
                         이 이름을 지정하지 않으면 connection factory에 연결된 server의 destination으로 간주한다.
                         지정하면 다른 clustering server에 접속하더라도 이 destination의 producer가 보내는 메세지는
                         항상 지정된 broker로 전달되고 접속한 server의 destination에는 전달되지 않는다.
                         clustering destination에는 이 설정이 의미가 없고 사용해서는 안된다.
                    ]]>     
    </text>
     
    <text key="destinationType.export-name"><![CDATA[
                        [Description]: 해당 데스티네이션이 네이밍 서버에 binding 되는 이름.설정하지 않으면 name 속성이 그대로 사용된다.
                    ]]>     
    </text>
     
    <text key="destinationType.multiple-receiver"><![CDATA[
                        [Description]: queue 타입의 데스티네이션에 대해 다중의 receiver 를 허용하여 분산처리를 할 것인지를 설정한다.
                    ]]>     
    </text>
     
    <text key="destinationType.consumer-limit"><![CDATA[
                        [Description]: 데스티네이션에 접근할 수 있는 컨슈머의 수를 제한한다.
                    ]]>     
    </text>
     
    <text key="destinationType.local-distribute"><![CDATA[
                        [Description]: multiple-receiver 로 설정된 queue 데스티네이션의 메시지 분산 방식을 결정한다.
                        round-robin, random 중에 하나를 지정할 수 있다.
                    ]]>     
    </text>
     
    <text key="destinationType.limit"><![CDATA[
                        [Description]: 해당 destination 에서 사용할수 있는 최대 메모리 크기를 설정한다.
                        사용중인 메모리가 이 값을 초과하는 경우 클라이언트의 메시지 전달은 바로 에러 처리되게 된다.
                    ]]>     
    </text>
     
    <text key="destinationType.high-mark"><![CDATA[
                        [Description]: 플로우 컨트롤을 사용하기 시작하는 메모리 크기를 설정한다.
                    ]]>     
    </text>
     
    <text key="destinationType.low-mark"><![CDATA[
                        [Description]: 소프트 캐싱을 시작하는 메모리 크기를 설정한다.
                    ]]>     
    </text>
     
    <text key="destinationType.max-pending-limit"><![CDATA[
                        [Description]: Queue나 Topic에 MessageListener가 등록되어 있는 경우 Destination에
                        메시지가 도착하자 마자 Consumer로 메시지가 보내지므로 클라이언트가 이 메시지들을 빨리 처리 하지
                        않으면 클라이언트 메모리에 쌓이게 되어 OutOfMemory 에러가 발생할 수 있다.
                        DISPATCH는 되었지만 ACKNOWLEDGE를 수신하지 않은 메시지의 최대 허용범위를 지정하여 이런 문제를
                        방지할 수 있다.
                    ]]>     
    </text>
     
    <text key="destinationType.resume-dispatch-factor"><![CDATA[
                        [Description]: PENDING메시지가 max-pending-limit보다 크게 되면 메시지 전달은 일시적으로 중단된다.
                        클라이언트가 메시지를 완전히 처리한 후 ACKNOWLEDGE들을 보내어 PENDING된 메시지의 수가
                        (max-pending-limit * resume-dispatch-factor) 작거나 같으면 DISPATCH는 다시 시작하게 된다.
                    ]]>     
    </text>
     
    <text key="destinationType.queue-cluster-name"><![CDATA[
                            [Description]: queue-cluster 로 지정된 클러스터링 타입을 선택한다.
                        ]]>     
    </text>
     
    <text key="destinationType.topic-cluster-name"><![CDATA[
                            [Description]: topic-cluster 로 지정된 클러스터링 타입을 선택한다.
                        ]]>     
    </text>
     
    <text key="topic-clusterType.topic-cluster-name"><![CDATA[
                        [Description]: topic 클러스터링을 위한 클러스터링 타입을 설정한다.
                    ]]>     
    </text>
     
    <text key="topic-clusterType.relay-type"><![CDATA[
                        [Description]: 위에서 지정된 cluster 서버에 message 를 전달하는 방식이다. non-durable 과 durable을 지정할 수 있다.
                    ]]>     
    </text>
     
    <text key="topic-clusterType.target"><![CDATA[
                        [Description]: 클러스터링에 참여하는 broker name 을 지정한다. 해당 이름은 jms-server-info 에 설정된 이름이어야 한다.
                    ]]>     
    </text>
     
    <text key="queue-clusterType.queue-cluster-name"><![CDATA[
                        [Description]: queue 클러스터링을 위한 클러스터링 타입을 설정한다.
                    ]]>     
    </text>
     
    <text key="queue-clusterType.cluster-distribute"><![CDATA[
                        [Description]: queue 클러스터링에 참여하는 각각의 브로커에 메시지를 분산하기 위한 방식을 지정한다.
                        server-weighted, consumer-weighted, round-robin, random 중에 하나를 지정할 수 있다.
                    ]]>     
    </text>
     
    <text key="queue-clusterType.local-preference"><![CDATA[
                        [Description]: local 브로커에서 처리하는 메시지의 비중을 높인다.
                        server-weighted 혹은 consumer-weighted 방식을 사용할 경우에만 의미가 있다.
                    ]]>     
    </text>
     
    <text key="queue-clusterType.target"><![CDATA[
                        [Description]: 클러스터링에 참여하는 broker name 을 지정한다. 해당 이름은 jms-server-info 에 설정된 이름이어야 한다.
                    ]]>     
    </text>
     
    <text key="durable-subscriberType.client-id"><![CDATA[
                        [Description]: 이 태그는 클라이언트를 식별하는 값을 설정한다.
                        connection-factory element 내에서 뿐만 아니라 durable-subscirber element
                        내에서 모든 client-id 값들 중에서 중복 되어서는 안된다.
                    ]]>     
    </text>
     
    <text key="durable-subscriberType.name"><![CDATA[
                        [Description]: JMS 메시지 브로커 내에서 관리 목적으로 사용되는 Durable Subscriber 의 이름이다.
                    ]]>     
    </text>
     
    <text key="durable-subscriberType.destination-name"><![CDATA[
                        [Description]: Durable Subscriber 가 메시지를 받고자 하는 데스티네이션의 이름이다.
                    ]]>     
    </text>
     
    <text key="durable-subscriberType.message-selector"><![CDATA[
                        [Description]: Durable Subscriber 의 message selector 를 설정한다.
                    ]]>     
    </text>
     
    <text key="storageType.reliability-level"><![CDATA[
                        [Description]: 메시지를 스토리지에 저장할 때 신뢰도 수준을 지정한다.
                    ]]>     
    </text>
     
    <text key="storageType.delete-invalid-destinations"><![CDATA[
                        [Description]: JMS 엔진을 시작할 때 스토리지로부터 복구된 Destination이 'JMSMain.xml'에 설정되지 않았다면 이 Destination을 스토리지로부터 완전 삭제할지 여부를 결정한다.
                    ]]>     
    </text>
     
    <text key="storageType.db-storage"><![CDATA[
                            [Description]: 데이터베이스를 스토리지로 사용하는 경우에 설정한다.
                        ]]>     
    </text>
     
    <text key="storageType.file-storage"><![CDATA[
                            [Description]: 파일 시스템을 스토리지로 사용하는 경우에 설정한다.
                            @OBSOLETE 더 이상 사용되지 않는다.
                        ]]>     
    </text>
     
    <text key="embeddedType.path"><![CDATA[
                            [Description]: Embedded DB 스토리지의 경로를 설정한다.
                        ]]>     
    </text>
     
    <text key="db-storageType.destination-table-name"><![CDATA[
                        [Description]: destination 정보를 저장할 테이블 이름을 지정한다.
                    ]]>     
    </text>
     
    <text key="db-storageType.durable-subscriber-table-name"><![CDATA[
					    [Description]: Durable Subscriber 정보를 저장할 테이블 이름을 지정한다.
                    ]]>     
    </text>
     
    <text key="db-storageType.message-table-name"><![CDATA[
					    [Description]: message 정보를 저장할 테이블 이름을 지정한다.
                    ]]>     
    </text>
     
    <text key="db-storageType.user-property-table-name"><![CDATA[
					    [Description]: user property 정보를 저장할 테이블 이름을 지정한다.
                    ]]>     
    </text>
     
    <text key="db-storageType.durable-message-table-name"><![CDATA[
					    [Description]: Durable message 정보를 저장할 테이블 이름을 지정한다.
                    ]]>     
    </text>
     
    <text key="db-storageType.xa-table-name"><![CDATA[
					    [Description]: XA 정보를 저장할 테이블 이름을 지정한다.
                    ]]>     
    </text>
     
    <text key="db-storageType.sql-poll-timeout"><![CDATA[
					    [Description]: 백그라운드에서 데이터베이스작업을 실행하는 SQLCommandExecutor가 SQL Queue로 부터 SQL 명령 가져오기 위해 대기하는 시간을 설정한다.
                    ]]>     
    </text>
     
    <text key="db-storageType.wait-sql-executor"><![CDATA[
					    [Description]: 백그라운드에서 데이터베이스작업을 실행하는 SQLCommandExecutor가 종료될 때 SQL Queue에 작업할 내용이 남아있을 경우 남은 작업들이 끝날 때 까지 기다릴지 여부를 설정한다.
                    ]]>     
    </text>
     
    <text key="db-storageType.data-source-name"><![CDATA[
                            [Description]: 스토리지로 사용하고자 하는 DB datasource 의 JNDI 이름을 설정한다.
                        ]]>     
    </text>
     
    <text key="db-storageType.embedded"><![CDATA[
                            [Description]: Embedded DB를 스토리지로 사용하고자 할 때 지정한다.
                        ]]>     
    </text>
     
    <text key="file-storageType.path"><![CDATA[
                        [Description]: 파일 스토리지가 위치하는 path 를 지정한다. 상대 경로를 지정할 경우 JEUS_LOG_HOME 밑에 생성된다.
                    ]]>     
    </text>
     
    <text key="jms-thread-poolType.min"><![CDATA[
                        [Description]: thread pool 의 최소 크기를 지정한다.
                    ]]>     
    </text>
     
    <text key="jms-thread-poolType.max"><![CDATA[
                        [Description]: thread pool 의 최대 크기를 지정한다.
                    ]]>     
    </text>
     
    <text key="jms-thread-poolType.keep-alive-time"><![CDATA[
                        [Description]: min 갯수를 초과하는 thread 에 대해서 여기에 지정된 시간동안 사용되지 않은 thread 는 소멸하게 된다.
                    ]]>     
    </text>
     
    <text key="jms-server-clusterType.cluster-service"><![CDATA[
                        [Description]: 클러스터링간 통신을 담당하는 서비스 이름을 지정한다. 지정하지 않을 경우 임의로 지정된다.
                    ]]>     
    </text>
     
    <text key="jms-server-clusterType.jms-server-info"><![CDATA[
                        [Description]: 클러스터에 참여하는 JMS 메시지 브로커에 대한 정보를 설정한다.
                    ]]>     
    </text>
     
    <text key="jms-server-infoType.broker-name"><![CDATA[
                        [Description]: 클러스터간 통신에 사용되는 이름이다. 클러스터링에 참여하는 모든 JMS 메시지 브로커는 각각 유일한 값을 가져야 한다.
                    ]]>     
    </text>
     
    <text key="jms-server-infoType.broker-id"><![CDATA[
                        [Description]: 클러스터간의 통신에 사용되는 브러커 아이디이다. 클러스터에 참여하는 모든 JMS 메시지 브로커는 각각 유일한 값을 가져야 한다.
                        값을 지정하지 않을 경우 cluster 테이블에 설정된 순서대로 임의 지정된다.
                    ]]>     
    </text>
     
    <text key="jms-server-infoType.oneport"><![CDATA[
                        [Description]: JMS Service Channel이 OnePort Transport로 서비스 중 일 때 이값을 true로 한다.
                        이때 ip-address, jms-port값은 JEUSManager나 EngineContainer의 base port이어야 한다.
                    ]]>     
    </text>
     
    <text key="jms-server-infoType.ip-address"><![CDATA[
                    [Description]: 해당 JMS 메시지 브로커의 ip-address 주소값이다.
            ]]>     
    </text>
     
    <text key="jms-server-infoType.jms-port"><![CDATA[
                        [Description]: 해당 JMS 메시지 브로커의 service port 값이다.
                    ]]>     
    </text>
     
    <text key="jms-server-infoType.use-ssl"><![CDATA[
                        [Description]: SSL 을 사용할 것인지를 설정한다.
                    ]]>     
    </text>
     
    <text key="jms-server-infoType.ssl-configuration"><![CDATA[
                        [Description]:  SSL 에 관련된 환경값들을 설정한다.
                    ]]>     
    </text>
     
    <text key="jms-server-infoType.connection-interval"><![CDATA[
                        [Description]: 다른 클러스터 서버와의 connection 을 시도하는 주기이다.
                    ]]>     
    </text>
     
    <text key="jms-server-infoType.weight"><![CDATA[
                        [Description]: server-weighted 방식의 메시지 분산 방식을 사용하는 경우 이 값이 사용된다.
                    ]]>     
    </text>
     
    <text key="jms-tcp-address.server-address"><![CDATA[
                        [Description]: 서비스 채널의 IP 어드레스를 설정한다. 커넥션 팩토리의 주소로 사용된다.
                        설정하지 않는 경우 "127.0.0.1" 이 사용된다.
                        [Example]: 123.123.123.123
                    ]]>     
    </text>
     
    <text key="jms-tcp-address.port"><![CDATA[
                        [Description]: 서비스 채널의 TCP 포트 번호이다.
                        [Example]: 9741
                    ]]>     
    </text>
     
    <text key="reliability-levelType.produce"><![CDATA[
                            [Description]: 메시지를 스토리지에 저장하기는 하지만 메시지가 Consumer로 보내질 경우 이에 대한 정보를 남기지 않는다.
                            만약, Consumer가 Acknowledge를 보냈지만 스토리지 장애에 의해 이를 처리 못한 경우에는 복구시에 받아가지 않은 메시지로 처리되어
                            재전송 될 수 있다.
                    ]]>     
    </text>
     
    <text key="reliability-levelType.consume"><![CDATA[
                            [Description]: 메시지를 스토리지에 저장하고 메시지가 Consumer로 보내질 경우 이에 대한 정보를 남긴다.
                            만약, Consumer가 Acknowledge를 보냈지만 스토리지 장애에 의해 이를 처리 못한 경우에는 복구시에 받아간 메시지로 처리되어
                            각 Destination의 Pending Queue에 저장되게 된다. Pending된 메시지들은 관리자에 의해 삭제되거나 재전송될 수 있다.
                    ]]>     
    </text>
     
    <text key="reliability-levelType.complete"><![CDATA[
                            [Description]: 
                    ]]>     
    </text>
 <ref key="service-config">jms-tcp-address</ref>
    <ref key="jms-server-sslType">jms-ssl-baseType</ref>
    <ref key="client-authType">jms-ssl-trustType</ref>
    <ref key="jms-client-sslType">jms-ssl-trustType</ref>
    <ref key="jms-client-sslType">jms-ssl-baseType</ref>
</description>
