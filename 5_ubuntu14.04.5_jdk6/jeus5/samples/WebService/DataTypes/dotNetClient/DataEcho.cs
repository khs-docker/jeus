//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version:2.0.40607.16
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=2.0.40607.16.
// 


/// <remarks/>
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="DataEchoSoapBinding", Namespace="urn:DataEchoService")]
public class DataEchoService : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback echoStringOperationCompleted;
    
    private System.Threading.SendOrPostCallback echoBooleanOperationCompleted;
    
    private System.Threading.SendOrPostCallback echoDoubleOperationCompleted;
    
    private System.Threading.SendOrPostCallback echoFloatOperationCompleted;
    
    private System.Threading.SendOrPostCallback echoIntegerOperationCompleted;
    
    private System.Threading.SendOrPostCallback echoByteOperationCompleted;
    
    private System.Threading.SendOrPostCallback echoBigDecimalOperationCompleted;
    
    private System.Threading.SendOrPostCallback echoCalendarOperationCompleted;
    
    private System.Threading.SendOrPostCallback echoArrIntOperationCompleted;
    
    /// <remarks/>
    public DataEchoService(string url) {
		this.Url = url;
	}

	protected override System.Net.WebRequest GetWebRequest(Uri uri)
	{
		System.Net.HttpWebRequest webRequest = (System.Net.HttpWebRequest)base.GetWebRequest(uri);

		webRequest.KeepAlive = false;
		webRequest.ProtocolVersion = System.Net.HttpVersion.Version10;
		return webRequest;
	}

	/// <remarks/>
    public event echoStringCompletedEventHandler echoStringCompleted;
    
    /// <remarks/>
    public event echoBooleanCompletedEventHandler echoBooleanCompleted;
    
    /// <remarks/>
    public event echoDoubleCompletedEventHandler echoDoubleCompleted;
    
    /// <remarks/>
    public event echoFloatCompletedEventHandler echoFloatCompleted;
    
    /// <remarks/>
    public event echoIntegerCompletedEventHandler echoIntegerCompleted;
    
    /// <remarks/>
    public event echoByteCompletedEventHandler echoByteCompleted;
    
    /// <remarks/>
    public event echoBigDecimalCompletedEventHandler echoBigDecimalCompleted;
    
    /// <remarks/>
    public event echoCalendarCompletedEventHandler echoCalendarCompleted;
    
    /// <remarks/>
    public event echoArrIntCompletedEventHandler echoArrIntCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("hokeAction", RequestNamespace="urn:DataEchoService", ResponseNamespace="urn:DataEchoService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("echoStringReturn")]
    public string echoString(string in0) {
        object[] results = this.Invoke("echoString", new object[] {
                    in0});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginechoString(string in0, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("echoString", new object[] {
                    in0}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndechoString(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void echoStringAsync(string in0) {
        this.echoStringAsync(in0, null);
    }
    
    /// <remarks/>
    public void echoStringAsync(string in0, object userState) {
        if ((this.echoStringOperationCompleted == null)) {
            this.echoStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnechoStringOperationCompleted);
        }
        this.InvokeAsync("echoString", new object[] {
                    in0}, this.echoStringOperationCompleted, userState);
    }
    
    private void OnechoStringOperationCompleted(object arg) {
        if ((this.echoStringCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.echoStringCompleted(this, new echoStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("hokeAction", RequestNamespace="urn:DataEchoService", ResponseNamespace="urn:DataEchoService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("echoBooleanReturn", IsNullable=true)]
    public System.Nullable<bool> echoBoolean([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<bool> in0) {
        object[] results = this.Invoke("echoBoolean", new object[] {
                    in0});
        return ((System.Nullable<bool>)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginechoBoolean(System.Nullable<bool> in0, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("echoBoolean", new object[] {
                    in0}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Nullable<bool> EndechoBoolean(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Nullable<bool>)(results[0]));
    }
    
    /// <remarks/>
    public void echoBooleanAsync(System.Nullable<bool> in0) {
        this.echoBooleanAsync(in0, null);
    }
    
    /// <remarks/>
    public void echoBooleanAsync(System.Nullable<bool> in0, object userState) {
        if ((this.echoBooleanOperationCompleted == null)) {
            this.echoBooleanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnechoBooleanOperationCompleted);
        }
        this.InvokeAsync("echoBoolean", new object[] {
                    in0}, this.echoBooleanOperationCompleted, userState);
    }
    
    private void OnechoBooleanOperationCompleted(object arg) {
        if ((this.echoBooleanCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.echoBooleanCompleted(this, new echoBooleanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("hokeAction", RequestNamespace="urn:DataEchoService", ResponseNamespace="urn:DataEchoService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("echoDoubleReturn", IsNullable=true)]
    public System.Nullable<double> echoDouble([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<double> in0) {
        object[] results = this.Invoke("echoDouble", new object[] {
                    in0});
        return ((System.Nullable<double>)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginechoDouble(System.Nullable<double> in0, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("echoDouble", new object[] {
                    in0}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Nullable<double> EndechoDouble(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Nullable<double>)(results[0]));
    }
    
    /// <remarks/>
    public void echoDoubleAsync(System.Nullable<double> in0) {
        this.echoDoubleAsync(in0, null);
    }
    
    /// <remarks/>
    public void echoDoubleAsync(System.Nullable<double> in0, object userState) {
        if ((this.echoDoubleOperationCompleted == null)) {
            this.echoDoubleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnechoDoubleOperationCompleted);
        }
        this.InvokeAsync("echoDouble", new object[] {
                    in0}, this.echoDoubleOperationCompleted, userState);
    }
    
    private void OnechoDoubleOperationCompleted(object arg) {
        if ((this.echoDoubleCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.echoDoubleCompleted(this, new echoDoubleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("hokeAction", RequestNamespace="urn:DataEchoService", ResponseNamespace="urn:DataEchoService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("echoFloatReturn", IsNullable=true)]
    public System.Nullable<float> echoFloat([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<float> in0) {
        object[] results = this.Invoke("echoFloat", new object[] {
                    in0});
        return ((System.Nullable<float>)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginechoFloat(System.Nullable<float> in0, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("echoFloat", new object[] {
                    in0}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Nullable<float> EndechoFloat(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Nullable<float>)(results[0]));
    }
    
    /// <remarks/>
    public void echoFloatAsync(System.Nullable<float> in0) {
        this.echoFloatAsync(in0, null);
    }
    
    /// <remarks/>
    public void echoFloatAsync(System.Nullable<float> in0, object userState) {
        if ((this.echoFloatOperationCompleted == null)) {
            this.echoFloatOperationCompleted = new System.Threading.SendOrPostCallback(this.OnechoFloatOperationCompleted);
        }
        this.InvokeAsync("echoFloat", new object[] {
                    in0}, this.echoFloatOperationCompleted, userState);
    }
    
    private void OnechoFloatOperationCompleted(object arg) {
        if ((this.echoFloatCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.echoFloatCompleted(this, new echoFloatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("hokeAction", RequestNamespace="urn:DataEchoService", ResponseNamespace="urn:DataEchoService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("echoIntegerReturn", IsNullable=true)]
    public System.Nullable<int> echoInteger([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> in0) {
        object[] results = this.Invoke("echoInteger", new object[] {
                    in0});
        return ((System.Nullable<int>)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginechoInteger(System.Nullable<int> in0, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("echoInteger", new object[] {
                    in0}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Nullable<int> EndechoInteger(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Nullable<int>)(results[0]));
    }
    
    /// <remarks/>
    public void echoIntegerAsync(System.Nullable<int> in0) {
        this.echoIntegerAsync(in0, null);
    }
    
    /// <remarks/>
    public void echoIntegerAsync(System.Nullable<int> in0, object userState) {
        if ((this.echoIntegerOperationCompleted == null)) {
            this.echoIntegerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnechoIntegerOperationCompleted);
        }
        this.InvokeAsync("echoInteger", new object[] {
                    in0}, this.echoIntegerOperationCompleted, userState);
    }
    
    private void OnechoIntegerOperationCompleted(object arg) {
        if ((this.echoIntegerCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.echoIntegerCompleted(this, new echoIntegerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("hokeAction", RequestNamespace="urn:DataEchoService", ResponseNamespace="urn:DataEchoService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("echoByteReturn", IsNullable=true)]
    public System.Nullable<sbyte> echoByte([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<sbyte> in0) {
        object[] results = this.Invoke("echoByte", new object[] {
                    in0});
        return ((System.Nullable<sbyte>)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginechoByte(System.Nullable<sbyte> in0, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("echoByte", new object[] {
                    in0}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Nullable<sbyte> EndechoByte(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Nullable<sbyte>)(results[0]));
    }
    
    /// <remarks/>
    public void echoByteAsync(System.Nullable<sbyte> in0) {
        this.echoByteAsync(in0, null);
    }
    
    /// <remarks/>
    public void echoByteAsync(System.Nullable<sbyte> in0, object userState) {
        if ((this.echoByteOperationCompleted == null)) {
            this.echoByteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnechoByteOperationCompleted);
        }
        this.InvokeAsync("echoByte", new object[] {
                    in0}, this.echoByteOperationCompleted, userState);
    }
    
    private void OnechoByteOperationCompleted(object arg) {
        if ((this.echoByteCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.echoByteCompleted(this, new echoByteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("hokeAction", RequestNamespace="urn:DataEchoService", ResponseNamespace="urn:DataEchoService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("echoBigDecimalReturn")]
    public decimal echoBigDecimal(decimal in0) {
        object[] results = this.Invoke("echoBigDecimal", new object[] {
                    in0});
        return ((decimal)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginechoBigDecimal(decimal in0, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("echoBigDecimal", new object[] {
                    in0}, callback, asyncState);
    }
    
    /// <remarks/>
    public decimal EndechoBigDecimal(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((decimal)(results[0]));
    }
    
    /// <remarks/>
    public void echoBigDecimalAsync(decimal in0) {
        this.echoBigDecimalAsync(in0, null);
    }
    
    /// <remarks/>
    public void echoBigDecimalAsync(decimal in0, object userState) {
        if ((this.echoBigDecimalOperationCompleted == null)) {
            this.echoBigDecimalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnechoBigDecimalOperationCompleted);
        }
        this.InvokeAsync("echoBigDecimal", new object[] {
                    in0}, this.echoBigDecimalOperationCompleted, userState);
    }
    
    private void OnechoBigDecimalOperationCompleted(object arg) {
        if ((this.echoBigDecimalCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.echoBigDecimalCompleted(this, new echoBigDecimalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("hokeAction", RequestNamespace="urn:DataEchoService", ResponseNamespace="urn:DataEchoService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("echoCalendarReturn")]
    public System.DateTime echoCalendar(System.DateTime in0) {
        object[] results = this.Invoke("echoCalendar", new object[] {
                    in0});
        return ((System.DateTime)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginechoCalendar(System.DateTime in0, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("echoCalendar", new object[] {
                    in0}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.DateTime EndechoCalendar(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.DateTime)(results[0]));
    }
    
    /// <remarks/>
    public void echoCalendarAsync(System.DateTime in0) {
        this.echoCalendarAsync(in0, null);
    }
    
    /// <remarks/>
    public void echoCalendarAsync(System.DateTime in0, object userState) {
        if ((this.echoCalendarOperationCompleted == null)) {
            this.echoCalendarOperationCompleted = new System.Threading.SendOrPostCallback(this.OnechoCalendarOperationCompleted);
        }
        this.InvokeAsync("echoCalendar", new object[] {
                    in0}, this.echoCalendarOperationCompleted, userState);
    }
    
    private void OnechoCalendarOperationCompleted(object arg) {
        if ((this.echoCalendarCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.echoCalendarCompleted(this, new echoCalendarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("hokeAction", RequestNamespace="urn:DataEchoService", ResponseNamespace="urn:DataEchoService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("echoArrIntReturn", IsNullable=true)]
    public System.Nullable<int[]> echoArrInt([System.Xml.Serialization.XmlElementAttribute("in0", IsNullable=true)] System.Nullable<int[]> in0) {
        object[] results = this.Invoke("echoArrInt", new object[] {
                    in0});
        return ((System.Nullable<int[]>)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginechoArrInt(System.Nullable<int[]> in0, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("echoArrInt", new object[] {
                    in0}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Nullable<int[]> EndechoArrInt(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Nullable<int[]>)(results[0]));
    }
    
    /// <remarks/>
    public void echoArrIntAsync(System.Nullable<int[]> in0) {
        this.echoArrIntAsync(in0, null);
    }
    
    /// <remarks/>
    public void echoArrIntAsync(System.Nullable<int[]> in0, object userState) {
        if ((this.echoArrIntOperationCompleted == null)) {
            this.echoArrIntOperationCompleted = new System.Threading.SendOrPostCallback(this.OnechoArrIntOperationCompleted);
        }
        this.InvokeAsync("echoArrInt", new object[] {
                    in0}, this.echoArrIntOperationCompleted, userState);
    }
    
    private void OnechoArrIntOperationCompleted(object arg) {
        if ((this.echoArrIntCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.echoArrIntCompleted(this, new echoArrIntCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
public delegate void echoStringCompletedEventHandler(object sender, echoStringCompletedEventArgs args);

/// <remarks/>
public class echoStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal echoStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
public delegate void echoBooleanCompletedEventHandler(object sender, echoBooleanCompletedEventArgs args);

/// <remarks/>
public class echoBooleanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal echoBooleanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Nullable<bool> Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Nullable<bool>)(this.results[0]));
        }
    }
}

/// <remarks/>
public delegate void echoDoubleCompletedEventHandler(object sender, echoDoubleCompletedEventArgs args);

/// <remarks/>
public class echoDoubleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal echoDoubleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Nullable<double> Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Nullable<double>)(this.results[0]));
        }
    }
}

/// <remarks/>
public delegate void echoFloatCompletedEventHandler(object sender, echoFloatCompletedEventArgs args);

/// <remarks/>
public class echoFloatCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal echoFloatCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Nullable<float> Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Nullable<float>)(this.results[0]));
        }
    }
}

/// <remarks/>
public delegate void echoIntegerCompletedEventHandler(object sender, echoIntegerCompletedEventArgs args);

/// <remarks/>
public class echoIntegerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal echoIntegerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Nullable<int> Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Nullable<int>)(this.results[0]));
        }
    }
}

/// <remarks/>
public delegate void echoByteCompletedEventHandler(object sender, echoByteCompletedEventArgs args);

/// <remarks/>
public class echoByteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal echoByteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Nullable<sbyte> Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Nullable<sbyte>)(this.results[0]));
        }
    }
}

/// <remarks/>
public delegate void echoBigDecimalCompletedEventHandler(object sender, echoBigDecimalCompletedEventArgs args);

/// <remarks/>
public class echoBigDecimalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal echoBigDecimalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public decimal Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((decimal)(this.results[0]));
        }
    }
}

/// <remarks/>
public delegate void echoCalendarCompletedEventHandler(object sender, echoCalendarCompletedEventArgs args);

/// <remarks/>
public class echoCalendarCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal echoCalendarCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.DateTime Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.DateTime)(this.results[0]));
        }
    }
}

/// <remarks/>
public delegate void echoArrIntCompletedEventHandler(object sender, echoArrIntCompletedEventArgs args);

/// <remarks/>
public class echoArrIntCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal echoArrIntCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Nullable<int[]> Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Nullable<int[]>)(this.results[0]));
        }
    }
}
