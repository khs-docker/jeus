<?xml version="1.0" encoding="GB2312"?>
<xs:schema 
    attributeFormDefault="unqualified" 
    elementFormDefault="qualified" 
    targetNamespace="http://www.tmaxsoft.com/xml/ns/jeus" version="5.0" 
    xmlns="http://www.tmaxsoft.com/xml/ns/jeus" 
    xmlns:xs="http://www.w3.org/2001/XMLSchema">      
    <xs:include schemaLocation="jeus-common.xsd"/>     
    <xs:include schemaLocation="jeus-security.xsd"/>      
    <xs:element name="jeus-system" type="jeus-systemType">         
        <xs:annotation>             
            <xs:documentation><![CDATA[
                [Description]: JEUS设定文件的最上级element。属于JEUS系统的所有节点设定，记录到该element内。
            ]]>
            </xs:documentation>         
        </xs:annotation>     
    </xs:element>      
    <xs:element name="application" type="applicationType">         
        <xs:annotation>             
            <xs:documentation><![CDATA[
                [Description]: jeus-application-dd.xml的 element。
            ]]>
            </xs:documentation>         
        </xs:annotation>     
    </xs:element>       
    <xs:complexType name="jeus-systemType">         
        <xs:sequence>             
            <xs:element maxOccurs="unbounded" minOccurs="1" name="node" type="jeus-nodeType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: JEUS ’node’基本上是正在执行JEUS的服务器机器名称。在JEUS集群环境中，每个JEUS 节点都具有一个<node> element。每个服务器都具有JEUSMain.xml，并且通过该文件获取其他服务器的信息。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="naming-server" type="naming-serverType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 命名服务器元素包括JEUS命名服务器的信息。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="security-manager" type="security-managerType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: security-manager element是JEUS安全信息管理相关的说明。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="resource" type="resourceType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 这里包括了与JEUS连动的外部资源信息。这里使用的资源有DB、TP monitor。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element maxOccurs="unbounded" minOccurs="0" name="application" type="applicationType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 指定执行JEUS时被deploy的application。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>       
    <xs:complexType name="jeus-nodeType">         
        <xs:sequence>             
            <xs:element name="name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 节点的名称
                        [Value Description]: 实际JEUS工作的机器名称。在UNIX可以通过“uname -n”获悉，在Windows上是，[系统登录信息]-[网络识别]中显示的计算机名称。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="listener" type="listenerType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                                [Description]: 指定该节点的JEUS系统所使用的socket listener以及socket connection request处理上需要的各种属性。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="backup-node" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 指定该node要监视的node。指定的节点被down的情况下，如果该节点还未被boot时，进行boot。
                        [Value Description]: 将作为备份节点的节点名称。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element maxOccurs="unbounded" minOccurs="0" name="engine-container" type="engine-containerType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 管理多个JEUS引擎的container。Application以该container为单位被deploy和执行。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="remote-webtob-list" type="remote-webtob-listType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                     [Description]: 定义远程Webtob Web Server系统管理环境的部分。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="class-ftp" type="xs:boolean">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: class FTP通过FTP，将EJB stub传送到客户端。如果不使用class FTP，就需要直接复制相关文件。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="sequential-start" type="xs:boolean">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: ‘true’时，Engine Container将按顺序booting。基本上Engine Container是同时booting的，但是有时候可能会发生问题。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="scheduler" type="schedulerType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 包括JEUS Scheduler相关的设定。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="enable-jnlp" type="xs:boolean">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 指定是否要使用JNLP Server。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="enable-webadmin" type="xs:boolean">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 指定是否要使用WebAdmin。WebAdmin是管理JEUS的基于web的工具。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="webadmin-config" type="webadmin-configType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: JEUS WebAdmin相关的设定。
                    ]]>
                    </xs:documentation>                     
                    <xs:appinfo>                         <metadata>                             <element-level>ADVANCED</element-level>                         </metadata>                     
                    </xs:appinfo>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element maxOccurs="unbounded" minOccurs="0" name="system-logging" type="system-loggingType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 要在JEUS Manager中使用的logger相关设定。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="session-server" type="jeusmain-session-serverType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 提供中央集中式session clustering的服务器相关设定。可以提供Servlet/JSP中使用的HttpSession 集群以及EJB session集群。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element maxOccurs="1" minOccurs="0" name="session-router-config" type="session-router-configType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 提供分布式session clustering的服务器相关设定。提供Servlet/JSP中使用的HttpSession集群。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>              
            <xs:element minOccurs="0" name="jmx-manager" type="jmx-managerType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: JEUS Manager JVM中使用的JMX相关的设定。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="listenerType">         
        <xs:sequence>             
            <xs:element default="128" minOccurs="0" name="backlog" type="off-intType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                                [Description]: 设定被指定为$JEUS_BASEPORT的JEUS system listener port相关的backlog值。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="ssl" type="security-sslType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                                [Description]: 指定Jeus Security system相关的SSL属性。设定该element时，将在使用Jeus Security system的所有socket connection上适用SSL。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="thread-pool" type="poolingType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                                [Description]: 设定Jeus system listener port ($JEUS_BASEPORT)所需的socket connection处理上需要的thread pool。
                    ]]>
                    </xs:documentation>                     
                    <xs:appinfo>                         <metadata>                             <default-element>false</default-element>                         </metadata>                     
                    </xs:appinfo>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="security-sslType">         
        <xs:sequence>             
            <xs:element minOccurs="0" name="port" type="off-intType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                                [Description]: 指定Jeus Security system在SSL connection上使用的listen 端口。
                                [Value Description]: 默认值为$JEUS_BASEPORT + 1。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="jeusmain-session-serverType">         
        <xs:sequence>             
            <xs:element default="60000" minOccurs="0" name="resolution" type="nonNegativeIntType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                                    [Description]: 指定执行session removal、session passivation等operation的thread活动周期。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="thread-pool" type="poolingType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                                [Description]: 设定在中央集中式session服务器上使用的socket connection处理所需的thread pool。
                    ]]>
                    </xs:documentation>                     
                    <xs:appinfo>                         <metadata>                             <default-element>false</default-element>                         </metadata>                     
                    </xs:appinfo>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="true" minOccurs="0" name="use-nio" type="xs:boolean">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 指定在中央集中式session服务器之间的通信上是否采用Nonblocking I/O。
                    ]]>
                    </xs:documentation>                     
                    <xs:appinfo>                         <metadata>                             <element-level>ADVANCED</element-level>                         </metadata>                     
                    </xs:appinfo>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="5000" minOccurs="0" name="connect-timeout" type="nonNegativeLongType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                            [Description]: 存在于Manager的中央集中式session服务器之间，生成socket connection时适用的超时值。
                    ]]>
                    </xs:documentation>                     
                    <xs:appinfo>                         <metadata>                             <element-level>ADVANCED</element-level>                         </metadata>                     
                    </xs:appinfo>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="20000" minOccurs="0" name="read-timeout" type="nonNegativeLongType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                            [Description]: 存在于Manager的中央集中式session服务器之间的通信上适用的read超时值。发送数据后，等待应答的最长时间相当于这里指定的时间。
                    ]]>
                    </xs:documentation>                     
                    <xs:appinfo>                         <metadata>                             <element-level>ADVANCED</element-level>                         </metadata>                     
                    </xs:appinfo>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element maxOccurs="unbounded" minOccurs="0" name="session-manager" type="session-managerType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                                    [Description]: 指定保管session，向WebContainer/EJB提供session对象的管理员。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="session-managerType">         
        <xs:sequence>             
            <xs:element name="name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                                    [Description]: 设定session的名称。要指定jeus clustering system上具有唯一性的值。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="-1" minOccurs="0" name="passivation-to" type="off-intType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                                    [Description]: 内存上存在的session对象在一定时间内不被使用时，从session中删除掉，同时保存到file-db中。
                                    [Value Description]: -1时，不执行passivation。设定大于0的时间时，超过指定时间不使用的内存上的session对象将被passivation。单位为msec。默认值为-1。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="-1" minOccurs="0" name="removal-to" type="off-intType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                                    [Description]: 指定保存在file-db的session对象的保存期限。passivation-to的值为-1时，起到内存中存在之session对象的去除周期作用。[Value Description]: -1时，不会从file-db中去除。设定大于0的时间时，自生成时间开始超过指定时间的session对象都被去除。单位为msec。默认值为-1。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="file-db-path" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                                    [Description]: file-db上指定路径。
                                    [Value Description]: 应通过绝对路径表示。默认值为$JEUS_HOME/.workspace。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="file-db-name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                                    [Description]: 指定file-db名称。
                                    [Value Description]: 默认值采用session-manager的name设定。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="1000" minOccurs="0" name="min-hole" type="xs:int">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                                    [Description]: 在一定时间运用file-db后文件大小将超过必要的尺寸。file I/O的发生次数达到该设定上指定的次数时，执行file packing防止文件过分增大。
                    ]]>
                    </xs:documentation>                     
                    <xs:appinfo>                         <metadata>                             <element-level>ADVANCED</element-level>                         </metadata>                     
                    </xs:appinfo>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="0.5" minOccurs="0" name="packing-rate" type="fractionType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                                    [Description]: 在一定时间运用file-db后文件的大小将超过必要的大小。与目前的session对象数量相比，file I/O次数超过指定的ratio时，执行file packing防止文件过分增大。
                    ]]>
                    </xs:documentation>                     
                    <xs:appinfo>                         <metadata>                             <element-level>ADVANCED</element-level>                         </metadata>                     
                    </xs:appinfo>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="30000" minOccurs="0" name="check-to" type="xs:int">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                                    [Description]: 决定隔多长时间执行备份过程。以该设定上指定的时间周期，调查是否有更新的session对象，如果存在更新的session对象时，执行备份。
                    ]]>
                    </xs:documentation>                     
                    <xs:appinfo>                         <metadata>                             <element-level>ADVANCED</element-level>                         </metadata>                     
                    </xs:appinfo>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="backup-name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                                    [Description]: 指定要当作该session-manager备份使用的session-manager的名称。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="1000" minOccurs="0" name="backup-trigger" type="xs:int">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                                    [Description]: local session manager上 session对象的更新发生到某种程度时，决定是否将更新的session对象备份到backup session manager。local session manager上发生的session object update次数达到该设定上指定的次数时，执行备份。
                    ]]>
                    </xs:documentation>                     
                    <xs:appinfo>                         <metadata>                             <element-level>ADVANCED</element-level>                         </metadata>                     
                    </xs:appinfo>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="30000" minOccurs="0" name="operation-to" type="xs:int">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                                    [Description]: 指定session-manager和WebContainer之间的read operation上适用的超时。(只有在使用RMI时有意义)
                    ]]>
                    </xs:documentation>                     
                    <xs:appinfo>                         <metadata>                             <element-level>ADVANCED</element-level>                         </metadata>                     
                    </xs:appinfo>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="engine-containerType">         
        <xs:sequence>             
            <xs:element name="name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: Engine Container的名称.
                        [Value Description]: 输入适当的名称。组合在这里输入的名称和节点名称，生成实际的Engine Container名称。例如) 在“johan_mycontainer”中“mycontainer”在这里输入的名称。
                        [Defined Value]:
						  [default]:
                            如果使用该名称，该引擎Container将在与JEUSManager相同的JVM上工作。对于其他名称，通过新的JVM process运营Engine Container。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="id" type="xs:int">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[[Description]: Engine Container的 ID                        [Value Description]: 该Engine Container使用的ID，将选定为大于0小于128的值。由于该值                          在Transaction Manager生成 transaction ID时使用，在 recovery时，该值fail之前与之后的值应当一致。                          . default 值将name的hashcode作为基础。 如果与其他的EngineContainer重叠，container                          boot将会失败。]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="base-port" type="xs:int">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 按container分别使用listen port时，基本情况下base port + 15 + containerID * 10 值被使用为container的 base port。直接指定该值时使用。
                        [Value Description]: 该Engine Container使用的listen port值。该值主要在Transaction Manager创建 transaction ID时使用。因此，在recovery时该值的fail之前和之后要相同。如果与其他EngineContainer重叠，container boot即失败。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="command-option" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 输入进入到Engine Container JVM的JVM选项。
                        [Example]: <command-option>-Xms64m -Xmx128m</command-option>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element maxOccurs="unbounded" minOccurs="1" name="engine-command" type="engine-commandType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 引擎提供J2EE应用程序的工作环境。J2EE spec中对应于Container的功能。所有引擎在Engine Container被booting时执行，每个Engine Container支持每个引擎类型中的一个。引擎类型有servlet, ejb, jms, ws。各表示EJB Engine, Servlet Engine, JMS Engine, WebServer Engine。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="enable-interop" type="enable-interopType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                      [Description]: 如果该设定存在，该引擎container可以使用IIOP协议的所有ORB互动。此时，两个特殊的listener Interface将Deploy到引擎container。(CSI listener和OTS listener). 该interface识别和调整，包括安全(例如: "principal")和事务处理(例如：GTID)的IIOP message header。如果要激活该功能，在引擎container的JVM上必须明示安全参数。
                    ]]>
                    </xs:documentation>                     
                    <xs:appinfo>                         <metadata>                             <default-element>false</default-element>                         </metadata>                     
                    </xs:appinfo>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="true" minOccurs="0" name="start-on-boot" type="xs:boolean">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 决定启动时是否启container。
                                       这个值为 false的话启动时不启container。
                    
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="true" minOccurs="0" name="sequential-start" type="xs:boolean">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 设定是否将引擎一个个地booting。基本上所有引擎在同时booting，所以可能发生问题。Booting顺序遵照JEUSMain.xml上指定的顺序。
                        [Performance Recommendation]: 使用该功能时，Engine Container的执行时间会延长，但是更加稳定。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="user-class-path" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 执行Engine Container的JVM classpath上添加路径。该设定不适用于默认的引擎Container。为了适用到默认的引擎Container，需要使用jeus.server.classpath系统属性。对于非默认的container，JEUSMain.xml的设定优先于系统属性。
                        [Value Description]: 用“;”区分的classpath(unix的情况下 “:”)。
                        [Example]: <user-class-path>c:\mylib\classes;c:\mylib\lib\mylib.jar</user-class-path>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="tm-config" type="tm-configType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: Transaction manager(TM)开始和结束全局事务处理。结束事务处理时，TM与RM(资源管理器)进行通信的过程中决定commit还是rollback。这样TM就可以保障全局事务处理的不可分割性(Atomicity)。但是在实际情况中会发生很多意外，所以作为对策，提供各种超时机制。在下级element设定TM的超时等。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>              
            <xs:element minOccurs="0" name="scheduler" type="schedulerType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 包括JEUS Scheduler相关的设定。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="user-logging" type="system-loggingType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 该element设定，怎样处理通过jeus.util.UserLogger class生成的日志。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element maxOccurs="unbounded" minOccurs="0" name="system-logging" type="system-loggingType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 设定要在该Engine Container中使用的logger。该logger上显示Engine Container中发生的error message。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="invocation-manager-action" type="invocation-manager-actionType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: invocation manager跟踪和报告Engine Container内的Stateless method(Servlet/JSP, Stateless EJB? MDB)中使用的资源。
                        [Performance Recommendation]: “NoAction”在性能方面最优秀。其他选项是在application code上存在很多bugs降低可靠性时使用。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="jmx-manager" type="jmx-managerType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: JMX Manager element包括该Engine Container的JMX相关所有设定。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>              
            <xs:element default="false" minOccurs="0" name="use-MEJB" type="xs:boolean">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 设定是否要使用J2EE Management Spec中提供的MEJB。如果不使用，就不对MEJB进行deploy。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element maxOccurs="unbounded" minOccurs="0" name="lifecycle-invocation" type="lifecycle-invocationType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 在Engine Container的各种lifecycle event上可以指定呼叫的method。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element maxOccurs="unbounded" minOccurs="0" name="application-path" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 指定要放入application archive file的目录。 相对路径时为在JEUS_HOME path中的相对路径。Application按照该element的顺序被搜索。
                        default : 设定为jeus.apphome系统属性的路径或webhome/app_home
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="res-ref" type="res-refType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 要登录到该Engine Container JNDI的resource reference。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>          
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="remote-webtob-listType">         
        <xs:sequence>             
            <xs:element maxOccurs="unbounded" minOccurs="0" name="remote-webtob" type="remote-webtobType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 远程WebtoB设定
                        [Hidden]: true
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="remote-webtobType">         
        <xs:sequence>             
            <xs:element name="name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 远程webtob instance的名称
                        [Hidden]: true
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>              
            <xs:element name="config-file-name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 设定在远程webtob上的config文件名
                        [Hidden]: true
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element name="remote-addr" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 执行webtob管理demon的IP地址
                        [Hidden]: true
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element name="control-port" type="xs:int">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[                        [Description]: webtob 管理demon的listen端口                        [Hidden]: true                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="enable-interopType">         
        <xs:sequence>             
            <xs:element default="false" minOccurs="0" name="use-OTS" type="xs:boolean">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 决定是否通过支持OTS的ORB使用interoperability。如果为false时，以不支持OTS的方式动作。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="interop-ssl-config" type="keystore-managerType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[                        [Description]: 进行对keystore/truststore file的设定。                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>       
    <xs:complexType name="lifecycle-invocationType">         
        <xs:sequence>             
            <xs:element name="class-name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 指定lifecycle event的callback method所存在的fully qualified class name。
                        [Example]: com.tmax.event.EngineContainerHandler
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element maxOccurs="unbounded" name="invocation" type="invocationType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 设定该class内的invocation具体信息。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="invocationType">         
        <xs:sequence>             
            <xs:element name="invocation-method" type="methodParamType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                      [Description]: 指定要在该invocation上使用的method。.
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element maxOccurs="unbounded" minOccurs="0" name="invocation-argument" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                      [Description]: 指定呼叫method时使用的argument。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element name="invocation-type" type="invocation-typeType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                      [Description]: 指定该method被呼叫的时点。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:simpleType name="invocation-typeType">         
        <xs:restriction base="xs:token">             
            <xs:enumeration value="BOOT">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: Engine Container已经开始，打开引擎之前的时点。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>             
            <xs:enumeration value="BEFORE_DEPLOY">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: Engine Container已经开始，给该Engine Container指定的应用程序还未被deploy的时点。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>             
            <xs:enumeration value="AFTER_DEPLOY">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: Engine Container已经开始，给该Engine Container指定的应用程序已被deploy之后的时点。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>             
            <xs:enumeration value="BEFORE_UNDEPLOY">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 当Engine Container接到down指令时，对该Engine Container中运营的应用程序进行undeploy之前的时点。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>             
            <xs:enumeration value="AFTER_UNDEPLOY">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: Engine Container已经接到down指令，对该Engine Container中运营的应用程序进行undeploy之后的时点。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>         
        </xs:restriction>     
    </xs:simpleType>      
    <xs:complexType name="engine-commandType">         
        <xs:sequence>             
            <xs:element name="type" type="engine-typeType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: Engine Container上包括的引擎类型
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element name="name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 引擎的名称
                        [Value Description]: 输入适当的名称。该名称被转换成<node_name>_<engine_type><engine_name>的形态使用。 例) “johan_servlet_Engine1”是名为“Engine1”的EJB Engine的名称。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="system-logging" type="system-loggingType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 记录该引擎错误日志的logger相关设定。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:simpleType name="engine-typeType">         
        <xs:restriction base="xs:token">             
            <xs:enumeration value="ejb">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: EJB engine
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>             
            <xs:enumeration value="servlet">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: Servlet/Web engine
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>             
            <xs:enumeration value="jms">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: JMS engine
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>             
            <xs:enumeration value="ws">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: JEUS Web Server engine (JEUS的默认Web server).
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>         
        </xs:restriction>     
    </xs:simpleType>      
    <xs:complexType name="jmx-managerType">         
        <xs:sequence>             
            <xs:element minOccurs="0" name="jmx-connector" type="jmx-connectorType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 设定从其他process访问该Engine Container的JMX时使用的JMX Connector。默认使用JEUSMP Connector。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="html-adaptor-port" type="off-intType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 指定JMX适配器之一的HTML adapter的端口。通过这里指定的值，Web Browser将进行访问。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="snmp-adaptor" type="snmp-adaptorType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 设定JMX适配器之一的SNMP adapter。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element maxOccurs="unbounded" minOccurs="0" name="mlet-url" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 指定要登录到该Engine Container之MbeanServer的MLet URL。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="jmx-connectorType">         
        <xs:sequence>             
            <xs:element minOccurs="0" name="jmxmp-connector" type="jmxmp-connectorType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 作为JMX Connector使用JMXMP Connector。
                    ]]>
                    </xs:documentation>                     
                    <xs:appinfo>                         <metadata>                             <default-element>false</default-element>                         </metadata>                     
                    </xs:appinfo>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="rmi-connector" type="rmi-connectorType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 作为JMX Connector采用RMI Connector。如果像jmxmp-connector一样已经设定时，在JEUS系统内部默认使用jmxmp-connector。并且，在这种情况下应单独设定rmi-connector的ref-export-name。如果该名称与JEUS中默认使用的名称相同或没有设定的话，将发生exception。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="jmxmp-connectorType">         
        <xs:sequence>             
            <xs:element default="0" minOccurs="0" name="jmxmp-connector-port" type="nonNegativeIntType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 指定从其他process访问该Engine Container的JMX时所使用的JEUSMP Connector的listen port。如果该值为0或没有指定时，不另外建立JEUSMP Connector使用的listen port，而是使用jeus的共同端口。如果希望不通过JEUS的JMX RemoteAPI，从其他Runtime访问JMXMP 协议时，应将该值设定为非0的其他值。
						[Defined Value]: [0]:使用jeus的共同端口。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="rmi-connectorType">         
        <xs:sequence>             
            <xs:element minOccurs="0" name="rmi-connector-port" type="nonNegativeIntType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 指定别的 process里access此Engine Container的 JMX的时候使用的  RMI Connector port.
						[Defined Value]: [0]:
										randomly 指定 port.
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="export-name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 代替JEUS的默认export name，使用其他export name时设定。该export name将包括到JMXServiceURL的URL路径。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="ref-export-name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 能获得该connector的jndi name上不指定JEUS的默认jndi name，而是要指定其他name时使用。通过该export name查找时，就能获得JMXConnector对象。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>       
    <xs:complexType name="snmp-adaptorType">         
        <xs:sequence>             
            <xs:element name="snmp-adaptor-port" type="snmp-adaptor-portType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: SNMP 适配器的listener端口。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="3" minOccurs="0" name="snmp-version" type="snmp-versionType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 指定SNMP版本，可以指定1、2或3。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="4096" minOccurs="0" name="snmp-max-packet-size" type="snmp-max-packet-sizeType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
						[Description]: 设定SNMP packet的最大值，最低可以设定256byte。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>              
            <xs:element default="false" minOccurs="0" name="snmp-security" type="xs:boolean">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
						[Description]: 设定是否要运用安全策略。只有在SNMP版本3中才能指定安全策略。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>              
            <xs:element maxOccurs="unbounded" minOccurs="0" name="trap-demon" type="trap-demonType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
						[Description]: 设定当发生故障情况时，发送TRAP message的服务器。可以设定复数个，向设定的所有ip、地址发送message。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>              
            <xs:element minOccurs="0" name="pooling" type="poolingType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 由SNMP Server中处理请求的thread构成。以下element设定管理该thread的pool。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="trap-demonType">         
        <xs:sequence>             
            <xs:element name="ip-address" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: Demon的IP地址
                        [Value Description]: a valid IP address
                        [Example]: <host-name>111.111.111.1</host-name>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element name="port" type="xs:int">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: Demon的端口
                        [Value Description]: a port number
                        [Example]: <port>8888</port>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:simpleType name="snmp-adaptor-portType">         
        <xs:restriction base="xs:int">             
            <xs:minInclusive value="1"/>         
        </xs:restriction>     
    </xs:simpleType>      
    <xs:simpleType name="snmp-versionType">         
        <xs:restriction base="xs:int">             
            <xs:enumeration value="1"/>             
            <xs:enumeration value="2"/>             
            <xs:enumeration value="3"/>         
        </xs:restriction>     
    </xs:simpleType>      
    <xs:simpleType name="snmp-max-packet-sizeType">         
        <xs:restriction base="xs:int">             
            <xs:minInclusive value="256"/>         
        </xs:restriction>     
    </xs:simpleType>      
    <xs:simpleType name="invocation-manager-actionType">         
        <xs:restriction base="xs:token">             
            <xs:enumeration value="NoAction">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 不进行任何操作
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>             
            <xs:enumeration value="Warning">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 使用资源后，在结束method时没有关闭的话，在Container日志上记录相关的内容。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>             
            <xs:enumeration value="AutoClose">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 使用资源后，在结束method时没有关闭的话，自动关闭使用过的资源。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>         
        </xs:restriction>     
    </xs:simpleType>      
    <xs:complexType name="tm-configType">         
        <xs:sequence>             
            <xs:element default="true" minOccurs="0" name="use-nio" type="xs:boolean">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 决定TM之间的通信上是否利用Nonblocking I/O。
                        [Performance Recommendation]: 使用多数的Engine Container以及client时，Nonblocking I/O更有效。如果参与到transaction的JVM process数量少的话，Blocking I/O可能更有效。
                    ]]>
                    </xs:documentation>                     
                    <xs:appinfo>                         <metadata>                             <element-level>ADVANCED</element-level>                         </metadata>                     
                    </xs:appinfo>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="pooling" type="poolingType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: TM pool由处理transaction的thread构成。以下element设定管理该thread的pool。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="600000" minOccurs="0" name="active-timeout" type="nonNegativeLongType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 全局事务处理开始后，应在该时间内执行提交(commit)。否则，transaction manager将进行rollback处理。
                        [Value Description]: milliseconds单位的时间间隔
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="120000" minOccurs="0" name="prepare-timeout" type="xs:long">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 当transaction被提交(commit)时，Root Coordinator应在该时间内收到Sub Coordinator和资源管理器发送的‘prepare’信号。如果收不到的话，Root Coordinator将对全局事务处理进行rollback。
                        [Value Description]: milliseconds单位的时间间隔
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="60000" minOccurs="0" name="prepared-timeout" type="xs:long">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 如果transaction被提交，从Root Coordinator接到prepare message时，Sub Coordinator将准备就绪(prepare)的应答发送给Root Coordinator，等待global decision。在这里设定的时间内，Sub Coordinator应从自己的Root Coordinator收到global decision。如果该时间内没有收到时，再次向Root Coordinator 发送对‘prepare’的应答message。如果该时间内仍然没有收到global decision的话，<heuristic-rollback>的值为true时，将对全局事务处理进行rollback。如果<heuristic-rollback>的值为false时，向Root Coordinator发送message，继续等待global decision。
                        [Value Description]: milliseconds单位的时间间隔
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="240000" minOccurs="0" name="commit-timeout" type="xs:long">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: Root Coordinator向Sub Coordinator和资源管理器发送commit message后，应在该时间内接到‘commit’或‘rollback’相关的结果。如果没有收到结果时，Root Coordinator将全局事务处理记录到‘Uncompleted List’，告知transaction没有完全结束。
                        [Value Description]: milliseconds单位的时间间隔
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="120000" minOccurs="0" name="recovery-timeout" type="xs:long">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 在修复事务处理时使用该值。Transaction manager为了修复transacion，需要调出要修复的transaction信息。如果其他transaction manager在该时间内不提供修复信息的话，<heuristic-rollback>为true时，将对相关transacion进行rollback处理。false时，将transaction修复留给系统管理员，不再进行。
                        [Value Description]: milliseconds单位的时间间隔
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="86400000" minOccurs="0" name="uncompleted-timeout" type="xs:long">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: transaction manager为了完成全部事务处理，保管失败的全局事务处理目录。未完成的全局事务处理信息在修复处理时被使用，所以保管到该超时时间之前。所以，如果该时间过短的话，修复信息很快就被删除，导致transaction manager无法修复相关全局事务处理的完整性。结果，为了修复全局事务处理，系统管理员要亲自处理很多作业。
                        [Value Description]: milliseconds单位的时间间隔
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="10000" minOccurs="0" name="capacity" type="xs:int">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: JEUS transaction manager利用该值，实现内部结构的优化。设定该值时，考虑到transaction manager同时处理的全局事务处理的个数。
                        [Performance Recommendation]: 该值的设定要接近，transaction manager处理的同步transaction的数。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="recovery-log-file" type="file-handlerType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[[Description]:对TM recovery中使用的logging file进行设置。		]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="naming-serverType">         
        <xs:sequence>             
            <xs:element minOccurs="0" name="server" type="jns-serverType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: server element设定，JNSServer为了管理其他JNSServer及其JNSLocal之间的连接而使用的资源。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="local" type="localType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: local element设定，JNSLocal为了获取JNSServer和JNDI tree的内容而使用的资源。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="jns-serverType">         
        <xs:sequence>             
            <xs:element default="true" minOccurs="0" name="use-nio" type="xs:boolean">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 指定JNSServer是否要通过Nonblocking I/O进行通信。
                        [Performance Recommendation]: 使用多数的Engine Container以及client时，Nonblocking I/O更有效。如果使用JNDI的客户端数少的话，Blocking I/O可能更有效。
                    ]]>
                    </xs:documentation>                     
                    <xs:appinfo>                         <metadata>                             <element-level>ADVANCED</element-level>                         </metadata>                     
                    </xs:appinfo>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="false" minOccurs="0" name="export-cos-naming" type="xs:boolean">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: Export-cos-naming element设定，JEUS是否要通过COS Naming Server(tnameserver)工作。如果设为true时，tnameserver将通过%JEUS_BASEPORT%+4 端口开始执行。
                    ]]>
                    </xs:documentation>                     
                    <xs:appinfo>                         <metadata>                             <element-level>ADVANCED</element-level>                         </metadata>                     
                    </xs:appinfo>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="50" minOccurs="0" name="backlog-size" type="nonNegativeIntType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: backlog-size element设定，接收其他Naming Server访问的界限－back log的大小。
                    ]]>
                    </xs:documentation>                     
                    <xs:appinfo>                         <metadata>                             <element-level>ADVANCED</element-level>                         </metadata>                     
                    </xs:appinfo>                 
                </xs:annotation>             
            </xs:element>             
            <xs:group ref="jndi-propertyGroup"/>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:group name="jndi-propertyGroup">         
        <xs:sequence>             
            <xs:element minOccurs="0" name="pooling" type="poolingType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                      [Description]: pooling element为了维持负载均衡，规定JNSServer的thread pool构成。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:group>      
    <xs:complexType name="localType">         
        <xs:sequence>             
            <xs:group ref="jndi-propertyGroup"/>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="resourceType">         
        <xs:sequence>             
            <xs:element minOccurs="0" name="data-source" type="data-sourceType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 定义在应用程序中可以使用的datasource。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="mail-source" type="mail-sourceType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: Mail Source设定，在客户端应用程序发送邮件时要使用的各个SMTP主机。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="url-source" type="url-sourceType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: URL Source是为了让客户端通过标准JNDI lookup方式访问URL resource，将URL地址绑定到Naming Server的JNDI name时使用。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="external-source" type="external-sourceType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 此element使用与 IBM MQ或 连接TMAX 
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="jaxr-source" type="jaxr-sourceType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 定义在JAXR应用程序中可以使用的xml-registry source。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="external-sourceType">         
        <xs:sequence>             
            <xs:element maxOccurs="unbounded" minOccurs="0" name="jms-source" type="jmsSourceType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: JEUS Transation Manager 和IBM MQ或Sonic MQ等messasing source产品之间为了进行互动，要设定以下element。该节设定相关的具体信息，请参照相关的产品手册。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element maxOccurs="1" minOccurs="0" name="tmax-source" type="tmaxSourceType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 为指定和TMAX server 有关的服务而使用                        为out bound 服务的data source 设置及为inbound 服务 摄制的Jtmax 监听器 设置也包括在这里面.
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="jmsSourceType">         
        <xs:sequence>             
            <xs:element name="vendor" type="jmsVendorType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: jms source driver vender名称.
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element name="factory-class-name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: jms source 驱动的factory类名.
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element name="resource-type" type="typeResourceType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: jms source type
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element name="export-name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 登录在JNDI的服务名称。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="queue" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 只在resource-type为Q时使用。具体内容请参照IBM MQ 或Sonic MQ 手册。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="queueManager" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 只在使用除了T type之外的ibmmq时使用。具体内容请参照IBM MQ手册。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="topic" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 只在resource-type为T时使用。具体内容请参照IBM MQ或Sonic MQ 手册。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element maxOccurs="unbounded" minOccurs="0" name="property" type="typePropertyType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 叙述jms source设定所需的属性。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:simpleType name="jmsVendorType">         
        <xs:restriction base="xs:token">             
            <xs:enumeration value="ibmmq">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: ibm mq driver
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>             
            <xs:enumeration value="sonicmq">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: sonic mq driver
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>             
            <xs:enumeration value="others">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 其他jms source driver
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>         
        </xs:restriction>     
    </xs:simpleType>      
    <xs:simpleType name="typeResourceType">         
        <xs:restriction base="xs:token">             
            <xs:enumeration value="QCF">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 请参照IBM MQ 或Sonic MQ手册。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>             
            <xs:enumeration value="TCF">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 请参照IBM MQ 或Sonic MQ手册。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>             
            <xs:enumeration value="Q">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 请参照IBM MQ 或Sonic MQ手册。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>             
            <xs:enumeration value="T">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 请参照IBM MQ 或Sonic MQ手册。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>             
            <xs:enumeration value="XAQCF">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 请参照IBM MQ 或Sonic MQ手册。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>             
            <xs:enumeration value="XATCF">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 请参照IBM MQ 或Sonic MQ手册。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>             
            <xs:enumeration value="LOCALXAQCF">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 请参照IBM MQ 或Sonic MQ手册。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>             
            <xs:enumeration value="LOCALXATCF">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 请参照IBM MQ 或Sonic MQ手册。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>         
        </xs:restriction>     
    </xs:simpleType>      
    <xs:complexType name="tmaxSourceType">         
        <xs:sequence>             
            <xs:element minOccurs="0" name="fdl-file" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 保存为使用TMAX FDL buffer的field  table 位置.
                        [Value Description]: a tmax fdl filename
                        [Example]: &lt;fdl-file>/home/tmax/fdl/tmax.fdl&lt;/fdl-file>f
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="default-charset" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 指定适用于TMAX buffer 内容的 字符集.
 要是不指定使用中的 JDK 默认值会被使用.
                        [Value Description]: a encoding name
                        [Example]: &lt;default-charset>euc-kr&lt;/default-charset>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element maxOccurs="unbounded" minOccurs="0" name="tmax" type="tmaxType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 设置J2EE application 里为使用TMAX的服务的 data source .
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element maxOccurs="unbounded" minOccurs="0" name="tmax-cluster" type="tmaxClusterType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 存在多种TMAX server的时候设置 failover 及 为负载均衡data source 集群                   
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element maxOccurs="unbounded" minOccurs="0" name="jtmax" type="jtmaxType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 设置TMAX 里为呼出 EJB 的Jtmax 监听器 
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element maxOccurs="1" minOccurs="0" name="tmax-monitor" type="tmaxMonitorType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 指定为检测TMAX data source 内存在的连接池 状态的 monitoring 周期和方式.
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="tmaxClusterType">         
        <xs:sequence>             
            <xs:element name="export-name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 集群data source 的 JNDI 名称.
                        这里指定的名称是使用于Mbean名称，在 &lt;tmax-source> tag 内是唯一的.
                        [Value Description]: a JNDI export name
                        [Example]: &lt;export-name>webtCluster&lt;/export-name>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element maxOccurs="unbounded" minOccurs="1" name="tmax-delegation-source" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 指定参与 集群的data source JNDI 名称.
                        [Value Description]: a JNDI export name of TMAX datasource
                        [Example]: &lt;tmax-delegation-source>webtResource1&lt;/tmax-delegation-source>
                                   &lt;tmax-delegation-source>webtResource2&lt;/tmax-delegation-source>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="tmaxType">         
        <xs:sequence>             
            <xs:element name="export-name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 是TMAX data source的 JNDI 名字.
                       这里指定的名字是用于 Mbean 名称，应该在 &lt;tmax-source> tag 里是唯一的.
                        [Value Description]: a JNDI export name
                        [Example]: &lt;export-name>webtResource&lt;/export-name>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="webt-logging" type="webt-file-handlerType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 留在TMAX data source的logging 方式的设置.
                        [Example]: &lt;webt-logging> ... &lt;/webt-logging>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element name="host-name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 指定TMAX server 的IP地址.
                        [Value Description]: a valid IP address
                        [Example]: &lt;host-name>111.111.111.1&lt;/host-name>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element name="port" type="xs:int">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 指定TMAX server的 TCP PORT 值.
                        [Value Description]: a port number
                        [Example]: &lt;port>8888&lt;/port>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="backup-host-name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 使用backup TMAX server的时候指定 backup  TMAX server的 IP 地址.
                        [Value Description]: a valid IP address
                        [Example]: &lt;backup-addresss>111.111.111.2&lt;/backup-address>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="backup-port" type="xs:int">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 使用backup  TMAX server 的时候指定 backup  TMAX server 的 TCP PORT 值.
                        [Value Description]: a port number
                        [Example]: &lt;backup-port>8889&lt;/backup-port>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="fdl-file" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 指定为使用TMAX FDL buffer 的field  table 位置.
                        [Value Description]: a tmax fdl filename
                        [Example]: &lt;fdl-file>/home/tmax/fdl/tmax.fdl&lt;/fdl-file>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="default-charset" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 指定符合TMAX buffer 内容的 字符集. 如果不指定使用中的 JDK 默认值会被使用.
                        &lt;tmax-source>覆盖（overwriting ）tag 下面的内容.
                        [Value Description]: a encoding name
                        [Example]: &lt;default-charset>euc-kr&lt;/default-charset>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="default" minOccurs="0" name="header-type" type="webt-headerType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 设置TMAX data source里使用的基本header type .
                        &lt;tmax-source>覆盖 tag 下面储存的内容.
                        [Value Description]: tmax header type
                        [Example]: &lt;header-type>extendedV4&lt;/header-type>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="true" minOccurs="0" name="support-xa" type="xs:boolean">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 决定是否使用XA 事务处理服务。
                        Connection的main及备份地址必须使用JeusGW地址。
                        使用XA事务处理时，则限制使用RQ或对话型服务。
                        [Value Description]: xa transaction support
                        [Example]:<support-xa>true</support-xa>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="true" minOccurs="0" name="fair-provision" type="xs:boolean">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]:决定connection 里获取connection的政策.
                        true 时按顺序提供所有的connection ，false 的时候在一部分connection里集中使用量.
                        [Value Description]: connection provisioning policy
                        [Example]:&lt;fair-provision>true&lt;/fair-provision>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="false" minOccurs="0" name="check-acquired" type="xs:boolean">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 设置在连接池中是否对连接进行liveness确认。
                        [Value Description]: liveness-check for acquired connection from pool
                        [Example]:<check-acquired>true</check-acquired>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="false" minOccurs="0" name="enable-autoclose" type="xs:boolean">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                     [Description]: 自动给poll返还使用后没有return的connection 仅在servlet/jsp 里有效.
                        [Value Description]: returns not closed connection to pool automatically
                        [Example]:&lt;enable-autoclose>true&lt;/enable-autoclose>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="-1" minOccurs="0" name="service-timeout" type="xs:int">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
               [Description]:对服务的要求在指定的时间内没有应答的时候返还异常. 
                        设置为0 以下的值，是否使用XA来决定默认值.
                        [Value Description]: millisecond
                        [Example]: &lt;service-timeout>60000&lt;/service-timeout>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="-1" minOccurs="0" name="transaction-timeout" type="xs:int">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                      [Description]: 使用transaction 的时候在此时间内没有处理的 transaction会被roll back .
                        设置0 以下的值，按是否使用 XA 来决定默认值.
                        [Value Description]: millisecond
                        [Example]: &lt;transaction-timeout>60000&lt;/transaction-timeout>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="60000" minOccurs="0" name="transaction-block-timeout" type="xs:int">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 对transaction 要求 commit 或roll back 时，在这里指定时间内没有应答，就会返还 异常.
                        [Value Description]: millisecond
                        [Example]: &lt;transaction-block-timeout>60000&lt;/transaction-block-timeout>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="20000" minOccurs="0" name="connect-timeout" type="xs:int">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 在data source 里取connection 的时候使用得time out 值.
                        在这个时间内没能取或做新的connection，会返还 异常.
                        [Value Description]: millisecond
                        [Example]: &lt;connect-timeout>20000&lt;/connect-timeout>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="security" type="tmax-securityType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                       [Description]: 使用SSL 或要求在TMAX server上的保安认证时指定.
                        [Example]: &lt;securityType> ... &lt;/securityType>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="tmax-connection-pool" type="tmax-connection-poolType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 设置对TMAX server的联结词（connection pool.）
                        [Example]: &lt;tmax-connection-pool> ... &lt;/tmax-connection-pool>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element maxOccurs="unbounded" minOccurs="0" name="tmax-property" type="tmax-propertyType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 指定多个特殊属性时使用. 
　Event 服务设置也在这里实现.
                        [Example]: &lt;tmax-property> ... &lt;/tmax-property>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="jtmaxType">         
        <xs:sequence>             
            <xs:element name="context-name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 指定Jtmax 监听器的context 名称.
                        这里指定的名称是使用于Mbean名称在 &lt;tmax-source> tag 内是唯一的.
                        [Example]: &lt;context-name>JTMAX1&lt;/context-name>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element name="listen-port" type="xs:int">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 指定该Jtmax 监听器的service port.
                        [Example]: &lt;listen-port>9800&lt;/listen-port>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="webt-logging" type="webt-file-handlerType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: Jtmax 监听器里保留的对 logging 方式的设置.
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="pooling" type="oldPoolingType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: Jtmax 内部里使用的线程池的设置.
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element maxOccurs="unbounded" minOccurs="0" name="ejb-service" type="jtmax-ejb-serviceType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 把TMAX 传递的服务名和 EJB 方法相互匹配的设置。
                    
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element maxOccurs="unbounded" minOccurs="0" name="beans-service" type="jtmax-beans-serviceType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 把TMAX 传递的服务名和 Java Beans 相互匹配。
                    
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="tmaxMonitorType">         
        <xs:sequence>             
            <xs:element default="60000" minOccurs="0" name="monitor-interval" type="xs:long">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 是检查TMAX data source 状态的周期.
                        [Value Description]: millisecond
                        [Example]: &lt;monitor-interval>600000&lt;/monitor-interval>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="false" minOccurs="0" name="check-alive" type="xs:boolean">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 在指定的周期通过 liveness check检查 connection的状态.
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="false" minOccurs="0" name="enable-failback" type="xs:boolean">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 对指定backup address的 data source ，main server 问题解决的时候再能用main server 服务.
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="jtmax-ejb-serviceType">         
        <xs:sequence>             
            <xs:element name="name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 相关服务的名字，在 Jtmax context内必须是唯一的。
                        [Example]: <name>TOUPPER</name>
                    
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element name="export-name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                    [Description]: 调用 EJB 的 JNDI binding名。
                    [Example]: <export-name>StringServices</export-name>
                
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element name="method-name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                    [Description]: 成为呼叫对象的方法名。
                    [Example]: <method-name>toupper</method-name>
                
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element name="method-signiture" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                    [Description]: 指定调用对象的方法参数值类型。
                    [Example]: <method-signiture>String,String</method-signiture>
                
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="jtmax-beans-serviceType">         
        <xs:sequence>             
            <xs:element name="name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 相关服务名。 在Jtmax context内是唯一的
                        [Example]: <name>TOUPPER</name>
                    
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element name="class-name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                    [Description]: 要使用的 Beans的 FQCN 。
                    此类实现tmax.jtmax.JtmaxService ，要提供默认生成者。
                    [Example]: <class-name>com.tmax.service.EJBInvoker</class-name>
                
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="false" minOccurs="0" name="create-per-invoke" type="xs:boolean">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                    [Description]: 设置调用服务时是否每次都新生成对象。
                    [Example]: <create-per-invoke>true</create-per-invoke>
                
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element maxOccurs="unbounded" minOccurs="0" name="property" type="typePropertyType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 设置要使用的Beans的属性
                    
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:simpleType name="webt-headerType">         
        <xs:restriction base="xs:string">             
            <xs:enumeration value="default">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 使用普通的tmax header的情况.
                        不管什么版本都可以使用TMAX 一般服务。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>             
            <xs:enumeration value="extendedV2">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 为tmax 3.11.x 版本的特别功能使用。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>             
            <xs:enumeration value="extendedV3">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 为tmax 3.14.5 版本的特别功能使用
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>             
            <xs:enumeration value="extendedV4">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 为tmax 4.x 版本的特别功能使用
                        使用SYS-MASTER(TM) 时设置。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>         
        </xs:restriction>     
    </xs:simpleType>      
    <xs:complexType name="tmax-connection-poolType">         
        <xs:sequence>             
            <xs:element minOccurs="0" name="pooling" type="oldPoolingType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 设定pool.
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="tmax-securityType">         
        <xs:sequence>             
            <xs:element default="false" minOccurs="0" name="encryption" type="xs:boolean">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 决定是否和TMAX server通信里使用SSL.
                        [Example]:&lt;encryption>true&lt;/encryption>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="user-name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 连接到Tmax server时，为了认证登录在Tmax server上的用户，设定用户名。
                        [Value Description]: a user name
                        [Example]:<user-name>admin</user-name>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="user-password" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 连接到Tmax server时，为了认证登录在Tmax server上的用户，设定用户密码。
                        [Value Description]: a password string
                        [Example]:<user-password>tmax</user-password>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="domain-name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 连接到Tmax server时，为了认证登录在Tmax server上的domain，设定domain name。
                        [Value Description]: a domain name
                        [Example]:<domain-name>tmaxadm</domain-name>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="domain-password" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 连接到Tmax server时，为了认证登录在Tmax server上的domain，设定domain password。
                        [Value Description]: a domain password
                        [Example]:<domain-password>tmaxadm</domain-password>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="tmax-propertyType">         
        <xs:sequence>             
            <xs:element name="name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 要在WebT Service上添加用户属性时的Key值。
                        [Example]: <name>eventHandler</name>
                    ]]>                     
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element name="value" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                      [Description]: 要在WebT Service上添加用户属性时的Value值。
                        [Example]: <value>GenericServlet</value>
                    ]]>                     
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="webt-file-handlerType">         
        <xs:sequence>             
            <xs:element minOccurs="0" name="file-name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 定义要生成的WebT日志文件路径和名称。操作系统为Windows时，文件区分者不是'\'，而是'\\'。
                        [Example]: <file-name>/home/jeus/log/webt.log</file-name>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="info" minOccurs="0" name="level" type="webt-levelType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: WebT log level。以下none|info|debug 值当中定义一个。
                        [Value Description]: none/info/debug
                        [Defined Value]:
                        [none]: 不留下日志message。
                        [info]: 可以额外查看日志message之外的其他Non-critical messages。
                     [debug]: 可以查看调试(debugging)所需的所有日志message信息。
                        [Example]: <level>debug</level>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="-1" minOccurs="0" name="valid-day" type="off-intType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                       [Description]:记录在指定log file的内容里设置日期的有限值.
                       
                       如果设定为 1以上的值，以每日单位代替log file记录该时间的 log message.
                        [Value Description]: a number of days
                        [Defined Value]:
                        [-1]: 如果设定为 ?C1，在指定的一个log file里 保留所有的WebT log message
                        [Example]: &lt;valid-day>2&lt;/valid-day>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="0" minOccurs="0" name="buffer-size" type="nonNegativeIntType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 在Log file里留下 WebT log message的时候 以 buffer size大小在内存里临时储存，然后再一起记录
            [Value Description]: bytes
                        [Defined Value]:
                        [0]:
                        指定为0的话 不做对 log message的 buffering
                        [Example]: &lt;buffer-size>1024&lt;/buffer-size>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="mail-sourceType">         
        <xs:sequence>             
            <xs:element maxOccurs="unbounded" minOccurs="0" name="mail-entry" type="mail-entryType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 各mail entry指，通过JNDI naming lookup利用的e-mail host。该功能相关的更多信息，请参照JavaMail 1.2 spec。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="mail-entryType">         
        <xs:sequence>             
            <xs:element name="export-name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 客户端间接使用登录在服务上的名称。这是从客户端Descriptor绑定到export name的。该名称绑定到java.mail.Session对象。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element maxOccurs="unbounded" minOccurs="0" name="mail-property" type="mail-propertyType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 这用于指定或访问mail host。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="mail-propertyType">         
        <xs:sequence>             
            <xs:element name="name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                  [Description]: 邮件属性的名称。属性名称应遵照JavaMail 1.2 spec。
                        [Defined Value]:    [mail.user]:
                                                服务器识别的用户名
                                            [mail.host]:
                                                邮件服务器的IP地址.
                                            [mail.from]:
                                                发件人的e-mail.
                                            [mail.transport.protocol]:
                                                要使用的邮件协议.
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element name="value" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 邮件属性值
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>       
    <xs:complexType name="url-sourceType">         
        <xs:sequence>             
            <xs:element maxOccurs="unbounded" minOccurs="0" name="url-entry" type="url-entryType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 各个entry映射实际URL地址和JNDI name。这表示URL绑定到Naming Server。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="url-entryType">         
        <xs:sequence>             
            <xs:element name="export-name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: JNDI name在Naming Server上绑定URL时使用。
                        [Example]: <export-name>MYURL</export-name>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element name="url" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: URL映射到被bind的JNDI Server的JNDI name。
                        [Example]: <url>http://www.foo.com</url>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>       
    <xs:complexType name="data-sourceType">         
        <xs:sequence>             
            <xs:element maxOccurs="unbounded" minOccurs="0" name="database" type="databaseType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]:为了构成DataSource，在JDBC驱动上包括必需的特性。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element maxOccurs="unbounded" minOccurs="0" name="cluster-ds" type="cluster-dsType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 为了在应用服务器层面上提供数据库的FailOver功能，使用Datasource集群。Datasource集群根本上是具有一个JNDI export name的Datasource instance。该instance接收数据库的呼叫，传达给多个DB(实际Datasource)当中的一个。如果主要DB被瘫痪时，将选择集群中的其他数据库，处理应用程序的请求事项。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="cluster-dsType">         
        <xs:sequence>             
            <xs:element name="export-name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: Datasource集群的export name
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="false" minOccurs="0" name="is-pre-conn" type="xs:boolean">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 如果使用该功能时，Datasource集群将在集群上的所有数据库上打开连接。这对性能是有利的，但是从资源节约方面来讲是负面的。如果设定为true时，共生成的连接数量将与<connection-pool> <pooling> <min>值相同。
                        [Performance Recommendation]: 要提高性能时，设定“true”，要节省资源时，设定“false”。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element maxOccurs="unbounded" minOccurs="1" name="data-source" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 记录要参与到该集群的DB export name。列表中的第一个DB作为主要DB来动作。
                        [Example]: <data-source>datasource1</data-source>
                                   <data-source>datasource2</data-source>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="databaseType">         
        <xs:sequence>             
            <xs:element name="vendor" type="vendorType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: JDBC driver vender的名称。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element name="export-name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: DataSource的JNDI名称。该值将在Naming Server上登录datasource时使用。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element name="data-source-class-name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: JDBC驱动的datasource类名。
                        [Example]: <data-source-class-name>oracle.jdbc.pool.OracleConnectionPoolDataSource</data-source-class-name>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element name="data-source-type" type="data-source-typeType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: DataSource的类型.
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="database-name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 数据库的名称。Oracle是数据库的SID.
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="data-source-name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: DataSource的名称。依赖于driver vender，通常与DataSourceClassName值相同。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="service-name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 但是只针对i-net JDBC driver的设定，指定Oracle DB的SID。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="description" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 对DataSource进行说明的element。
                        [Example]: <description>在DataSource上使用Oracle XA。</description>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="network-protocol" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 表示用于数据库之间连接的协议。
                        [Value Description]: Sybase时为“Tds”，依赖于JDBC vendor。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="port-number" type="nonNegativeLongType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: Database listener的端口编号。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="server-name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 执行数据库的服务器名称。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="user" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: DB用户ID，为了处理transaction等，需要具有足够的系统特权。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="password" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: DB用户的密码。根据<cipher-algorithm>设定，可以设定通过Base64编码的值。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="driver-type" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                   [Description]: JDBC driver type，只适用于Oracle driver的设定。
                        [Example]: <driver-type>thin</driver-type>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="true" minOccurs="0" name="auto-commit" type="xs:boolean">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]:指定ConnectionPoolDataSource, DataSource type的 auto commit 设置。
                        [Example]: <auto-commit>true</auto-commit>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element maxOccurs="unbounded" minOccurs="0" name="property" type="typePropertyType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 指定要在DataSource上设定的属性。该设定可以代替以上的其他设定。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="connection-pool" type="database-connection-poolType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 包含Connection Pool所需的信息。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:simpleType name="transportType">         
        <xs:restriction base="xs:token">             
            <xs:enumeration value="BIND">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 请参照IBM MQ 手册。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>             
            <xs:enumeration value="CLIENT">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 请参照IBM MQ 手册。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>         
        </xs:restriction>     
    </xs:simpleType>      
    <xs:simpleType name="data-source-typeType">         
        <xs:restriction base="xs:token">             
            <xs:enumeration value="DataSource">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 返还Connection的基本DataSource。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>             
            <xs:enumeration value="ConnectionPoolDataSource">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 从Connection Pool返还Connection。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>             
            <xs:enumeration value="LocalXADataSource">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 从XA连接Pool返还，起到Local Transaction作用的connection。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>             
            <xs:enumeration value="XADataSource">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 从XA连接Pool返还，起到分布/全局Transaction作用的Connection。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>         
        </xs:restriction>     
    </xs:simpleType>      
    <xs:complexType name="typePropertyType">         
        <xs:sequence>             
            <xs:element name="name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 属性名
                    
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element name="type" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 属性值的类型。
                        [Value Description]: primitive种类或者 java.lang.String, Primitive Wrapper Class等。
			或是 java.util.Properties 种类的话 value的值赋予 property。
                        [Example]: <type>java.lang.Integer</type>
                    
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element name="value" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 属性值。类型为java.util.Properties时，value为key=value[,key=value]*形式。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="database-connection-poolType">         
        <xs:sequence>             
            <xs:element minOccurs="0" name="pooling" type="oldPoolingType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 包含对DB Connection Pooling相关的信息。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="wait-free-connection" type="wait-free-connectionType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: Pool内的所有连接都被占有时，定义处理连接请求的method。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="delegation-datasource" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 将当前XA DataSource的global/local transaction转给NonXA-DataSource时使用该设定。此时，使用这里指定的datasource的连接。
                        [Value Description]: 要代理的datasource的export name.
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="0" minOccurs="0" name="max-use-count" type="nonNegativeIntType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                 [Description]: 一个连接被使用到该element上指定的次数后，被替换。
                        [Defined Value]: [0]: 表示无限大。即，继续使用一次获得的Connection。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="delegation-dba" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 指定具有“DBA”权限的特别的<database>。该连接作为DBMS管理员的连接，通过拥有特权的用户ID和密码生成。 DB connection上发生问题时，JEUS使用该连接。例如，JEUS想要结束DB connection，但是发生Exception而失败。此时，JEUS发送低级别的“kill”信号，试图强行结束。此时，为了能看到该“kill”信号，需要DBA连接。该element内放入设定DBA连接的DataSource的export-name。那么使用该DataSource，发送“kill”信号。该element只适用于Oracle和Sybase。
                        [Value Description]: DBA数据库连接构成的JNDI export name
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="-1" minOccurs="0" name="dba-timeout" type="off-intType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: DBA模式在Oracle, Sysbase的DB中使用。DBA模式表示“kill”信号的发送权限，DB上发生问题(Deadlock等)时，供应用服务器使用。该element在发送“kill”信号之前，指定从getConnection()返还到Connection Pool所需的时间。超过该时间后，“kill”信号强行中断其连接。该选项只在Oracle和Sybase中使用。
                        [Value Description]: 毫秒单位
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="check-query" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 某些DB在getConnection()中请求新的DB Connection时，即使存在问题也不会报告。针对这样的DB，JEUS发送“check query”，了解Connection的状态。check query是简单的SQL，应该获得正确的结果才对。JEUS中需要知道连接状态时，该query传送到DB。像Oracle, Sybase, MS SQL Server一样，可以通过setAutoCommit()报告错误的话，不应该使用该功能。
                        [Value Description]: 要传送到DB的简单的SQL句。
                        [Example]: <check-query>SELECT check FROM checktable;</check-query>
                        [Performance Recommendation]: Oracle, Sybase, MS SQL中可能发生性能降低，所以不使用。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="0" minOccurs="0" name="check-query-period" type="nonNegativeLongType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 某个DB的configuration，防火墙设定在JEUS和DB之间，所以每经过一段时间都会切断connection。所以需要每隔一段时间检查connection，重新生成连接。目前，对idle connection都适用，所以可能会发生性能上的overhead。                        
                        [Value Description]: check-query的时间(单位 msec)                        
                        [Example]: <check-query-period>200000</check-query-period>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="check-query-class" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 用户或开发人员不想使用JEUS提供的check-query功能，而是希望使用用户化的check-query功能时，输入其class的full path。此时check query class必须是jeus.jdbc.JEUSConnectionChecker interface。
                        [Value Description]: 拥有Check query功能的class full path
                        [Example]: <check-query-class>foo.bar.ABCheckConnection<check-query-class>
                        [Performance Recommendation]: Oracle, Sybase, MS SQL中造成性能下降，因此不使用。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="-1" minOccurs="0" name="stmt-caching-size" type="off-intType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 每当在应用程序中呼叫prepareStatement()时，对SQL句进行预处理，PreparedStatement传送到DB。为了避免每次呼叫都继续再生成PreparedStatement，JEUS对PreparedStatement可以进行内部隐藏（cache）。该element指定PreparedStatement的cache数量。只有最常用的PreparedStatement维持在cache内。
                        [Performance Recommendation]: 为了性能，必须使用该element。如果在应用程序中使用Connection.prepareStatement()时，必须设定大于10的值。那样就可以提高性能。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="-1" minOccurs="0" name="stmt-fetch-size" type="off-intType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 设定Connection中所制作statement的fetch size。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="wait-free-connectionType">         
        <xs:sequence>             
            <xs:element default="false" minOccurs="0" name="enable-wait" type="xs:boolean">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 该tag在pool内没有可使用的连接，或pool内的连接已经达到最大值时，决定请求和处理连接的方法。如果true时，系统为了获得可使用的连接而等待。如果false时，系统在进入用户请求时建立新的连接，使用完之后不返还给pool。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="10000" minOccurs="0" name="wait-time" type="nonNegativeLongType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 该tag只在<enable-wait>为true时有效。这表示用户为了连接而等待的时间。如果用户等待这个时间后，仍然没有任何连接可使用时，系统向用户抛掷exception。
                        [Value Description]: 毫秒单位。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="auto-deployType">         
        <xs:sequence>             
            <xs:element default="false" minOccurs="0" name="check-absolute-path" type="xs:boolean">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: JEUSMain.xml里指定 application的 absolute-path，　这个设置可以对
						path 上添加或删除的application自动执行deploy, undeploy。
                    
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>              
            <xs:element default="10000" minOccurs="0" name="auto-deploy-check-interval" type="nonNegativeLongType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 可以设定检查application是否变更的周期。
                        [Performance Recommendation]: 过分频繁检查时，可能降低性能，所以设定必要的间隔。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="applicationType">         
        <xs:sequence>       
            <xs:element minOccurs="0" name="absolute-path" type="xs:token">              
                <xs:annotation>                  
                    <xs:documentation><![CDATA[
                    	[Description]: 可以指定下级 application存在的绝对路径。不指定的话在各 container的application home directory 里查找。
	                
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>     
            <xs:sequence maxOccurs="unbounded" minOccurs="0">           
                <xs:element minOccurs="0" name="name" type="xs:token">                  
                    <xs:annotation>                      
                        <xs:documentation><![CDATA[
                        [Description]: 设定该application的名称。模块名不想设定为archive file或目录名，而设定特定的名称时设定。Deploy或undeploy时，可以代替archive file或目录名使用。
                    ]]>
                        </xs:documentation>                  
                    </xs:annotation>              
                </xs:element>              <!-- only can be omitted when the absolute-path of applications is specified -->              
                <xs:element minOccurs="0" name="path" type="xs:token">                  
                    <xs:annotation>                      
                        <xs:documentation><![CDATA[
                        [Description]: 设定该application的路径。EAR、COMPONENT都是archive file时使用文件路径，目录时使用目录路径。非绝对路径，而是文件名或目录名时，认为存在于APP_HOME。
                    ]]>
                        </xs:documentation>                  
                    </xs:annotation>              
                </xs:element>                  
                <xs:element minOccurs="0" name="deployment-type" type="deployment-typeType">                     
                    <xs:annotation>                         
                        <xs:documentation><![CDATA[
                        [Description]: 指定该application被deploy的type。
                    ]]>
                        </xs:documentation>                     
                    </xs:annotation>                 
                </xs:element>                  
                <xs:element maxOccurs="unbounded" minOccurs="0" name="client-component" type="client-componentType">                     
                    <xs:annotation>                         
                        <xs:documentation><![CDATA[
                        [Description]: 想对该application内的client-component进行特别的设定时使用。
                    ]]>
                        </xs:documentation>                     
                    </xs:annotation>                 
                </xs:element>                 
                <xs:element maxOccurs="unbounded" minOccurs="0" name="connector-component" type="connector-componentType">                     
                    <xs:annotation>                         
                        <xs:documentation><![CDATA[
                        [Description]: 想对该application内的connector-component进行特别的设定时使用。
                    ]]>
                        </xs:documentation>                     
                    </xs:annotation>                 
                </xs:element>                 
                <xs:element maxOccurs="unbounded" minOccurs="0" name="ejb-component" type="ejb-componentType">                     
                    <xs:annotation>                         
                        <xs:documentation><![CDATA[
                        [Description]: 想对该application内的ejb-component进行特别的设定时使用。
                    ]]>
                        </xs:documentation>                     
                    </xs:annotation>                 
                </xs:element>                 
                <xs:element maxOccurs="unbounded" minOccurs="0" name="web-component" type="web-componentType">                     
                    <xs:annotation>                         
                        <xs:documentation><![CDATA[
                        [Description]: 想对该application内的web-component进行特别的设定时使用。
                    ]]>
                        </xs:documentation>                     
                    </xs:annotation>                 
                </xs:element>             
            </xs:sequence>              
            <xs:element minOccurs="0" name="absolute-ejb-jar" type="xs:token">              
                <xs:annotation>                  
                    <xs:documentation><![CDATA[
                    	[Description]: 指定查找下级 standalone EJB module的 ejb-jar.xml的绝对路径。
                        这是为了与4.x EJB module的互换性。详细的请参照 JEUS Server 手册。
                    
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="absolute-jeus-ejb-dd" type="xs:token">              
                <xs:annotation>                  
                    <xs:documentation><![CDATA[
                    	[Description]: 指定查找下级 standalone EJB module的 jeus-ejb-dd.xml的绝对路径。
                        这是为了与 4.x EJB module的互换性。详细的内容参照JEUS Manager手册。
                    
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>               
            <xs:group ref="application-propertyGroup"/>              
            <xs:element minOccurs="0" name="auto-deploy" type="auto-deployType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 在该application上适用auto-deploy功能。
                    ]]>
                    </xs:documentation>                     
                    <xs:appinfo>                         <metadata>                             <default-element>false</default-element>                         </metadata>                     
                    </xs:appinfo>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="true" minOccurs="0" name="deploy-when-booting" type="xs:boolean">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 表示Jeus booting时的deploy与否。没有设定时为true。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>          
        </xs:sequence>     
    </xs:complexType>      
    <xs:group name="application-propertyGroup">         
        <xs:sequence>             
            <xs:element minOccurs="0" name="deployment-target" type="deployment-targetType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 指定该application要deploy的target。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="classloading" type="classloadingType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 选择该application将使用的classloading方式。没有指定时，采用jeus.classloading系统属性上设定的值。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="JAR" minOccurs="0" name="class-ftp-unit" type="class-ftp-unitType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 设定将包括在该application的EJB module的class发送到remote时，传送JAR file本身，还是传送一个个class。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="security-domain-name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 设定要适用到该application的security domain。如果没有指定时，使用DEFAULT_APPLICATION_DOMAIN。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element maxOccurs="unbounded" minOccurs="0" name="role-permission" type="rolePermissionType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 设定将适用到该application所有模块上的principal - role mapping时使用。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="java-security-permission" type="securityPermissionType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: JEUS使用J2SE security时，可以指定向该application允许的J2SE permission。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="keep-generated" type="xs:boolean">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 该applicaton内的module上适用keep-generated。即。假定该appliation事先包括，该deploy过程中需要generated的class。如果没有设定时，使用jeus.application.keepgenerated系统属性上指定的值。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="fast-deploy" type="xs:boolean">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 针对该application内的EJB module、Web application的webservice module，适用fast deploy。即，假定该application事先包括，在deploy过程中需要generated的class。如果没有进行设定时，遵照engine的默认设定。该设定设置jeus.application.fastdeploy的系统属性。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:group>      
    <xs:simpleType name="classloadingType">         
        <xs:restriction base="xs:token">             
            <xs:enumeration value="ISOLATED">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 该application的classloader与其他application的classloader分离，无法使用相互的class。按照J2EE spec进行application packaging时可以使用。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>             
            <xs:enumeration value="SHARED">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 该application的classloader与其他application的classloader共用，所以能依次共享相互的class。JEUS 4.x以前的环境中开发的application时，应该使用该设定。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>         
        </xs:restriction>     
    </xs:simpleType>      
    <xs:simpleType name="class-ftp-unitType">         
        <xs:restriction base="xs:token">             
            <xs:enumeration value="JAR">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 将该application内的class发送到remote时，以JAR文件为单位发送。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>             
            <xs:enumeration value="CLASS">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 将该application内的class发送到remote时，以class 文件为单位发送。在JEUS 4.x通过DIR mode开发EJB时使用的设定。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>         
        </xs:restriction>     
    </xs:simpleType>      
    <xs:complexType name="deployment-targetType">         
        <xs:choice maxOccurs="unbounded" minOccurs="1">             
            <xs:element name="all-targets" type="all-targetsType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                      [Description]: 读取该设定的所有engine container相当于target。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element name="target" type="app-targetType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                      [Description]: 设定deploy该application的target。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:choice>     
    </xs:complexType>      
    <xs:complexType name="all-targetsType">         
        <xs:sequence>             
            <xs:element minOccurs="0" name="web-context-group" type="web-context-groupType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[                    [Description]: 指定该application被deploy的目标web context group。                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="web-context-groupType">         
        <xs:sequence>             
            <xs:element name="name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[                      [Description]: 指定该application内的web module被deploy时使用的context group名称。                      [Value Description]: 该application被deploy的目标Servlet Engine，应具有该context group。                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element maxOccurs="unbounded" minOccurs="0" name="virtual-host-name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                      [Description]: 指定该application内的web module被deploy时使用的virtual host名称。
                      [Value Description]: 应该具有该context group内指定的virtual host。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="app-targetType">         
        <xs:sequence>             
            <xs:choice>                 
                <xs:element name="node-name" type="xs:token">                     
                    <xs:annotation>                         
                        <xs:documentation><![CDATA[
                        [Description]: 将deploy该application的target，指定为这里所指定名称node内的engine container。
                        [Example]: <node-name>MyNode</node-name>
                        ]]>
                        </xs:documentation>                     
                    </xs:annotation>                 
                </xs:element>                 
                <xs:element name="engine-container-name" type="xs:token">                     
                    <xs:annotation>                         
                        <xs:documentation><![CDATA[
                        [Description]: 将deploy该application的target，指定为这里所指定名称的engine container。
                        [Example]: <engine-container-name>MyNode_container1</engine-container-name>
                        ]]>
                        </xs:documentation>                     
                    </xs:annotation>                 
                </xs:element>             
            </xs:choice>             
            <xs:element minOccurs="0" name="web-context-group" type="web-context-groupType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[                    [Description]: 指定该application被deploy的目标web context group。                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:simpleType name="deployment-typeType">         
        <xs:restriction base="xs:token">             
            <xs:enumeration value="EAR">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: EAR形态的archive file type。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>             
            <xs:enumeration value="COMPONENT">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: standalone application (.jar, .war, .rar) 形态的archive file type。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>         
        </xs:restriction>     
    </xs:simpleType>      
    <xs:complexType name="client-componentType">         
        <xs:sequence>             
            <xs:element minOccurs="0" name="uri" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 该client component设定上相应的uri名。.
                        [Value Description]: EAR或COMPONENT type时，以.jar结束，EXPLODED形态时，附加该目录名。
                        [Example]: <uri>client.jar</uri>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="deployment-target" type="deployment-targetType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                     [Description]: 可以设定要deploy该client component的target。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="connector-componentType">         
        <xs:sequence>             
            <xs:element minOccurs="0" name="uri" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 该connector component设定相应的uri名称。
                        [Value Description]: EAR或COMPONENT type时，以.rar结束，EXPLODED形态时，附加该目录名。
                        [Example]: <uri>connector.rar</uri>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="ejb-componentType">         
        <xs:sequence>             
            <xs:element minOccurs="0" name="uri" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 该ejb component设定相应的uri名称。
                        [Value Description]: EAR或COMPONENT type时，以.jar结束，EXPLODED形态时，附加该目录名称。
                        [Example]: <uri>ejb.jar</uri>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="deployment-target" type="deployment-targetType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 指定要deploy该ejb component的target。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="client-view-path" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                       [Description]: 设定该ejb component的stub class存在的目录。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="keep-generated" type="xs:boolean">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 指定生成该ejb component的stub class时是否要保留java source file。如果没有该设定时，使用<application>的设定。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="ejb-jar" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 可以设定该ejb component的ejb-jar.xml文件路径。这用于支持JEUS 4.x的packaging。
                        [Example]: d:\jeus\config\node_ejb_engine1\ejb-jar_modulename.xml
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="jeus-ejb-dd" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 可以设定该ejb component的jeus-ejb-dd.xml 文件路径。这用于支持JEUS 4.x的packaging。
                        [Example]: d:\jeus\config\node_ejb_engine1\jeus-ejb-dd_modulename.xml
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="java-security-permission" type="securityPermissionType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 可以设定赋予到该ejb component的J2SE security permission。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="web-componentType">         
        <xs:sequence>             
            <xs:element minOccurs="0" name="uri" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 该web component设定上相应的uri名称。
                        [Value Description]: EAR或COMPONENT type时，以.war结束，EXPLODED形态时，附加该directory名称。
                        [Example]: <uri>web.war</uri>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="deployment-target" type="deployment-targetType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 指定要deploy该web component的target。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="keep-generated" type="xs:boolean">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 当该web component为web服务或包括web服务客户端时，指定是否要保留所生成web服务的Tie以及web服务客户端Stub的java source file。如果没有该设定时，使用<application>的设定。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="jeus-web-dd" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 可以设定该web component的jeus-web-dd.xml file路径。这用于支持JEUS 4.x的packaging。
                        [Example]: d:\jeus\config\node_servlet_engine1\jeus-web-dd_modulename.xml
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="java-security-permission" type="securityPermissionType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 可以设定赋予到该web component的J2SE security permission。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="session-router-configType">         
        <xs:annotation>             
            <xs:documentation><![CDATA[
                    [Description]: ??? session clustering? ???? server? ?? ????.
                    Servlet/JSP?? ???? HttpSession ?????? ?????. ??? session clustering?
                    ???? ?? WebContainer? session clustering? ?? session server? ???? ?? server
                    ?? session clustering? ???? ?? WebContainer? session server? ??? ??
                    ?? ????? ??? ??? ? ??? ??.
            ]]>
            </xs:documentation>         
        </xs:annotation>         
        <xs:sequence>             
            <xs:element minOccurs="0" name="thread-pool" type="poolingType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                                [Description]: 设定分布式session server上使用的socket connection处理所需的thread pool。
                    ]]>
                    </xs:documentation>                     
                    <xs:appinfo>                         <metadata>                             <default-element>false</default-element>                         </metadata>                     
                    </xs:appinfo>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="true" minOccurs="0" name="use-nio" type="xs:boolean">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 指定在分布式session server之间的通信上，是否要使用Nonblocking I/O。
                    ]]>
                    </xs:documentation>                     
                    <xs:appinfo>                         <metadata>                             <element-level>ADVANCED</element-level>                         </metadata>                     
                    </xs:appinfo>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="5000" minOccurs="0" name="connect-timeout" type="nonNegativeLongType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                            [Description]: WebContainer上存在的session server之间生成socket connection时适用的timeout值。
                    ]]>
                    </xs:documentation>                     
                    <xs:appinfo>                         <metadata>                             <element-level>ADVANCED</element-level>                         </metadata>                     
                    </xs:appinfo>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="20000" minOccurs="0" name="read-timeout" type="nonNegativeLongType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                            [Description]: WebContainer上存在的session server之间通信时适用的read timeout值。发送数据后，等待应答的时间最长不超过该值。
                    ]]>
                    </xs:documentation>                     
                    <xs:appinfo>                         <metadata>                             <element-level>ADVANCED</element-level>                         </metadata>                     
                    </xs:appinfo>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="1000" minOccurs="0" name="backup-trigger" type="nonNegativeLongType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                            [Description]: 决定local session server上session对象的更新发生到什么程度时，将更新的session对象备份到backup session server。local session server上session对象的更新次数达到该设定上指定的次数时，进行备份。
                    ]]>
                    </xs:documentation>                     
                    <xs:appinfo>                         <metadata>                             <element-level>ADVANCED</element-level>                         </metadata>                     
                    </xs:appinfo>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="30000" minOccurs="0" name="check-to" type="nonNegativeLongType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                            [Description]: 决定以多少时间间隔执行备份过程。按照该设定上指定的时间周期，调查有无更新的session对象，如果存在更新的session对象时，进行备份。
                    ]]>
                    </xs:documentation>                     
                    <xs:appinfo>                         <metadata>                             <element-level>ADVANCED</element-level>                         </metadata>                     
                    </xs:appinfo>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="set" minOccurs="0" name="check-level" type="check-levelType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                            [Description]: 检查是否存在要备份到backup session server的已更新session对象时，所适用的检查标准。
                    ]]>
                    </xs:documentation>                     
                    <xs:appinfo>                         <metadata>                             <element-level>ADVANCED</element-level>                         </metadata>                     
                    </xs:appinfo>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="default-file-db" type="fileDbType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                            [Description]: 对更新的local session对象进行备份的方法，除了备份到backup session server的方法之外，还有备份到local file system的方法。 该设定提供，在local file system上备份已更新session对象的方法。实际上文件备份是分WebContainer来执行。该设定同样适用于参与到分布式session clustering的所有WebContainer(session-router)。但是，"file-db"设定到session-router的下级element时，忽视该设定(default-file-db)，适用"file-db"设定。
                    ]]>
                    </xs:documentation>                     
                    <xs:appinfo>                         <metadata>                             <default-element>false</default-element>                         </metadata>                     
                    </xs:appinfo>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element maxOccurs="unbounded" minOccurs="1" name="session-router" type="session-routerType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                            [Description]: 指定要参与到分布式session clustering的WebContainer时使用的设定。除此之外，还设定参与到session clustering的WebContaienr上将启动的session server相关的各种属性。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>     
    <xs:simpleType name="check-levelType">         
        <xs:annotation>             
            <xs:documentation><![CDATA[
                        [Description]: 将所使用的session备份到remote web container或local file db之前，需要检查有没有备份的必要性。该设定规定检查备份必要性的标准。基本上所使用的session变得invalidate时，不管设定标准进行备份。
                    ]]>
            </xs:documentation>         
        </xs:annotation>         
        <xs:restriction base="xs:string">             
            <xs:enumeration value="set">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 只有在发生该session的setAttribute/putValue/removeAttribute/removeValue函数呼叫的情况下，当作已更新，并备份该session对象。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>             
            <xs:enumeration value="get">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                         [Description]: 只有在发生该session的setAttribute/putValue/removeAttribute/removeValue/getAttribute/getValue 函数呼叫的情况下，当作已更新，并备份该session对象。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>             
            <xs:enumeration value="all">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                          [Description]: 无条件备份所使用的session。相关session对象被HttpServletRequest.getSession() API呼叫时，当作该session已更新，并对该session对象进行备份。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>         
        </xs:restriction>     
    </xs:simpleType>     
    <xs:complexType name="session-routerType">         
        <xs:sequence>             
            <xs:element name="servlet-engine-name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                                [Description]: 指定要参与到分布式session clustering的WebContainer引擎名称。
                                [Example]: engine1 or myNode_servlet_engine1
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="file-db" type="fileDbType">                 
                <xs:annotation>                     
                    <xs:appinfo>                         <metadata>                             <default-element>false</default-element>                         </metadata>                     
                    </xs:appinfo>                     
                    <xs:documentation><![CDATA[
		            [Description]: 与"default-file-db"设定具有相同作用的设定。                            但，该设定只适用于相关 WebContainer(session-router)。比 "default-file-db"设定具有更高的优先顺序。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element maxOccurs="1" minOccurs="0" name="backup-session-router" type="backup-session-routerType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                            [Description]: 指定当作该session-router的in-memory备份使用的session-router。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:simpleType name="webt-levelType">         
        <xs:restriction base="xs:string">             
            <xs:enumeration value="none">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 不留下日志message。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>             
            <xs:enumeration value="info">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 可以额外地查看其他日志message之外的Non-critical messages。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>             
            <xs:enumeration value="debug">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 可以查看调试(debugging)所需的所有日志message信息。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>             
            <xs:enumeration value="dev">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 显示包括网络数据包的所有日志
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:enumeration>         
        </xs:restriction>     
    </xs:simpleType>     
    <xs:complexType name="webadmin-configType">         
        <xs:sequence>             
            <xs:element maxOccurs="unbounded" minOccurs="0" name="allowed-server" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                            [Description]: 设定允许访问webadmin的主机列表。
                            [Example]: <allowed-server>10.10.*.*</allowed-server>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>     
    <xs:complexType name="backup-session-routerType">         
        <xs:sequence>             
            <xs:element name="node-name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                            [Description]: 设定作为备份使用的session-router存在的节点名。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element name="servlet-engine-name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                            [Description]: 设定当作backup使用的session-router "servlet-engine-name"。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="0" minOccurs="0" name="container-base-port" type="xs:int">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                            [Description]: container别使用listen port的时候 user指定的情况下使用base port. default container的时候使用 JEUS Manager的 listen port，所以不能指定.
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>     
    <xs:complexType name="fileDbType">         
        <xs:sequence>             
            <xs:element default="86400000" minOccurs="0" name="startup-clear-to" type="xs:long">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                            [Description]: 启动WebContainer时，将恢复保存在指定文件的session对象。如果当前时间和文件的last modified time之间的时差大于该设定的指定值时，不尝试恢复，全部清除文件的内容。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="path" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                            [Description]: 指定要保存backup session的文件名。(绝对路径) 默认值为$(JEUS_HOME)/sessiondb/<servlet_engine_name>_1.fdb。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="-1" minOccurs="0" name="passivation-to" type="off-intType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                            [Description]: 超过一定时间不使用memory上存在的session对象时，删除该session，取而代之使用保存在file-db的对象。
                            [Value Description]: -1时，不执行passivation。设定0以上的时间时，超过指定时间以上不使用之memory上的session对象被passivation。单位为msec。默认值为-1。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="1000" minOccurs="0" name="min-hole" type="xs:int">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                            [Description]: file-db在运用一段时间后，文件扩大到必要尺寸以上。file I/O的发生次数达到在该设定上指定的次数时，执行file packing防止文件尺寸扩大到必要尺寸以上。
                    ]]>
                    </xs:documentation>                     
                    <xs:appinfo>                         <metadata>                             <element-level>ADVANCED</element-level>                         </metadata>                     
                    </xs:appinfo>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="0.5" minOccurs="0" name="packing-rate" type="fractionType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                            [Description]: file-db在运用一段时间内，文件将扩大到必要的大小以上。与目前的session对象个数相比，file I/O 次数超过指定的ratio时，执行file packing防止文件扩大到必要以上的大小。
                    ]]>
                    </xs:documentation>                     
                    <xs:appinfo>                         <metadata>                             <element-level>ADVANCED</element-level>                         </metadata>                     
                    </xs:appinfo>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="jaxr-sourceType">         
        <xs:sequence>             
            <xs:element maxOccurs="unbounded" minOccurs="0" name="jaxr-entry" type="jaxr-entryType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 包含构成JAXR Connection所需的ConnectionFactory的构成值。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="jaxr-entryType">         
        <xs:sequence>             
            <xs:element name="export-name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: JAXR ConnectionFactoryd的JNDI名称。该将将在Naming Server上登录ConnectionFactory时使用。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="connection-factory-class-name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: JAXR ConnectionFactory 类名(class name).
                        [Example]: <connection-factory-class-name>jeus.webservices.registry.ConnectionFactoryImpl</connection-factory-class-name>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="query-manager-URL" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: Target registry provider的query manager service所需的URL。UDDI Registry的Inquiry URL。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="lifeCycle-manager-URL" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: Target registry provider的life cycle manager service所需的URL。UDDI Registry的Publishing URL。没有记述时，与queryManagerURL相同。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="authentication-method" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 为了获得Registry Provider的认证而使用的认证方法。
                        [Example]: <authenticationMethod>UDDI_GET_AUTHTOKEN</authenticationMethod>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element maxOccurs="unbounded" minOccurs="0" name="jaxr-property" type="jaxr-propertyType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: 用来设定构成ConnectionFactory的Configuration properties。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="jaxr-propertyType">         
        <xs:sequence>             
            <xs:element name="name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: jaxr configuration property的名称。Property名称要遵照JAXR 1.0 spec。
                        [Standard Properties]:    [javax.xml.registry.uddi.maxRows]:UDDI Provider对所发现operation进行返还的列的最大值。
                                                  [javax.xml.registry.postalAddressScheme]: 对于该Connection，用作基本postal address scheme的ClassificationScheme的id。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element name="value" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                        [Description]: jaxr property的值。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>  
</xs:schema>
