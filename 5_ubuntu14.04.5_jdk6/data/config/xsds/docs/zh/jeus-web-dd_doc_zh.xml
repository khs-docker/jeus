<?xml version="1.0" encoding="GB2312"?>
<description>                                                
    <text key="contextType.properties"><![CDATA[
                        [Description]: 指定context-wide属性。
                    ]]>                                                
    </text>
                                                         
    <text key="res-env-refType.jndi-info"><![CDATA[
                        [Description]: 各个<jndi-info>element在一个参照上连接一个JNDI名称。
                    ]]>                                                
    </text>
                                                         
    <text key="file-cachingType.directory"><![CDATA[
                        [Description]: 设定静态Content被caching的一个目录路径。
                                为了指定多个cache目录，多添加几个该element。
                        [Value Description]: Content要被cache的Context docbase有关的URL目录路径。
                    ]]>                                                
    </text>
                                                         
    <text key="contextType.service-ref"><![CDATA[
                 [Description]: JEUS web服务客户端设定文件的根元素(root element).
                        ]]>                                                
    </text>
                                                         
    <text key="contextType.res-env-ref"><![CDATA[
                        [Description]: 该element连接到web.xml的资源环境参照和实际系统中使用的JNDI名称。
                        [Dependency]:
                                    ref-name : /web-app/resource-env-ref/resource-env-ref-name
                    ]]>                                                
    </text>
                                                         
    <text key="contextType.auto-reload"><![CDATA[
                        [Description]: 决定当class变更时是否自动reload，Servlet class和custom tag class。该设定在变更与否的检查和reload的执行上，要求剩余的资源，所以只在开发运营环境中激活。
                    ]]>                                                
    </text>
                                                         
    <text key="contextType.deny-download"><![CDATA[
                        [Description]: 该element指定在某种情况下不能下载的文件。例如，如果名为secret.dat的文件存在于www.foo.com domain内/customers context路径下的data目录内，客户端请求URL www.foo.com/customers/data/secret.dat时，通常下载secret.dat文件。为了防止这种现象，拒绝下载secret.dat文件时，需要使用该XML element。
                  ]]>                                                
    </text>
                                                         
    <text key="contextType.role-mapping"><![CDATA[
                        [Description]: 该element将实际系统用户名映射到相关Context的web.xml的 <security-role>element上使用的J2EE role名称。web.xml文件位于相关Context的document base目录的“\WEB-INF\”下。
                        [Dependency]:
                                    role : /web-app/security-role/role-name
                    ]]>                                                
    </text>
                                                         
    <text key="role-mappingType.role-permission"><![CDATA[
                        [Description]:
                    ]]>                                                
    </text>
                                                         
    <text key="servletType.run-as-identity"><![CDATA[
                    [Description]: 该element将web.xml上定义的run-as-specified-identity role名称，映射到实际用户名(principal)。
                    ]]>                                                
    </text>
                                                         
    <text key="contextType.user-log"><![CDATA[
                        [Description]: 该element设定，编程人员在Servlet内通过ServletContext.log()method的使用定义的message处理。适用<context-group><logging><user-log>element设定值和Context的名称(例如.”Examples.log”). 使用该element来获取对Context的各个日志文件。
                    ]]>                                                
    </text>
                                                         
    <text key="contextType.docbase"><![CDATA[
                        [Description]: 该element设定保存Web application所有文件的Context的document base目录。该目录包括并添加到Context group的document base目录内。(犹如context-group><group-docbase>element上的设定).这还可以指定为绝对路径。如果没有设定该element时，Context保存到默认Context目录内(表示Context group目录下)。
                        [Value Description]: 对该Context的绝对或相对路径。如果指定相对路径时，该路径添加到Context group的document base。(不是以目录区别符号“\”或“/”开头)。
                    ]]>                                                
    </text>
                                                         
    <text key="jsp-resourceType.provider-class"><![CDATA[
                	[Description]: 为了将JSP resource提供给输入流，对实现JspResourceProvider接口的class进行指定。
                	]]>                                                
    </text>
                                                         
    <text key="contextType.jndi-properties"><![CDATA[
	                	[Description]: 设置jndi 关联的 property 
                	]]>                                                
    </text>
                                                         
    <text key="ejb-refType.jndi-info"><![CDATA[
                        [Description]: 各个<jndi-info>element在一个参照上连接一个JNDI名称。
                    ]]>                                                
    </text>
                                                         
    <text key="contextType.aliasing"><![CDATA[
                        [Description]: Aliasing用于在请求URL路径和实际文件系统目录之间生成象征性链接(symbolic link)。默认的Context路径下各URL路径反映Context的document base目录的下级目录。但不是这种情况，URL路径为其他目录时，该element用于强行替代（override）默认设定。
                    ]]>                                                
    </text>
                                                         
    <text key="contextType.enable-jsp"><![CDATA[
                        [Description]: 设定JSP引擎的使用与否。
                        [Value Description]: 通过Boolean值，使该设定处于激活或非激活状态。
                        [Value Type Description]: Boolean
                        [Defined Value]: [true]: 激活在Web Container中JSP的提供
                        [false]: 非激活在Web Container中JSP的提供
                                                              如果设定时，该值将导致所有JSP文件无法访问(Service Unavailable message将返还到browser)。
                    ]]>                                                
    </text>
                                                         
    <text key="contextType.jsp-resource"><![CDATA[                		[Description]: 该element为了将保存在Repository的JSP资源提供给JspEngine，指定provider-class。                	]]>                                                
    </text>
                                                         
    <text key="contextType.fast-deploy"><![CDATA[
                        [Description]: 指定该web component为web服务或包括web服务客户端时，是否要新生成web服务的Tie 以及web服务客户端的Stub，不进行编译，使用与已经生成的web component一起安装的class文件。
                    ]]>                                                
    </text>
                                                         
    <text key="deny-downloadType.directory"><![CDATA[
                        [Description]: 为了阻止对特定目录内所有文件的下载，使用该element(context的URL路径有关)。
                        [Value Description]: 开头和结尾为“/”的目录。Context的URL路径有关的目录。
                        [Example]: <directory>/data/</directory>
                    ]]>                                                
    </text>
                                                         
    <text key="file-cachingType.max-idle-time"><![CDATA[
                        [Description]: caching的静态资源在一定时间内不使用时，从caching中去除该资源时当作基准的时间。
                        [Value Description]: Millisecond值.
                        [Example]: <max-idle-time>1800</max-idle-time>
                    ]]>                                                
    </text>
                                                         
    <text key="deny-downloadType.extension"><![CDATA[
                        [Description]: 拒绝下载Context内以该element值作为扩展名的所有文件。
                        [Value Description]:文件扩展名
                        [Example]: <extension>dat</extension>
                    ]]>                                                
    </text>
                                                         
    <text key="auto-reloadType.enable-reload"><![CDATA[
                        [Description]: 决定要激活还是非激活Servlet auto-reload。
                        [Value Description]: 通过Boolean值，使该设定处于激活或非激活状态。
                        [Value Type Description]: Boolean
                        [Defined Value]: [true]: 激活该设定
                                         [false]:非激活该设定
                    ]]>                                                
    </text>
                                                         
    <text key="auto-reloadType.check-on-demand"><![CDATA[
                        [Description]: 该element指定，每当有请求到达时，是否要检查Servlet class reload。
                        [Value Description]: 通过Boolean值，使该设定处于激活或非激活状态。
                        [Value Type Description]: Boolean
                        [Defined Value]: [true]: 激活该设定
                                         [false]: 非激活该设定
                    ]]>                                                
    </text>
                                                         
    <text key="contextType.allow-indexing"><![CDATA[
                        [Description]: 该element的下级element设定为能查找URL路径内的文件。Indexing意味着，URL路径下目录的Content罗列到web browser窗口。如果满足三个条件时，将发生indexing。1.用户在URL路径上不包括明确的文件或资源名。(例如，不指定index.html). 2.Web application的web.xml Descriptor文件上未指定default welcome file。3.indexing允许请求的目录(允许的目录罗列该element的下级element)。如果上述所有条件都得到满足时，目录列表将发送到客户端。
                   ]]>                                                
    </text>
                                                         
    <text key="file-cachingType.max-cache-memory"><![CDATA[
                        [Description]: 用于保存静态资源而分配的最大内存
                        [Value Description]: Megabytes单位的数
                        [Value Type Description]: Integer
                        [Defined Value]: [-1]: cache size上不设定限制
                    ]]>                                                
    </text>
                                                         
    <text key="added-classpathType.class-path"><![CDATA[
                       [Description]: 声名(declare)编译和执行Servlet时添加的一个用户自定义classpath。
                        [Value Description]: 可以指定目录或JAR文件等。指定为目录时，应以目录separator结束(“\”windows,”/” unix)。
                        [Example]: <class-path>c:\mylib\subdir\</class-path>
                    ]]>                                                
    </text>
                                                         
    <text key="contextType.added-classpath"><![CDATA[
                        [Description]: 该element在Servlet被编译或执行时，附加到class路径，指定额外的class。基本上“\WEB-INF\classes”目录内，不仅包括class和package，“\WEB-INF\lib”下面的JAR文件也包括到class path。\WEB-INF\目录只是位于Context的文件base目录内。
                   ]]>                                                
    </text>
                                                         
    <text key="deny-downloadType.file"><![CDATA[
                        [Description]: 该element保证指定的文件绝对不被下载。
                        [Value Description]: URL context路径上跟随文件名的路径
                        [Example]: <file>/data/secret.dat</file>
                    ]]>                                                
    </text>
                                                         
    <text key="contextType.keep-generated"><![CDATA[
                        [Description]: 当该web component为web服务或包括web服务客户端时，指定是否要保留所生成web服务的Tie以及web服务客户端Stub的java source file。如果没有该设定时，使用<application>的设定。
                    ]]>                                                
    </text>
                                                         
    <text key="allow-indexingType.directory"><![CDATA[
                        [Description]: 该element在指定的URL路径上激活目录indexing。
                        [Value Description]: 开头和结尾为“/”的URL路径.
                    ]]>                                                
    </text>
                                                         
    <text key="contextType.jsp-engine"><![CDATA[
                     [Description]: 该element对于本Context，形成JSP相关的设定。本设定适用于相关Context的所有JSP page。
                ]]>                                                
    </text>
                                                         
    <text key="jndi-propertiesType.local-bindings"><![CDATA[
                        [Description] : 决定是否使用local binding .
                	    [Value Description]: 用Boolean值 活性化或非活性化该设置.
                	]]>                                                
    </text>
                                                         
    <text key="aliasingType.alias"><![CDATA[
                        [Description]: 该<alias>element在请求URL和唯一的目录之间定义一个映射。例如，用户请求URL为www.foo.com/examples/images/hello.gif时，作为默认，Container将从Context的基本目录“Examples”内的“/images/”目录中查找“hello.gif”。如果，“hello.gif”文件位于“c:\web\images”目录内，Context内没有时，就需要<alias>element。如果需要多个映射时，多设定几个该element。
                    ]]>                                                
    </text>
                                                         
    <text key="contextType.res-ref"><![CDATA[
                        [Description]: 该element连接到web.xml的资源参照(例如 datasource参照)和实际系统中使用的JNDI名称。
                        [Dependency]:
                                    ref-name : /web-app/resource-ref/res-ref-name
                    ]]>                                                
    </text>
                                                         
    <text key="contextType.ejb-ref"><![CDATA[
                        [Description]: 该element连接到web.xml中设定的EJB reference和实际系统中使用的JNDI名称。
                        [Dependency]:
                                    ref-name : /web-app/ejb-ref/ejb-ref-name
                    ]]>                                                
    </text>
                                                         
    <text key="contextType.servlet"><![CDATA[
                        [Description]: 该element包括context内的jeus独有的servlet相关的信息。
                    ]]>                                                
    </text>
                                                         
    <text key="contextType.webinf-first"><![CDATA[                        [Description]: 设定loading class时，是否在web-inf目录下首先查找。                            设定为true时，首先在web-inf目录下查找，设定为false时，首先在上级classloader中查找。                            设定为true时，应注意重复的class引起的ClassCastException。                    ]]>                                                
    </text>
                                                         
    <text key="servletType.servlet-name"><![CDATA[
                        [Description]:表示web.xml上指定的servlet-name。
                    ]]>                                                
    </text>
                                                         
    <text key="aliasType.real-path"><![CDATA[
                        [Description]: 定义<alias-name>element的URL路径将映射到的实际目录。
                        [Value Description]:以合适的separator结束的绝对目录路径(“\”windows,”/”unix).
                        [Example]: <real-path>c:\web\images\</real-path>
                    ]]>                                                
    </text>
                                                         
    <text key="contextType.url-rewriting"><![CDATA[
                        [Description]: 基本上Web Container为了对各种请求维持客户端的session id，使用cookie。此时存在的一个问题是cookie原来生成时的域名和请求所具有的域名不同时，大部分的web browser将对新的请求不发送任何session id cookie信息。如果将该选项设为true时，即使web browser支持cookie，也不会依赖cookie，取而代之的是强行执行URL rewriting的使用。此时，即使通过其他域名使用多个呼叫，也将会执行session跟踪。这将添加所有URL的唯一JSESSIONID URL参数，请求到Context。如果设定为false时，该设定将不被采用，以默认cookie为准。
                        [Value Description]: 通过Boolean值，使该设定处于激活或非激活状态。
                        [Value Type Description]: Boolean
                        [Defined Value]: [true]: 激活该设定
                                         [false]: 非激活该设定
                   ]]>                                                
    </text>
                                                         
    <text key="jeus-web-dd"><![CDATA[
                [Description]: JEUS Application(Servlet Application) Deployment Descriptor
                                        该element(<context>)的下级element包括适合于deployment和Context登录(Web application)的信息。
            ]]>                                                
    </text>
                                                         
    <text key="contextType.file-caching"><![CDATA[
                        [Description]: 该element构成向image文件或HTML文件的静态资源的cache。Cache意味着没有将频繁的请求文件保存到辅助贮存器(例如:硬盘)，而临时保存到主记忆体调用。这提高调用静态资源的性能。
                    ]]>                                                
    </text>
                                                         
    <text key="aliasType.alias-name"><![CDATA[
                        [Description]: 要映射到指定目录的URL路径.
                        [Value Description]: 开头和结尾为“/”的目录。Context的URL路径有关的目录。
                        [Example]: <alias-name>/images/</alias-name>
                    ]]>                                                
    </text>
                                                         
    <text key="contextType.max-instance-pool-size"><![CDATA[
                        [Description]: 如果使用single thread model时(只对像这样继承SingleThreadedModel interface的Servlet)，设定Servlet instance的最多数量。如果对single threaded Servlet的请求超出这里的设定值时，请求将等待，直到能使用single threaded Servlet instance。
                        [Value Description]: 为了该Context group而生成的single threaded Servlet instance的最大数
                        [Value Type Description]: Integer
                        [Defined Value]: [-1]: 如果使用该值时，对single threaded Servlets的instance个数将没有限制。
                    ]]>                                                
    </text>
                                                         
    <text key="contextType.enable-default-login"><![CDATA[
                        [Description]: 定义是否要使用JEUS WebContainer中提供的LoginFilter功能。 
                    ]]>                                                
    </text>
                                                         
    <text key="contextType.context-path"><![CDATA[
                        [Description]: 表示context的 URL path。该path位于域名(和端口编号)后端。例：如果A context的context path为“/examples”时，“http://www.foo.com/examples/index.html” URL执行A context的index.html文件。                                               注意：如果在WEBMain.xml内未设定该element时，应在这里设定。
                        [Value Description]: URL应该以“/”开头。该路径在Virtual Host内应具有唯一性。
                    ]]>                                                
    </text>
 </description>
