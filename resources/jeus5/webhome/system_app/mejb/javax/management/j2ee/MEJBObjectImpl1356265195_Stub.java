// This is generated by JEUS RMI Compiler.
// Do not edit any part of this.
package javax.management.j2ee;

import java.util.*;
import java.rmi.RemoteException;
import javax.naming.*;

public final class MEJBObjectImpl1356265195_Stub
	extends jeus.ejb.bean.rmi.RMIStub
	implements javax.management.j2ee.Management
{
	private static final java.rmi.server.Operation[] operations = {
		new java.rmi.server.Operation("javax.management.AttributeList setAttributes(javax.management.ObjectName, javax.management.AttributeList)"),
		new java.rmi.server.Operation("void setAttribute(javax.management.ObjectName, javax.management.Attribute)"),
		new java.rmi.server.Operation("void remove()"),
		new java.rmi.server.Operation("java.util.Set queryNames(javax.management.ObjectName, javax.management.QueryExp)"),
		new java.rmi.server.Operation("boolean isRegistered(javax.management.ObjectName)"),
		new java.rmi.server.Operation("boolean isIdentical(javax.ejb.EJBObject)"),
		new java.rmi.server.Operation("java.lang.Object invoke(javax.management.ObjectName, java.lang.String, java.lang.Object[], java.lang.String[])"),
		new java.rmi.server.Operation("java.lang.Object getPrimaryKey()"),
		new java.rmi.server.Operation("javax.management.MBeanInfo getMBeanInfo(javax.management.ObjectName)"),
		new java.rmi.server.Operation("java.lang.Integer getMBeanCount()"),
		new java.rmi.server.Operation("javax.management.j2ee.ListenerRegistration getListenerRegistry()"),
		new java.rmi.server.Operation("javax.ejb.Handle getHandle()"),
		new java.rmi.server.Operation("javax.ejb.EJBHome getEJBHome()"),
		new java.rmi.server.Operation("java.lang.String getDefaultDomain()"),
		new java.rmi.server.Operation("javax.management.AttributeList getAttributes(javax.management.ObjectName, java.lang.String[])"),
		new java.rmi.server.Operation("java.lang.Object getAttribute(javax.management.ObjectName, java.lang.String)")
	};
	
	private static final long interfaceHash = 4499074735905930175L;
	
	// constructors
	public MEJBObjectImpl1356265195_Stub() {
		super();
	}
	public MEJBObjectImpl1356265195_Stub(java.rmi.server.RemoteRef ref) {
		super(ref);
	}
	
	// methods from remote interfaces
	
	// implementation of javax.management.AttributeList setAttributes(javax.management.ObjectName, javax.management.AttributeList)
	public javax.management.AttributeList setAttributes(javax.management.ObjectName param_1, javax.management.AttributeList param_2)
		throws javax.management.InstanceNotFoundException, javax.management.ReflectionException, java.rmi.RemoteException
	{
		javax.management.AttributeList result;
		try {
			String currExportName = null;
			java.rmi.server.RemoteObject currStub = this;
			
			while(true) {
				if(clusterSupport != null) //clustered
				{
					synchronized(clusterSupport) {
					currExportName = clusterSupport.getExportName();
					currStub = (java.rmi.server.RemoteObject) clusterSupport.getStub();
					}
				}
				
				java.rmi.server.RemoteRef ref = currStub.getRef();
				try {
					java.rmi.server.RemoteCall call = ref.newCall(currStub, operations, 0, interfaceHash);
					callClientInterceptors(call);
					try {
						java.io.ObjectOutput out = call.getOutputStream();
						out.writeObject(param_1);
						out.writeObject(param_2);
						ref.invoke(call);
					} catch(Exception ex) {
						 setException(ex);
						 throw ex;
					}
					callAfterClientInterceptors(call);
					try {
						java.io.ObjectInput in = call.getInputStream();
						result = (javax.management.AttributeList) in.readObject();
					} catch (java.io.IOException e) {
						throw new java.rmi.UnmarshalException("error unmarshalling return", e);
					} catch (java.lang.ClassNotFoundException e) {
						throw new java.rmi.UnmarshalException("error unmarshalling return", e);
					} finally {
						ref.done(call);
					}
					
					return result;
				} catch(java.rmi.RemoteException ex) {
					if(clusterSupport != null) {
						clusterSupport.handleException(ex, currExportName, false);
					} else {
						throw ex;
					}
				}
				
			}
		} catch (java.rmi.ServerException e) {
			if(e.detail != null && e.detail instanceof java.rmi.RemoteException)
				throw (java.rmi.RemoteException)e.detail;
			else
			throw e;
		} catch (java.lang.RuntimeException e) {
			throw e;
		} catch (java.rmi.RemoteException e) {
			throw e;
		} catch (javax.management.InstanceNotFoundException e) {
			throw e;
		} catch (javax.management.ReflectionException e) {
			throw e;
		} catch (java.lang.Exception e) {
			throw new java.rmi.UnexpectedException("undeclared checked exception", e);
		}
	}
	
	// implementation of void setAttribute(javax.management.ObjectName, javax.management.Attribute)
	public void setAttribute(javax.management.ObjectName param_1, javax.management.Attribute param_2)
		throws javax.management.InstanceNotFoundException, javax.management.AttributeNotFoundException, javax.management.InvalidAttributeValueException, javax.management.MBeanException, javax.management.ReflectionException, java.rmi.RemoteException
	{
		try {
			String currExportName = null;
			java.rmi.server.RemoteObject currStub = this;
			
			while(true) {
				if(clusterSupport != null) //clustered
				{
					synchronized(clusterSupport) {
					currExportName = clusterSupport.getExportName();
					currStub = (java.rmi.server.RemoteObject) clusterSupport.getStub();
					}
				}
				
				java.rmi.server.RemoteRef ref = currStub.getRef();
				try {
					java.rmi.server.RemoteCall call = ref.newCall(currStub, operations, 1, interfaceHash);
					callClientInterceptors(call);
					try {
						java.io.ObjectOutput out = call.getOutputStream();
						out.writeObject(param_1);
						out.writeObject(param_2);
						ref.invoke(call);
					} catch(Exception ex) {
						 setException(ex);
						 throw ex;
					}
					callAfterClientInterceptors(call);
					try {
						java.io.ObjectInput in = call.getInputStream();
					} catch (java.io.IOException e) {
						throw new java.rmi.UnmarshalException("error unmarshalling return", e);
					} finally {
						ref.done(call);
					}
					
					return;
				} catch(java.rmi.RemoteException ex) {
					if(clusterSupport != null) {
						clusterSupport.handleException(ex, currExportName, false);
					} else {
						throw ex;
					}
				}
				
			}
		} catch (java.rmi.ServerException e) {
			if(e.detail != null && e.detail instanceof java.rmi.RemoteException)
				throw (java.rmi.RemoteException)e.detail;
			else
			throw e;
		} catch (java.lang.RuntimeException e) {
			throw e;
		} catch (java.rmi.RemoteException e) {
			throw e;
		} catch (javax.management.InstanceNotFoundException e) {
			throw e;
		} catch (javax.management.AttributeNotFoundException e) {
			throw e;
		} catch (javax.management.InvalidAttributeValueException e) {
			throw e;
		} catch (javax.management.MBeanException e) {
			throw e;
		} catch (javax.management.ReflectionException e) {
			throw e;
		} catch (java.lang.Exception e) {
			throw new java.rmi.UnexpectedException("undeclared checked exception", e);
		}
	}
	
	// implementation of void remove()
	public void remove()
		throws java.rmi.RemoteException, javax.ejb.RemoveException
	{
		try {
			String currExportName = null;
			java.rmi.server.RemoteObject currStub = this;
			
			while(true) {
				if(clusterSupport != null) //clustered
				{
					synchronized(clusterSupport) {
					currExportName = clusterSupport.getExportName();
					currStub = (java.rmi.server.RemoteObject) clusterSupport.getStub();
					}
				}
				
				java.rmi.server.RemoteRef ref = currStub.getRef();
				try {
					java.rmi.server.RemoteCall call = ref.newCall(currStub, operations, 2, interfaceHash);
					callClientInterceptors(call);
					try {
						java.io.ObjectOutput out = call.getOutputStream();
						ref.invoke(call);
					} catch(Exception ex) {
						 setException(ex);
						 throw ex;
					}
					callAfterClientInterceptors(call);
					try {
						java.io.ObjectInput in = call.getInputStream();
					} catch (java.io.IOException e) {
						throw new java.rmi.UnmarshalException("error unmarshalling return", e);
					} finally {
						ref.done(call);
					}
					
					return;
				} catch(java.rmi.RemoteException ex) {
					if(clusterSupport != null) {
						clusterSupport.handleException(ex, currExportName, false);
					} else {
						throw ex;
					}
				}
				
			}
		} catch (java.rmi.ServerException e) {
			if(e.detail != null && e.detail instanceof java.rmi.RemoteException)
				throw (java.rmi.RemoteException)e.detail;
			else
			throw e;
		} catch (java.lang.RuntimeException e) {
			throw e;
		} catch (java.rmi.RemoteException e) {
			throw e;
		} catch (javax.ejb.RemoveException e) {
			throw e;
		} catch (java.lang.Exception e) {
			throw new java.rmi.UnexpectedException("undeclared checked exception", e);
		}
	}
	
	// implementation of java.util.Set queryNames(javax.management.ObjectName, javax.management.QueryExp)
	public java.util.Set queryNames(javax.management.ObjectName param_1, javax.management.QueryExp param_2)
		throws java.rmi.RemoteException
	{
		java.util.Set result;
		try {
			String currExportName = null;
			java.rmi.server.RemoteObject currStub = this;
			
			while(true) {
				if(clusterSupport != null) //clustered
				{
					synchronized(clusterSupport) {
					currExportName = clusterSupport.getExportName();
					currStub = (java.rmi.server.RemoteObject) clusterSupport.getStub();
					}
				}
				
				java.rmi.server.RemoteRef ref = currStub.getRef();
				try {
					java.rmi.server.RemoteCall call = ref.newCall(currStub, operations, 3, interfaceHash);
					callClientInterceptors(call);
					try {
						java.io.ObjectOutput out = call.getOutputStream();
						out.writeObject(param_1);
						out.writeObject(param_2);
						ref.invoke(call);
					} catch(Exception ex) {
						 setException(ex);
						 throw ex;
					}
					callAfterClientInterceptors(call);
					try {
						java.io.ObjectInput in = call.getInputStream();
						result = (java.util.Set) in.readObject();
					} catch (java.io.IOException e) {
						throw new java.rmi.UnmarshalException("error unmarshalling return", e);
					} catch (java.lang.ClassNotFoundException e) {
						throw new java.rmi.UnmarshalException("error unmarshalling return", e);
					} finally {
						ref.done(call);
					}
					
					return result;
				} catch(java.rmi.RemoteException ex) {
					if(clusterSupport != null) {
						clusterSupport.handleException(ex, currExportName, false);
					} else {
						throw ex;
					}
				}
				
			}
		} catch (java.rmi.ServerException e) {
			if(e.detail != null && e.detail instanceof java.rmi.RemoteException)
				throw (java.rmi.RemoteException)e.detail;
			else
			throw e;
		} catch (java.lang.RuntimeException e) {
			throw e;
		} catch (java.rmi.RemoteException e) {
			throw e;
		} catch (java.lang.Exception e) {
			throw new java.rmi.UnexpectedException("undeclared checked exception", e);
		}
	}
	
	// implementation of boolean isRegistered(javax.management.ObjectName)
	public boolean isRegistered(javax.management.ObjectName param_1)
		throws java.rmi.RemoteException
	{
		boolean result;
		try {
			String currExportName = null;
			java.rmi.server.RemoteObject currStub = this;
			
			while(true) {
				if(clusterSupport != null) //clustered
				{
					synchronized(clusterSupport) {
					currExportName = clusterSupport.getExportName();
					currStub = (java.rmi.server.RemoteObject) clusterSupport.getStub();
					}
				}
				
				java.rmi.server.RemoteRef ref = currStub.getRef();
				try {
					java.rmi.server.RemoteCall call = ref.newCall(currStub, operations, 4, interfaceHash);
					callClientInterceptors(call);
					try {
						java.io.ObjectOutput out = call.getOutputStream();
						out.writeObject(param_1);
						ref.invoke(call);
					} catch(Exception ex) {
						 setException(ex);
						 throw ex;
					}
					callAfterClientInterceptors(call);
					try {
						java.io.ObjectInput in = call.getInputStream();
						result = in.readBoolean();
					} catch (java.io.IOException e) {
						throw new java.rmi.UnmarshalException("error unmarshalling return", e);
					} finally {
						ref.done(call);
					}
					
					return result;
				} catch(java.rmi.RemoteException ex) {
					if(clusterSupport != null) {
						clusterSupport.handleException(ex, currExportName, false);
					} else {
						throw ex;
					}
				}
				
			}
		} catch (java.rmi.ServerException e) {
			if(e.detail != null && e.detail instanceof java.rmi.RemoteException)
				throw (java.rmi.RemoteException)e.detail;
			else
			throw e;
		} catch (java.lang.RuntimeException e) {
			throw e;
		} catch (java.rmi.RemoteException e) {
			throw e;
		} catch (java.lang.Exception e) {
			throw new java.rmi.UnexpectedException("undeclared checked exception", e);
		}
	}
	
	// implementation of boolean isIdentical(javax.ejb.EJBObject)
	public boolean isIdentical(javax.ejb.EJBObject param_1)
		throws java.rmi.RemoteException
	{
		boolean result;
		try {
			String currExportName = null;
			java.rmi.server.RemoteObject currStub = this;
			
			while(true) {
				if(clusterSupport != null) //clustered
				{
					synchronized(clusterSupport) {
					currExportName = clusterSupport.getExportName();
					currStub = (java.rmi.server.RemoteObject) clusterSupport.getStub();
					}
				}
				
				java.rmi.server.RemoteRef ref = currStub.getRef();
				try {
					java.rmi.server.RemoteCall call = ref.newCall(currStub, operations, 5, interfaceHash);
					callClientInterceptors(call);
					try {
						java.io.ObjectOutput out = call.getOutputStream();
						out.writeObject(param_1);
						ref.invoke(call);
					} catch(Exception ex) {
						 setException(ex);
						 throw ex;
					}
					callAfterClientInterceptors(call);
					try {
						java.io.ObjectInput in = call.getInputStream();
						result = in.readBoolean();
					} catch (java.io.IOException e) {
						throw new java.rmi.UnmarshalException("error unmarshalling return", e);
					} finally {
						ref.done(call);
					}
					
					return result;
				} catch(java.rmi.RemoteException ex) {
					if(clusterSupport != null) {
						clusterSupport.handleException(ex, currExportName, false);
					} else {
						throw ex;
					}
				}
				
			}
		} catch (java.rmi.ServerException e) {
			if(e.detail != null && e.detail instanceof java.rmi.RemoteException)
				throw (java.rmi.RemoteException)e.detail;
			else
			throw e;
		} catch (java.lang.RuntimeException e) {
			throw e;
		} catch (java.rmi.RemoteException e) {
			throw e;
		} catch (java.lang.Exception e) {
			throw new java.rmi.UnexpectedException("undeclared checked exception", e);
		}
	}
	
	// implementation of java.lang.Object invoke(javax.management.ObjectName, java.lang.String, java.lang.Object[], java.lang.String[])
	public java.lang.Object invoke(javax.management.ObjectName param_1, java.lang.String param_2, java.lang.Object[] param_3, java.lang.String[] param_4)
		throws javax.management.InstanceNotFoundException, javax.management.MBeanException, javax.management.ReflectionException, java.rmi.RemoteException
	{
		java.lang.Object result;
		try {
			String currExportName = null;
			java.rmi.server.RemoteObject currStub = this;
			
			while(true) {
				if(clusterSupport != null) //clustered
				{
					synchronized(clusterSupport) {
					currExportName = clusterSupport.getExportName();
					currStub = (java.rmi.server.RemoteObject) clusterSupport.getStub();
					}
				}
				
				java.rmi.server.RemoteRef ref = currStub.getRef();
				try {
					java.rmi.server.RemoteCall call = ref.newCall(currStub, operations, 6, interfaceHash);
					callClientInterceptors(call);
					try {
						java.io.ObjectOutput out = call.getOutputStream();
						out.writeObject(param_1);
						out.writeObject(param_2);
						out.writeObject(param_3);
						out.writeObject(param_4);
						ref.invoke(call);
					} catch(Exception ex) {
						 setException(ex);
						 throw ex;
					}
					callAfterClientInterceptors(call);
					try {
						java.io.ObjectInput in = call.getInputStream();
						result = (java.lang.Object) in.readObject();
					} catch (java.io.IOException e) {
						throw new java.rmi.UnmarshalException("error unmarshalling return", e);
					} catch (java.lang.ClassNotFoundException e) {
						throw new java.rmi.UnmarshalException("error unmarshalling return", e);
					} finally {
						ref.done(call);
					}
					
					return result;
				} catch(java.rmi.RemoteException ex) {
					if(clusterSupport != null) {
						clusterSupport.handleException(ex, currExportName, false);
					} else {
						throw ex;
					}
				}
				
			}
		} catch (java.rmi.ServerException e) {
			if(e.detail != null && e.detail instanceof java.rmi.RemoteException)
				throw (java.rmi.RemoteException)e.detail;
			else
			throw e;
		} catch (java.lang.RuntimeException e) {
			throw e;
		} catch (java.rmi.RemoteException e) {
			throw e;
		} catch (javax.management.InstanceNotFoundException e) {
			throw e;
		} catch (javax.management.MBeanException e) {
			throw e;
		} catch (javax.management.ReflectionException e) {
			throw e;
		} catch (java.lang.Exception e) {
			throw new java.rmi.UnexpectedException("undeclared checked exception", e);
		}
	}
	
	// implementation of java.lang.Object getPrimaryKey()
	public java.lang.Object getPrimaryKey()
		throws java.rmi.RemoteException
	{
		java.lang.Object result;
		try {
			String currExportName = null;
			java.rmi.server.RemoteObject currStub = this;
			
			while(true) {
				if(clusterSupport != null) //clustered
				{
					synchronized(clusterSupport) {
					currExportName = clusterSupport.getExportName();
					currStub = (java.rmi.server.RemoteObject) clusterSupport.getStub();
					}
				}
				
				java.rmi.server.RemoteRef ref = currStub.getRef();
				try {
					java.rmi.server.RemoteCall call = ref.newCall(currStub, operations, 7, interfaceHash);
					callClientInterceptors(call);
					try {
						java.io.ObjectOutput out = call.getOutputStream();
						ref.invoke(call);
					} catch(Exception ex) {
						 setException(ex);
						 throw ex;
					}
					callAfterClientInterceptors(call);
					try {
						java.io.ObjectInput in = call.getInputStream();
						result = (java.lang.Object) in.readObject();
					} catch (java.io.IOException e) {
						throw new java.rmi.UnmarshalException("error unmarshalling return", e);
					} catch (java.lang.ClassNotFoundException e) {
						throw new java.rmi.UnmarshalException("error unmarshalling return", e);
					} finally {
						ref.done(call);
					}
					
					return result;
				} catch(java.rmi.RemoteException ex) {
					if(clusterSupport != null) {
						clusterSupport.handleException(ex, currExportName, false);
					} else {
						throw ex;
					}
				}
				
			}
		} catch (java.rmi.ServerException e) {
			if(e.detail != null && e.detail instanceof java.rmi.RemoteException)
				throw (java.rmi.RemoteException)e.detail;
			else
			throw e;
		} catch (java.lang.RuntimeException e) {
			throw e;
		} catch (java.rmi.RemoteException e) {
			throw e;
		} catch (java.lang.Exception e) {
			throw new java.rmi.UnexpectedException("undeclared checked exception", e);
		}
	}
	
	// implementation of javax.management.MBeanInfo getMBeanInfo(javax.management.ObjectName)
	public javax.management.MBeanInfo getMBeanInfo(javax.management.ObjectName param_1)
		throws javax.management.IntrospectionException, javax.management.InstanceNotFoundException, javax.management.ReflectionException, java.rmi.RemoteException
	{
		javax.management.MBeanInfo result;
		try {
			String currExportName = null;
			java.rmi.server.RemoteObject currStub = this;
			
			while(true) {
				if(clusterSupport != null) //clustered
				{
					synchronized(clusterSupport) {
					currExportName = clusterSupport.getExportName();
					currStub = (java.rmi.server.RemoteObject) clusterSupport.getStub();
					}
				}
				
				java.rmi.server.RemoteRef ref = currStub.getRef();
				try {
					java.rmi.server.RemoteCall call = ref.newCall(currStub, operations, 8, interfaceHash);
					callClientInterceptors(call);
					try {
						java.io.ObjectOutput out = call.getOutputStream();
						out.writeObject(param_1);
						ref.invoke(call);
					} catch(Exception ex) {
						 setException(ex);
						 throw ex;
					}
					callAfterClientInterceptors(call);
					try {
						java.io.ObjectInput in = call.getInputStream();
						result = (javax.management.MBeanInfo) in.readObject();
					} catch (java.io.IOException e) {
						throw new java.rmi.UnmarshalException("error unmarshalling return", e);
					} catch (java.lang.ClassNotFoundException e) {
						throw new java.rmi.UnmarshalException("error unmarshalling return", e);
					} finally {
						ref.done(call);
					}
					
					return result;
				} catch(java.rmi.RemoteException ex) {
					if(clusterSupport != null) {
						clusterSupport.handleException(ex, currExportName, false);
					} else {
						throw ex;
					}
				}
				
			}
		} catch (java.rmi.ServerException e) {
			if(e.detail != null && e.detail instanceof java.rmi.RemoteException)
				throw (java.rmi.RemoteException)e.detail;
			else
			throw e;
		} catch (java.lang.RuntimeException e) {
			throw e;
		} catch (java.rmi.RemoteException e) {
			throw e;
		} catch (javax.management.IntrospectionException e) {
			throw e;
		} catch (javax.management.InstanceNotFoundException e) {
			throw e;
		} catch (javax.management.ReflectionException e) {
			throw e;
		} catch (java.lang.Exception e) {
			throw new java.rmi.UnexpectedException("undeclared checked exception", e);
		}
	}
	
	// implementation of java.lang.Integer getMBeanCount()
	public java.lang.Integer getMBeanCount()
		throws java.rmi.RemoteException
	{
		java.lang.Integer result;
		try {
			String currExportName = null;
			java.rmi.server.RemoteObject currStub = this;
			
			while(true) {
				if(clusterSupport != null) //clustered
				{
					synchronized(clusterSupport) {
					currExportName = clusterSupport.getExportName();
					currStub = (java.rmi.server.RemoteObject) clusterSupport.getStub();
					}
				}
				
				java.rmi.server.RemoteRef ref = currStub.getRef();
				try {
					java.rmi.server.RemoteCall call = ref.newCall(currStub, operations, 9, interfaceHash);
					callClientInterceptors(call);
					try {
						java.io.ObjectOutput out = call.getOutputStream();
						ref.invoke(call);
					} catch(Exception ex) {
						 setException(ex);
						 throw ex;
					}
					callAfterClientInterceptors(call);
					try {
						java.io.ObjectInput in = call.getInputStream();
						result = (java.lang.Integer) in.readObject();
					} catch (java.io.IOException e) {
						throw new java.rmi.UnmarshalException("error unmarshalling return", e);
					} catch (java.lang.ClassNotFoundException e) {
						throw new java.rmi.UnmarshalException("error unmarshalling return", e);
					} finally {
						ref.done(call);
					}
					
					return result;
				} catch(java.rmi.RemoteException ex) {
					if(clusterSupport != null) {
						clusterSupport.handleException(ex, currExportName, false);
					} else {
						throw ex;
					}
				}
				
			}
		} catch (java.rmi.ServerException e) {
			if(e.detail != null && e.detail instanceof java.rmi.RemoteException)
				throw (java.rmi.RemoteException)e.detail;
			else
			throw e;
		} catch (java.lang.RuntimeException e) {
			throw e;
		} catch (java.rmi.RemoteException e) {
			throw e;
		} catch (java.lang.Exception e) {
			throw new java.rmi.UnexpectedException("undeclared checked exception", e);
		}
	}
	
	// implementation of javax.management.j2ee.ListenerRegistration getListenerRegistry()
	public javax.management.j2ee.ListenerRegistration getListenerRegistry()
		throws java.rmi.RemoteException
	{
		javax.management.j2ee.ListenerRegistration result;
		try {
			String currExportName = null;
			java.rmi.server.RemoteObject currStub = this;
			
			while(true) {
				if(clusterSupport != null) //clustered
				{
					synchronized(clusterSupport) {
					currExportName = clusterSupport.getExportName();
					currStub = (java.rmi.server.RemoteObject) clusterSupport.getStub();
					}
				}
				
				java.rmi.server.RemoteRef ref = currStub.getRef();
				try {
					java.rmi.server.RemoteCall call = ref.newCall(currStub, operations, 10, interfaceHash);
					callClientInterceptors(call);
					try {
						java.io.ObjectOutput out = call.getOutputStream();
						ref.invoke(call);
					} catch(Exception ex) {
						 setException(ex);
						 throw ex;
					}
					callAfterClientInterceptors(call);
					try {
						java.io.ObjectInput in = call.getInputStream();
						result = (javax.management.j2ee.ListenerRegistration) in.readObject();
					} catch (java.io.IOException e) {
						throw new java.rmi.UnmarshalException("error unmarshalling return", e);
					} catch (java.lang.ClassNotFoundException e) {
						throw new java.rmi.UnmarshalException("error unmarshalling return", e);
					} finally {
						ref.done(call);
					}
					
					return result;
				} catch(java.rmi.RemoteException ex) {
					if(clusterSupport != null) {
						clusterSupport.handleException(ex, currExportName, false);
					} else {
						throw ex;
					}
				}
				
			}
		} catch (java.rmi.ServerException e) {
			if(e.detail != null && e.detail instanceof java.rmi.RemoteException)
				throw (java.rmi.RemoteException)e.detail;
			else
			throw e;
		} catch (java.lang.RuntimeException e) {
			throw e;
		} catch (java.rmi.RemoteException e) {
			throw e;
		} catch (java.lang.Exception e) {
			throw new java.rmi.UnexpectedException("undeclared checked exception", e);
		}
	}
	
	// implementation of javax.ejb.Handle getHandle()
	public javax.ejb.Handle getHandle()
		throws java.rmi.RemoteException
	{
		javax.ejb.Handle result;
		try {
			String currExportName = null;
			java.rmi.server.RemoteObject currStub = this;
			
			while(true) {
				if(clusterSupport != null) //clustered
				{
					synchronized(clusterSupport) {
					currExportName = clusterSupport.getExportName();
					currStub = (java.rmi.server.RemoteObject) clusterSupport.getStub();
					}
				}
				
				java.rmi.server.RemoteRef ref = currStub.getRef();
				try {
					java.rmi.server.RemoteCall call = ref.newCall(currStub, operations, 11, interfaceHash);
					callClientInterceptors(call);
					try {
						java.io.ObjectOutput out = call.getOutputStream();
						ref.invoke(call);
					} catch(Exception ex) {
						 setException(ex);
						 throw ex;
					}
					callAfterClientInterceptors(call);
					try {
						java.io.ObjectInput in = call.getInputStream();
						result = (javax.ejb.Handle) in.readObject();
					} catch (java.io.IOException e) {
						throw new java.rmi.UnmarshalException("error unmarshalling return", e);
					} catch (java.lang.ClassNotFoundException e) {
						throw new java.rmi.UnmarshalException("error unmarshalling return", e);
					} finally {
						ref.done(call);
					}
					
					return result;
				} catch(java.rmi.RemoteException ex) {
					if(clusterSupport != null) {
						clusterSupport.handleException(ex, currExportName, false);
					} else {
						throw ex;
					}
				}
				
			}
		} catch (java.rmi.ServerException e) {
			if(e.detail != null && e.detail instanceof java.rmi.RemoteException)
				throw (java.rmi.RemoteException)e.detail;
			else
			throw e;
		} catch (java.lang.RuntimeException e) {
			throw e;
		} catch (java.rmi.RemoteException e) {
			throw e;
		} catch (java.lang.Exception e) {
			throw new java.rmi.UnexpectedException("undeclared checked exception", e);
		}
	}
	
	// implementation of javax.ejb.EJBHome getEJBHome()
	public javax.ejb.EJBHome getEJBHome()
		throws java.rmi.RemoteException
	{
		javax.ejb.EJBHome result;
		try {
			String currExportName = null;
			java.rmi.server.RemoteObject currStub = this;
			
			while(true) {
				if(clusterSupport != null) //clustered
				{
					synchronized(clusterSupport) {
					currExportName = clusterSupport.getExportName();
					currStub = (java.rmi.server.RemoteObject) clusterSupport.getStub();
					}
				}
				
				java.rmi.server.RemoteRef ref = currStub.getRef();
				try {
					java.rmi.server.RemoteCall call = ref.newCall(currStub, operations, 12, interfaceHash);
					callClientInterceptors(call);
					try {
						java.io.ObjectOutput out = call.getOutputStream();
						ref.invoke(call);
					} catch(Exception ex) {
						 setException(ex);
						 throw ex;
					}
					callAfterClientInterceptors(call);
					try {
						java.io.ObjectInput in = call.getInputStream();
						result = (javax.ejb.EJBHome) in.readObject();
					} catch (java.io.IOException e) {
						throw new java.rmi.UnmarshalException("error unmarshalling return", e);
					} catch (java.lang.ClassNotFoundException e) {
						throw new java.rmi.UnmarshalException("error unmarshalling return", e);
					} finally {
						ref.done(call);
					}
					
					return result;
				} catch(java.rmi.RemoteException ex) {
					if(clusterSupport != null) {
						clusterSupport.handleException(ex, currExportName, false);
					} else {
						throw ex;
					}
				}
				
			}
		} catch (java.rmi.ServerException e) {
			if(e.detail != null && e.detail instanceof java.rmi.RemoteException)
				throw (java.rmi.RemoteException)e.detail;
			else
			throw e;
		} catch (java.lang.RuntimeException e) {
			throw e;
		} catch (java.rmi.RemoteException e) {
			throw e;
		} catch (java.lang.Exception e) {
			throw new java.rmi.UnexpectedException("undeclared checked exception", e);
		}
	}
	
	// implementation of java.lang.String getDefaultDomain()
	public java.lang.String getDefaultDomain()
		throws java.rmi.RemoteException
	{
		java.lang.String result;
		try {
			String currExportName = null;
			java.rmi.server.RemoteObject currStub = this;
			
			while(true) {
				if(clusterSupport != null) //clustered
				{
					synchronized(clusterSupport) {
					currExportName = clusterSupport.getExportName();
					currStub = (java.rmi.server.RemoteObject) clusterSupport.getStub();
					}
				}
				
				java.rmi.server.RemoteRef ref = currStub.getRef();
				try {
					java.rmi.server.RemoteCall call = ref.newCall(currStub, operations, 13, interfaceHash);
					callClientInterceptors(call);
					try {
						java.io.ObjectOutput out = call.getOutputStream();
						ref.invoke(call);
					} catch(Exception ex) {
						 setException(ex);
						 throw ex;
					}
					callAfterClientInterceptors(call);
					try {
						java.io.ObjectInput in = call.getInputStream();
						result = (java.lang.String) in.readObject();
					} catch (java.io.IOException e) {
						throw new java.rmi.UnmarshalException("error unmarshalling return", e);
					} catch (java.lang.ClassNotFoundException e) {
						throw new java.rmi.UnmarshalException("error unmarshalling return", e);
					} finally {
						ref.done(call);
					}
					
					return result;
				} catch(java.rmi.RemoteException ex) {
					if(clusterSupport != null) {
						clusterSupport.handleException(ex, currExportName, false);
					} else {
						throw ex;
					}
				}
				
			}
		} catch (java.rmi.ServerException e) {
			if(e.detail != null && e.detail instanceof java.rmi.RemoteException)
				throw (java.rmi.RemoteException)e.detail;
			else
			throw e;
		} catch (java.lang.RuntimeException e) {
			throw e;
		} catch (java.rmi.RemoteException e) {
			throw e;
		} catch (java.lang.Exception e) {
			throw new java.rmi.UnexpectedException("undeclared checked exception", e);
		}
	}
	
	// implementation of javax.management.AttributeList getAttributes(javax.management.ObjectName, java.lang.String[])
	public javax.management.AttributeList getAttributes(javax.management.ObjectName param_1, java.lang.String[] param_2)
		throws javax.management.InstanceNotFoundException, javax.management.ReflectionException, java.rmi.RemoteException
	{
		javax.management.AttributeList result;
		try {
			String currExportName = null;
			java.rmi.server.RemoteObject currStub = this;
			
			while(true) {
				if(clusterSupport != null) //clustered
				{
					synchronized(clusterSupport) {
					currExportName = clusterSupport.getExportName();
					currStub = (java.rmi.server.RemoteObject) clusterSupport.getStub();
					}
				}
				
				java.rmi.server.RemoteRef ref = currStub.getRef();
				try {
					java.rmi.server.RemoteCall call = ref.newCall(currStub, operations, 14, interfaceHash);
					callClientInterceptors(call);
					try {
						java.io.ObjectOutput out = call.getOutputStream();
						out.writeObject(param_1);
						out.writeObject(param_2);
						ref.invoke(call);
					} catch(Exception ex) {
						 setException(ex);
						 throw ex;
					}
					callAfterClientInterceptors(call);
					try {
						java.io.ObjectInput in = call.getInputStream();
						result = (javax.management.AttributeList) in.readObject();
					} catch (java.io.IOException e) {
						throw new java.rmi.UnmarshalException("error unmarshalling return", e);
					} catch (java.lang.ClassNotFoundException e) {
						throw new java.rmi.UnmarshalException("error unmarshalling return", e);
					} finally {
						ref.done(call);
					}
					
					return result;
				} catch(java.rmi.RemoteException ex) {
					if(clusterSupport != null) {
						clusterSupport.handleException(ex, currExportName, false);
					} else {
						throw ex;
					}
				}
				
			}
		} catch (java.rmi.ServerException e) {
			if(e.detail != null && e.detail instanceof java.rmi.RemoteException)
				throw (java.rmi.RemoteException)e.detail;
			else
			throw e;
		} catch (java.lang.RuntimeException e) {
			throw e;
		} catch (java.rmi.RemoteException e) {
			throw e;
		} catch (javax.management.InstanceNotFoundException e) {
			throw e;
		} catch (javax.management.ReflectionException e) {
			throw e;
		} catch (java.lang.Exception e) {
			throw new java.rmi.UnexpectedException("undeclared checked exception", e);
		}
	}
	
	// implementation of java.lang.Object getAttribute(javax.management.ObjectName, java.lang.String)
	public java.lang.Object getAttribute(javax.management.ObjectName param_1, java.lang.String param_2)
		throws javax.management.MBeanException, javax.management.AttributeNotFoundException, javax.management.InstanceNotFoundException, javax.management.ReflectionException, java.rmi.RemoteException
	{
		java.lang.Object result;
		try {
			String currExportName = null;
			java.rmi.server.RemoteObject currStub = this;
			
			while(true) {
				if(clusterSupport != null) //clustered
				{
					synchronized(clusterSupport) {
					currExportName = clusterSupport.getExportName();
					currStub = (java.rmi.server.RemoteObject) clusterSupport.getStub();
					}
				}
				
				java.rmi.server.RemoteRef ref = currStub.getRef();
				try {
					java.rmi.server.RemoteCall call = ref.newCall(currStub, operations, 15, interfaceHash);
					callClientInterceptors(call);
					try {
						java.io.ObjectOutput out = call.getOutputStream();
						out.writeObject(param_1);
						out.writeObject(param_2);
						ref.invoke(call);
					} catch(Exception ex) {
						 setException(ex);
						 throw ex;
					}
					callAfterClientInterceptors(call);
					try {
						java.io.ObjectInput in = call.getInputStream();
						result = (java.lang.Object) in.readObject();
					} catch (java.io.IOException e) {
						throw new java.rmi.UnmarshalException("error unmarshalling return", e);
					} catch (java.lang.ClassNotFoundException e) {
						throw new java.rmi.UnmarshalException("error unmarshalling return", e);
					} finally {
						ref.done(call);
					}
					
					return result;
				} catch(java.rmi.RemoteException ex) {
					if(clusterSupport != null) {
						clusterSupport.handleException(ex, currExportName, false);
					} else {
						throw ex;
					}
				}
				
			}
		} catch (java.rmi.ServerException e) {
			if(e.detail != null && e.detail instanceof java.rmi.RemoteException)
				throw (java.rmi.RemoteException)e.detail;
			else
			throw e;
		} catch (java.lang.RuntimeException e) {
			throw e;
		} catch (java.rmi.RemoteException e) {
			throw e;
		} catch (javax.management.MBeanException e) {
			throw e;
		} catch (javax.management.AttributeNotFoundException e) {
			throw e;
		} catch (javax.management.InstanceNotFoundException e) {
			throw e;
		} catch (javax.management.ReflectionException e) {
			throw e;
		} catch (java.lang.Exception e) {
			throw new java.rmi.UnexpectedException("undeclared checked exception", e);
		}
	}
}
