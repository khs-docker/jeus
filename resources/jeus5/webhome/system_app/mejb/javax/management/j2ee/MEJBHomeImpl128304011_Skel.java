// This is generated by JEUS RMI Compiler.
// Do not edit any part of this.
package javax.management.j2ee;

import jeus.util.*;
import java.util.logging.Level;
import java.rmi.RemoteException;

public final class MEJBHomeImpl128304011_Skel
	extends jeus.ejb.bean.rmi.RMISkeleton
{
	private static final java.rmi.server.Operation[] operations = {
		new java.rmi.server.Operation("void remove(javax.ejb.Handle)"),
		new java.rmi.server.Operation("void remove(java.lang.Object)"),
		new java.rmi.server.Operation("javax.ejb.HomeHandle getHomeHandle()"),
		new java.rmi.server.Operation("javax.ejb.EJBMetaData getEJBMetaData()"),
		new java.rmi.server.Operation("javax.management.j2ee.Management create()")
	};
	
	public static final long interfaceHash = 902925309182443153L;
	
	public MEJBHomeImpl128304011_Skel() {
	}
	
	public java.rmi.server.Operation[] getOperations() {
		return (java.rmi.server.Operation[]) operations.clone();
	}
	
	public void dispatch(java.rmi.Remote  obj, java.rmi.server.RemoteCall call, int opnum, long hash)
		throws java.lang.Exception
	{
		if (hash != interfaceHash)
			throw new java.rmi.server.SkeletonMismatchException("interface hash mismatch");
		
		javax.management.j2ee.MEJBHomeImpl128304011 server = (javax.management.j2ee.MEJBHomeImpl128304011) obj;
		if (server instanceof jeus.ejb.bean.rmi.RMIInterceptorProvider) {
			setServerInterceptor((jeus.ejb.bean.rmi.RMIInterceptorProvider) server);
		}
		try {
			switch (opnum) {
				case 0: // void remove(javax.ejb.Handle)
				{
					javax.ejb.Handle param_1;
					try {
						try {
							callServerInterceptor(call);
							java.io.ObjectInput in = call.getInputStream();
							param_1 = (javax.ejb.Handle) in.readObject();
						} catch (java.lang.Exception e) {
							throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
						} finally {
							call.releaseInputStream();
						}
						java.io.ObjectOutput out;
						try {
							server.remove(param_1);
						} catch(Exception e) {
						try {
								exceptionOccurred(e);
						} catch (Throwable ex) {
							if (ex instanceof Exception)
								throw (Exception) ex;
							else
								throw (Error) ex;
						}
						
							throw e;
						}
						try {
							out = callAfterServerInterceptor(call);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
					} finally {
						handleFinally();
					}
					break;
				}
				case 1: // void remove(java.lang.Object)
				{
					java.lang.Object param_1;
					try {
						try {
							callServerInterceptor(call);
							java.io.ObjectInput in = call.getInputStream();
							param_1 = (java.lang.Object) in.readObject();
						} catch (java.lang.Exception e) {
							throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
						} finally {
							call.releaseInputStream();
						}
						java.io.ObjectOutput out;
						try {
							server.remove(param_1);
						} catch(Exception e) {
						try {
								exceptionOccurred(e);
						} catch (Throwable ex) {
							if (ex instanceof Exception)
								throw (Exception) ex;
							else
								throw (Error) ex;
						}
						
							throw e;
						}
						try {
							out = callAfterServerInterceptor(call);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
					} finally {
						handleFinally();
					}
					break;
				}
				case 2: // javax.ejb.HomeHandle getHomeHandle()
				{
					try {
						try {
							callServerInterceptor(call);
							java.io.ObjectInput in = call.getInputStream();
						} catch (java.lang.Exception e) {
							throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
						} finally {
							call.releaseInputStream();
						}
						java.io.ObjectOutput out;
						javax.ejb.HomeHandle result;
						try {
							result = server.getHomeHandle();
						} catch(Exception e) {
						try {
								exceptionOccurred(e);
						} catch (Throwable ex) {
							if (ex instanceof Exception)
								throw (Exception) ex;
							else
								throw (Error) ex;
						}
						
							throw e;
						}
						try {
							out = callAfterServerInterceptor(call);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
						try {
							out.writeObject(result);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
					} finally {
						handleFinally();
					}
					break;
				}
				case 3: // javax.ejb.EJBMetaData getEJBMetaData()
				{
					try {
						try {
							callServerInterceptor(call);
							java.io.ObjectInput in = call.getInputStream();
						} catch (java.lang.Exception e) {
							throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
						} finally {
							call.releaseInputStream();
						}
						java.io.ObjectOutput out;
						javax.ejb.EJBMetaData result;
						try {
							result = server.getEJBMetaData();
						} catch(Exception e) {
						try {
								exceptionOccurred(e);
						} catch (Throwable ex) {
							if (ex instanceof Exception)
								throw (Exception) ex;
							else
								throw (Error) ex;
						}
						
							throw e;
						}
						try {
							out = callAfterServerInterceptor(call);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
						try {
							out.writeObject(result);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
					} finally {
						handleFinally();
					}
					break;
				}
				case 4: // javax.management.j2ee.Management create()
				{
					try {
						try {
							callServerInterceptor(call);
							java.io.ObjectInput in = call.getInputStream();
						} catch (java.lang.Exception e) {
							throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
						} finally {
							call.releaseInputStream();
						}
						java.io.ObjectOutput out;
						javax.management.j2ee.Management result;
						try {
							result = server.create();
						} catch(Exception e) {
						try {
								exceptionOccurred(e);
						} catch (Throwable ex) {
							if (ex instanceof Exception)
								throw (Exception) ex;
							else
								throw (Error) ex;
						}
						
							throw e;
						}
						try {
							out = callAfterServerInterceptor(call);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
						try {
							out.writeObject(result);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
					} finally {
						handleFinally();
					}
					break;
				}
			default:
				throw new java.rmi.UnmarshalException("invalid method number");
			}
		} catch (RuntimeException t) {
			if( !(t instanceof javax.ejb.EJBException) )
				logger.log(Level.WARNING, "a problem in dispatch()",t);
			throw t;
		}
	}
	
}
