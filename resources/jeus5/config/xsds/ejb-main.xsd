<?xml version="1.0" encoding="EUC-KR"?>
<xs:schema
    xmlns="http://www.tmaxsoft.com/xml/ns/jeus"
    targetNamespace="http://www.tmaxsoft.com/xml/ns/jeus"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    elementFormDefault="qualified"
    attributeFormDefault="unqualified"
    version="5.0">

    <xs:include schemaLocation="jeus-common.xsd"/>

    <xs:element name="ejb-engine" type="ejb-engineType">
        <xs:annotation>
            <xs:documentation><![CDATA[
                [Description]: 이것은 EJBMain.xml에서 EJB 엔진 설정부분의 최상위 element이다.
                이 element와 그 하위 element는 정확히 하나의 EJB 엔진에 대응한다.
                [Description]:[en] This is the root element of EJBMain.xml.
                [Example]: <ejb-engine> ... </ejb-engine>
            ]]></xs:documentation>
        </xs:annotation>
    </xs:element>

    <xs:complexType name="ejb-engineType">
        <xs:sequence>
            <xs:element minOccurs="0" name="resolution" type="nonNegativeLongType" default="300000">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                      [Description]: EJB 의 비활성화와 Garbage Collection은 이 element에서 정의된 시간 간격으로 시도된다.
                      EJB 엔진에서 서비스 중인 어떤 빈이 클라이언트로부터 더 이상의 요청이 없을 때
                      EJB 엔진은 이 빈을 비활성화 한다. 이 작업의 수행 주기를 설정한다.
                      [Value Description]: millisecond
                      [Example]: <resolution>100000</resolution>
                    ]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>

            <xs:element minOccurs="0" name="enable-user-notify" type="xs:boolean" default="false">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                      [Description]: 이 특성이 활성화된다면 EJB exception 은 JEUSMain.xml 의 엔진 컨테이너에 정의된 user log에 기록된다.
                      [Example]: <enable-user-notify>true</enable-user-notify>
                    ]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>

            <xs:element minOccurs="0" name="active-management" type="active-managementType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                      [Description]: EJB 엔진을 모니터링하고 오류를 처리하며 그 결과를 전자우편을 통해 관리자에게 통지한다.
                      [Value Description]: millisecond
                      [Example]: <resolution>100000</resolution>
                      [Performace Recommendation]: 일반적으로 사용자는 EJBMain.xml의 active-management 보다는 Servlet 엔진에 포함된
                      active-management 을 사용한다( JEUS 웹서버 가이드 참조 ).
                    ]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <default-element>true</default-element>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>

            <xs:element minOccurs="0" name="invoke-http" type="invoke-httpType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                      [Description]: 이 기능을 설정하면 클라이언트 측의 EJB stub 과 원격지의 RMI 실행환경은
		      HTTP-RMI 요청 ( Request )으로 통신한다.  이것은 방화벽을 사이에 두고 EJB에 접근할 때 
		      사용된다. 이 모드( HTTP 호출 모드 )를 사용할 때 클라이언트가  EJB stub에서 메소드를 
		      호출하면 HTTP-RMI 요청 ( Request )은 이것을 웹 컨테이너로 보낼 웹서버로 발송된다. 
		      그리고  이것은 RMI Handler Servlet (jeus. rmi.http.ServletHandler )으로 보내지고 여기서 
		      Handler Servlet은 요청( Request )으로부터 HTTP 헤더를 제거한 뒤 이것을 RMI 실행환경으로 
		      전송한다. 이 element가 설정되기 앞서  jeus.rmi.http. ServletHandler Servlet은 반드시
		      JEUS 웹 컨테이너에 Deploy되어 있어야만 한다( JEUS 웹 가이드를 참고한다. ).
		      [Performance Recommendation]: HTTP 호출 모드를 사용함으로써 약간의 성능 향상을 기대할 수 있다.
                    ]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>

            <xs:element minOccurs="0" name="timer-service" type="timer-serviceType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                      [Description]: 이 EJB engine이 제공하는 Timer service에 대한 설정을 한다.Timer Service를
                      persistence하게 관리하려면 이 설정이 있어야 한다.
                    ]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <default-element>true</default-element>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="active-managementType">
        <xs:sequence>
            <xs:element minOccurs="0" name="max-blocked-thread" type="off-intType" default="-1">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                      [Description]: 이 element는 블럭된 thread의 최대 개수를 설정한다. 이 설정 값 보다 EJB에 block 된 Thread 개수가
                      많을 경우에 Container를 restart 시킨다. 이 값이 작게 설정 되어 있다면 EJB 엔진이 너무 자주 재시작될 수도 있기
                      때문에 주의가 필요하다.
                      [Value Description]: thread 개수
                      [Defined Value]:
                        [-1]:
                        이 값은 블럭된 thread 개수에 대한 제한이 없음을 의미한다. 즉 이렇게 설정하면 EJB 엔진은 절대로 블럭된
                        thread 때문에 재시작 되지는 않는다.
                      [Example]: <max-blocked-thread>200</max-blocked-thread>
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element minOccurs="0" name="max-idle-time" type="nonNegativeLongType" default="300000">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                      [Description]: 이 element는 EJB thread가 블럭되었다고 간주되는 상태를 정의한다. 이 element의 값은 시간을 의미하며
                      만약 어떤 thread가 이 시간을 초과되도록 idle 상태를 유지한다면 이 thread는 블럭되었다고 간주된다.
                      [Value Description]: millisecond
                      [Example]: <max-idle-time>180000</max-idle-time>
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element minOccurs="0" name="email-notify" type="smtp-senderType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                      [Description]: active management나 혹은 다른 비정상적인 상태에 의해서 엔진이 재시작 한다면 이 element에서 정의된 곳으로 전자 메일을 보내서 상황을 알린다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="timer-serviceType">
        <xs:sequence>
            <xs:element minOccurs="0" name="min-delivery-interval" type="nonNegativeLongType" default="7000">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: 이 값은 특정 timer가 생성된 후에 timer event가 발생하기까지의 최소 시간이다.
                    [Value Description]: millisecond 단위
                    [Performance Recommendation]: 이 값이 작을수록 EJB 엔진에 부하를 줄 수 있으므로 사용하는
                    timer의 interval에 맞게 크게 설정하면 좋다. 
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="max-redelivery-count" type="nonNegativeIntType" default="1">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: 이 값은 timer callback 함수에서 exception이 발생하거나 transaction이 rollback되어
                    재전송이 발생하는 상황에서 최대 재전송 횟수를 나타낸다.
                    [Value Description]: 재전송 횟수
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="redelivery-interval" type="nonNegativeLongType" default="4000">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: 이 값은 재전송을 해야 할 상황이 발생했을 때부터 재전송하기까지의 시간이다.
                    [Value Description]: millisecond 단위이다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="thread-pool" type="poolingType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: Timer service가 timeout() method를 실행할때 사용하는 thread pool에 대한 설정이다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="durable-setting" type="durable-settingType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: Timer service가 timer들을 persistence하게 관리하기 위해 필요한 설정이다.
                    이 설정을 하지 않으면 timer가 persistence하게 관리되지 않는다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="durable-settingType">
        <xs:sequence>
            <xs:element name="db-vendor" type="db-vendorType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: Timer service가 persistence를 위해 사용하는 DB의 vendor 설정이다.값은
                    jeus-ejb-dd.xml의 <schema-info>의 <db-vendor>와 같다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="data-source-name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: Timer service가 persistence를 위해 사용하는 DB의 datasource의 export name 설정이다.
                    값은 jeus-ejb-dd.xml의 <schema-info>의 <data-source-name>와 같다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="engine-type" type="engineType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: Timer service가 DB에 접근하는 방식을 설정한다.
                    값은 jeus-ejb-dd.xml의 <persistence-optimize>의 <engine-type>와 같다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="table-name" type="xs:token" default="Jeus_Timer">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: Timer service가 사용하는 DB의 Table 이름을 설정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

</xs:schema>

