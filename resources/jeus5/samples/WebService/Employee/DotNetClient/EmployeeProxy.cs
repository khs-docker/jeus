//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version:2.0.40607.16
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=2.0.40607.16.
// 


/// <remarks/>
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="EmployeeServiceIFSoapBinding", Namespace="urn:EmployeeService")]
public class EmployeeService : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback addEmployeeOperationCompleted;
    
    private System.Threading.SendOrPostCallback modifyEmployeeOperationCompleted;
    
    private System.Threading.SendOrPostCallback removeEmployeeOperationCompleted;
    
    private System.Threading.SendOrPostCallback findEmployeeOperationCompleted;
    
    private System.Threading.SendOrPostCallback findEmployeesOperationCompleted;
    
    /// <remarks/>
    public EmployeeService(string url) {
        //this.Url = "http://192.168.1.223:9988/Employee/EmployeeService";
		this.Url = url;
	}

	protected override System.Net.WebRequest GetWebRequest(Uri uri)
	{
		System.Net.HttpWebRequest webRequest = (System.Net.HttpWebRequest)base.GetWebRequest(uri);

		webRequest.KeepAlive = false;
		webRequest.ProtocolVersion = System.Net.HttpVersion.Version10;
		return webRequest;
	}

	/// <remarks/>
    public event addEmployeeCompletedEventHandler addEmployeeCompleted;
    
    /// <remarks/>
    public event modifyEmployeeCompletedEventHandler modifyEmployeeCompleted;
    
    /// <remarks/>
    public event removeEmployeeCompletedEventHandler removeEmployeeCompleted;
    
    /// <remarks/>
    public event findEmployeeCompletedEventHandler findEmployeeCompleted;
    
    /// <remarks/>
    public event findEmployeesCompletedEventHandler findEmployeesCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("empAction", RequestNamespace="urn:EmployeeService", ResponseNamespace="urn:EmployeeService", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void addEmployee(Employee in0) {
        this.Invoke("addEmployee", new object[] {
                    in0});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginaddEmployee(Employee in0, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("addEmployee", new object[] {
                    in0}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndaddEmployee(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void addEmployeeAsync(Employee in0) {
        this.addEmployeeAsync(in0, null);
    }
    
    /// <remarks/>
    public void addEmployeeAsync(Employee in0, object userState) {
        if ((this.addEmployeeOperationCompleted == null)) {
            this.addEmployeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddEmployeeOperationCompleted);
        }
        this.InvokeAsync("addEmployee", new object[] {
                    in0}, this.addEmployeeOperationCompleted, userState);
    }
    
    private void OnaddEmployeeOperationCompleted(object arg) {
        if ((this.addEmployeeCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.addEmployeeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("empAction", RequestNamespace="urn:EmployeeService", ResponseNamespace="urn:EmployeeService", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void modifyEmployee(Employee in0) {
        this.Invoke("modifyEmployee", new object[] {
                    in0});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginmodifyEmployee(Employee in0, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("modifyEmployee", new object[] {
                    in0}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndmodifyEmployee(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void modifyEmployeeAsync(Employee in0) {
        this.modifyEmployeeAsync(in0, null);
    }
    
    /// <remarks/>
    public void modifyEmployeeAsync(Employee in0, object userState) {
        if ((this.modifyEmployeeOperationCompleted == null)) {
            this.modifyEmployeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmodifyEmployeeOperationCompleted);
        }
        this.InvokeAsync("modifyEmployee", new object[] {
                    in0}, this.modifyEmployeeOperationCompleted, userState);
    }
    
    private void OnmodifyEmployeeOperationCompleted(object arg) {
        if ((this.modifyEmployeeCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.modifyEmployeeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("empAction", RequestNamespace="urn:EmployeeService", ResponseNamespace="urn:EmployeeService", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public void removeEmployee(string in0) {
        this.Invoke("removeEmployee", new object[] {
                    in0});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginremoveEmployee(string in0, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("removeEmployee", new object[] {
                    in0}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndremoveEmployee(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void removeEmployeeAsync(string in0) {
        this.removeEmployeeAsync(in0, null);
    }
    
    /// <remarks/>
    public void removeEmployeeAsync(string in0, object userState) {
        if ((this.removeEmployeeOperationCompleted == null)) {
            this.removeEmployeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveEmployeeOperationCompleted);
        }
        this.InvokeAsync("removeEmployee", new object[] {
                    in0}, this.removeEmployeeOperationCompleted, userState);
    }
    
    private void OnremoveEmployeeOperationCompleted(object arg) {
        if ((this.removeEmployeeCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.removeEmployeeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("empAction", RequestNamespace="urn:EmployeeService", ResponseNamespace="urn:EmployeeService", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("findEmployeeReturn")]
    public Employee findEmployee(string in0) {
        object[] results = this.Invoke("findEmployee", new object[] {
                    in0});
        return ((Employee)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginfindEmployee(string in0, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("findEmployee", new object[] {
                    in0}, callback, asyncState);
    }
    
    /// <remarks/>
    public Employee EndfindEmployee(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Employee)(results[0]));
    }
    
    /// <remarks/>
    public void findEmployeeAsync(string in0) {
        this.findEmployeeAsync(in0, null);
    }
    
    /// <remarks/>
    public void findEmployeeAsync(string in0, object userState) {
        if ((this.findEmployeeOperationCompleted == null)) {
            this.findEmployeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfindEmployeeOperationCompleted);
        }
        this.InvokeAsync("findEmployee", new object[] {
                    in0}, this.findEmployeeOperationCompleted, userState);
    }
    
    private void OnfindEmployeeOperationCompleted(object arg) {
        if ((this.findEmployeeCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.findEmployeeCompleted(this, new findEmployeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("empAction", RequestNamespace="urn:EmployeeService", ResponseNamespace="urn:EmployeeService", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlArrayAttribute("findEmployeesReturn")]
    [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Namespace="urn:EmployeeService", IsNullable=false)]
    public Employee[] findEmployees() {
        object[] results = this.Invoke("findEmployees", new object[0]);
        return ((Employee[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginfindEmployees(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("findEmployees", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public Employee[] EndfindEmployees(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Employee[])(results[0]));
    }
    
    /// <remarks/>
    public void findEmployeesAsync() {
        this.findEmployeesAsync(null);
    }
    
    /// <remarks/>
    public void findEmployeesAsync(object userState) {
        if ((this.findEmployeesOperationCompleted == null)) {
            this.findEmployeesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfindEmployeesOperationCompleted);
        }
        this.InvokeAsync("findEmployees", new object[0], this.findEmployeesOperationCompleted, userState);
    }
    
    private void OnfindEmployeesOperationCompleted(object arg) {
        if ((this.findEmployeesCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.findEmployeesCompleted(this, new findEmployeesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:EmployeeService")]
public class Employee {
    
    private string commissionField;
    
    private string deptNoField;
    
    private string empNoField;
    
    private string hireDateField;
    
    private string jobField;
    
    private string managerField;
    
    private string nameField;
    
    private string salaryField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string commission {
        get {
            return this.commissionField;
        }
        set {
            this.commissionField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string deptNo {
        get {
            return this.deptNoField;
        }
        set {
            this.deptNoField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string empNo {
        get {
            return this.empNoField;
        }
        set {
            this.empNoField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string hireDate {
        get {
            return this.hireDateField;
        }
        set {
            this.hireDateField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string job {
        get {
            return this.jobField;
        }
        set {
            this.jobField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string manager {
        get {
            return this.managerField;
        }
        set {
            this.managerField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string salary {
        get {
            return this.salaryField;
        }
        set {
            this.salaryField = value;
        }
    }
}

/// <remarks/>
public delegate void addEmployeeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

/// <remarks/>
public delegate void modifyEmployeeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

/// <remarks/>
public delegate void removeEmployeeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);

/// <remarks/>
public delegate void findEmployeeCompletedEventHandler(object sender, findEmployeeCompletedEventArgs args);

/// <remarks/>
public class findEmployeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal findEmployeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public Employee Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((Employee)(this.results[0]));
        }
    }
}

/// <remarks/>
public delegate void findEmployeesCompletedEventHandler(object sender, findEmployeesCompletedEventArgs args);

/// <remarks/>
public class findEmployeesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal findEmployeesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public Employee[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((Employee[])(this.results[0]));
        }
    }
}
