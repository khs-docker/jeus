<?xml version="1.0" encoding="GB2312"?>
<xs:schema 
    attributeFormDefault="unqualified" 
    elementFormDefault="qualified" 
    targetNamespace="http://www.tmaxsoft.com/xml/ns/jeus" version="5.0" 
    xmlns="http://www.tmaxsoft.com/xml/ns/jeus" 
    xmlns:xs="http://www.w3.org/2001/XMLSchema">      
    <xs:include schemaLocation="jeus-common.xsd"/>      
    <xs:element name="ejb-engine" type="ejb-engineType">         
        <xs:annotation>             
            <xs:documentation><![CDATA[
                [Description]: 这是EJBMain.xml中EJB引擎设置部分的最上级 element。
                该element与其下属element应对一个EJB引擎。
                [Description]:[en] This is the root element of EJBMain.xml.
                [Example]: <ejb-engine> ... </ejb-engine>
            ]]>
            </xs:documentation>         
        </xs:annotation>     
    </xs:element>      
    <xs:complexType name="ejb-engineType">         
        <xs:sequence>             
            <xs:element default="300000" minOccurs="0" name="resolution" type="nonNegativeLongType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                      [Description]: EJB的非激活状态与Garbage Collection根据该element中定义的时间间距进行操作。
                      在EJB引擎中正在服务的某个Bean，从客户端不再发生请求时， 
                      EJB引擎对该Bean进行非激活操作。设置该操作的运行周期。
                      [Value Description]: millisecond
                      [Example]: <resolution>100000</resolution>
                    ]]>
                    </xs:documentation>                     
                    <xs:appinfo>                         <metadata>                             <element-level>ADVANCED</element-level>                         </metadata>                     
                    </xs:appinfo>                 
                </xs:annotation>             
            </xs:element>              
            <xs:element default="false" minOccurs="0" name="enable-user-notify" type="xs:boolean">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                      [Description]: 该特性被激活时，EJB exception被记录到 JEUSMain.xml的引擎container 中定义的用户日志中。
                      [Example]: <enable-user-notify>true</enable-user-notify>
                    ]]>
                    </xs:documentation>                     
                    <xs:appinfo>                         <metadata>                             <element-level>ADVANCED</element-level>                         </metadata>                     
                    </xs:appinfo>                 
                </xs:annotation>             
            </xs:element>              
            <xs:element minOccurs="0" name="active-management" type="active-managementType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                      [Description]: 对EJB引擎进行监控，对错误进行处理，并通过电子邮件方式向管理员通知其结果。
                      [Value Description]: millisecond
                      [Example]: <resolution>100000</resolution>
                      [Performace Recommendation]:与EJBMain.xml的 active-management相比，用户一般使用Servlet引擎中的
                      active-management ( 参照JEUS Web server指南)。
                    ]]>
                    </xs:documentation>                     
                    <xs:appinfo>                         <metadata>                             <default-element>true</default-element>                         </metadata>                     
                    </xs:appinfo>                 
                </xs:annotation>             
            </xs:element>              
            <xs:element minOccurs="0" name="invoke-http" type="invoke-httpType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                      [Description]:设置了该功能，客户端的EJB stub与远程的RMI运行环境根据HTTP-RMI请求( Request )进行通信。此功能主要是隔着防火墙连接EJB时使用。使用该模式( HTTP呼叫模式)时，客户端从EJB stub呼叫method，HTTP-RMI请求 ( Request )将其发送给Web container的Web server。
		      之后其被传输到RMI Handler Servlet (jeus. rmi.http.ServletHandler )，Handler Servlet在此从请求( Request )解除HTTP header 后再将其传输到RMI运行环境。在设置 element之前，jeus.rmi.http. ServletHandler Servlet应必须配置于JEUS Web container。(请参考 JEUS Web指南)
		      [Performance Recommendation]: 使用HTTP呼叫模式，可提高性能。
                    ]]>
                    </xs:documentation>                     
                    <xs:appinfo>                         <metadata>                             <element-level>ADVANCED</element-level>                         </metadata>                     
                    </xs:appinfo>                 
                </xs:annotation>             
            </xs:element>              
            <xs:element minOccurs="0" name="timer-service" type="timer-serviceType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                      [Description]: 对该EJB engine提供的Timer service进行设置。若想对Timer Service进行持续管理，必须设置该项内容。
                    ]]>
                    </xs:documentation>                     
                    <xs:appinfo>                         <metadata>                             <default-element>true</default-element>                             <element-level>ADVANCED</element-level>                         </metadata>                     
                    </xs:appinfo>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="active-managementType">         
        <xs:sequence>             
            <xs:element default="-1" minOccurs="0" name="max-blocked-thread" type="off-intType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                      [Description]: 该element设置Block的thread最多数量。若该EJB的block的Thread数量大于该设置时，重新启动Container。应注意的是，若该值过于小，EJB引擎频繁重启。
                      [Value Description]: thread 数量
                      [Defined Value]:
                        [-1]:
                        表示对该值的block thread数量没有限制。即，EJB引擎绝对不会因为block的thread而重启。
                      [Example]: <max-blocked-thread>200</max-blocked-thread>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>              
            <xs:element default="300000" minOccurs="0" name="max-idle-time" type="nonNegativeLongType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                      [Description]: 该element对判断为EJB thread被block的状态进行定义。该element的值表示时间，如果某种thread超过该时间的idle状态，该thread认为被block。
                      [Value Description]: millisecond
                      [Example]: <max-idle-time>180000</max-idle-time>
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>              
            <xs:element minOccurs="0" name="email-notify" type="smtp-senderType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                      [Description]: 如果由于active management或其他非正常状态，引擎重启时，向element定义的地方发送邮件通知状况。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>          
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="timer-serviceType">         
        <xs:sequence>             
            <xs:element default="7000" minOccurs="0" name="min-delivery-interval" type="nonNegativeLongType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                    [Description]: 该值是特定timer生成之后，到timer event发生为止的最少时间。
                    [Value Description]: millisecond 单位
                    [Performance Recommendation]: 该值越小，向EJB引擎造成负荷的可能性越大。因此要根据使用的timer interval进行设置。 
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="1" minOccurs="0" name="max-redelivery-count" type="nonNegativeIntType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                    [Description]: 该值表示的是，在timer callback函数中发生exception或transaction被rollback，而发生重新传输的状况时的最大再传输次数。
                    [Value Description]: 再传输次数
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="4000" minOccurs="0" name="redelivery-interval" type="nonNegativeLongType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                    [Description]: 该值是发生再传输状况到再传输为止的时间。
                    [Value Description]: millisecond单位。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="thread-pool" type="poolingType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                    [Description]: 运行Timer service? timeout() method时使用的thread pool有关的设置。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element minOccurs="0" name="durable-setting" type="durable-settingType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                    [Description]: Timer service持续管理timer所需的设置。
                    如果未进行设置，无法持续管理timer。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>      
    <xs:complexType name="durable-settingType">         
        <xs:sequence>             
            <xs:element name="db-vendor" type="db-vendorType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                    [Description]: Timer service为了 persistence而使用的DB的vendor设置。值如jeus-ejb-dd.xml的 <schema-info>的 <db-vendor>。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element name="data-source-name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                    [Description]: Timer service为了persistence而使用的DB的datasource的export name 设置。
                    值如jeus-ejb-dd.xml的 <schema-info>的 <data-source-name>。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element name="engine-type" type="engineType">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                    [Description]: 设置Timer service连接DB的方式。
                    值如jeus-ejb-dd.xml的 <persistence-optimize>的<engine-type>。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>             
            <xs:element default="Jeus_Timer" minOccurs="0" name="table-name" type="xs:token">                 
                <xs:annotation>                     
                    <xs:documentation><![CDATA[
                    [Description]: 设置Timer service使用的DB的Table 名称。
                    ]]>
                    </xs:documentation>                 
                </xs:annotation>             
            </xs:element>         
        </xs:sequence>     
    </xs:complexType>  
</xs:schema>
