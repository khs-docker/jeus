<?xml version="1.0" encoding="EUC-KR"?>
<description>          
    <text key="handlerType.console-handler"><![CDATA[
                      [Description]: logging을 화면에 남기고자 하는 경우에 사용하는 handler이다.
                    ]]>          
    </text>
           
    <text key="handlerType.file-handler"><![CDATA[
                      [Description]: logging을 file로 출력하고자 하는 경우에 사용하는 handler이다.
                    ]]>          
    </text>
           
    <text key="handlerType.smtp-handler"><![CDATA[
                      [Description]: logging을 email로 보내고자 하는 경우에 사용하는 handler이다.
                      [Performance Recommandation]: logging message 하나가 하나의 email로 전송되므로
                      적절한 filter없이 사용하는 것은 엄청난 양의 email을 발생시켜 아주 위험하므로 주의를 요한다.
                    ]]>          
    </text>
           
    <text key="handlerType.socket-handler"><![CDATA[
                      [Description]: logging을 지정된 socket으로 보내고자 하는 경우에 사용하는 handler이다.
                      [Performance Recommandation]: logging message 하나당 Socket으로 전송이 되므로
                      적절한 filter없이 사용하는 것은 성능 저하를 가져온다.
                    ]]>          
    </text>
           
    <text key="handlerType.user-handler"><![CDATA[
                      [Description]: User가 J2SE logging API에 따라 만든 handler를 사용할 경우의 설정이다.
                    ]]>          
    </text>
           
    <text key="common-handlerType.name"><![CDATA[
                      [Description]: 이 handler의 이름을 설정한다. 이때 이 이름은 하나의 logger 내에서만 unique하게
                      설정되면 된다. 이 이름은 tool 등에서 handler를 지칭할 때 사용한다.
                      [Example]: <name>handler1</name>
                    ]]>          
    </text>
           
    <text key="common-handlerType.level"><![CDATA[
                      [Description]: 이 handler의 level을 설정한다. logger를 통과한 message의 level이 이 handler
                      level에 포함될 경우에만 이 handler에 의해 출력된다. (단, Access log 일 경우, INFO 레벨 이상에서는
                      Access Log 를 출력하지 않는다.)
                    ]]>          
    </text>
           
    <text key="common-handlerType.encoding"><![CDATA[
                      [Description]: 이 handler이 message를 남길때 사용할 encoding을 설정한다.
                    ]]>          
    </text>
           
    <text key="common-handlerType.filter-class"><![CDATA[
                        [Description]: 이 handler에 지정할 filer class의 fully qualified class name을 설정한다.
                        [Example]: <filter-class>com.tmax.logging.filter.MyFilter</filter-class>
                    ]]>          
    </text>
      <ref key="console-handlerType">common-handlerType</ref>
           
    <text key="file-handlerType.file-name"><![CDATA[
                        [Description]: 이 handler가 사용할 file name을 설정한다. 만약 user가 이 설정을 하지 않으면
                        각 logger의 default file name이 사용된다. 각각의 default file name은 JEUS Server 매뉴얼을
                        참고하기 바란다.
                        [Example]: <file-name>C:\logs\mylog.log</file-name>
                    ]]>          
    </text>
           
    <text key="file-handlerType.buffer-size"><![CDATA[
                        [Description]: 이 handler가 file에 출력할때 사용하는 buffer의 크기를 지정한다.
                        [Value Description]: byte 단위이다.
                        [Performance Recommandation]: 이 값이 클수록 file에 출력되는 message는 지연되어 출력되지만
                        logging 성능은 좋아진다.
                    ]]>          
    </text>
           
    <text key="file-handlerType.append"><![CDATA[
                        [Description]: 이 handler가 사용하는 file이 이미 존재하는 경우 file 뒤에 덧붙여 쓸지를 결정한다.
                        false로 설정되어 있다면 기존의 file은 제거된다.
                    ]]>          
    </text>
           
    <text key="file-handlerType.valid-day"><![CDATA[
                          [Description]: 이 handler가 사용하는 file을 이 설정에서 지정된 기간동안만 사용하고 계속 갱신할
                          경우에 사용한다. 이 설정은 날짜 단위로 file을 바꿀때 사용한다. 이 경우 handler가 사용하는 file 이름
                          뒤에 file이 사용된 날짜가 자동으로 붙게 된다.
                          [Value Description]: day
                          [Example]: <valid-day>1</valid-day>
                        ]]>          
    </text>
           
    <text key="file-handlerType.valid-hour"><![CDATA[
                          [Description]: 이 handler가 사용하는 file을 이 설정에서 지정된 기간동안만 사용하고 계속 갱신할
                          경우에 사용한다. 이 설정은 시간 단위로 file을 바꿀때 사용한다. 이 경우 handler가 사용하는 file 이름
                          뒤에 file이 사용된 날짜와 시간이 자동으로 붙게 된다.
                          [Value Description]: 시간을 나타내며 24의 약수 + n*24 (n은 0이상의 정수)의 값을 가져야 한다.
                          [Example]: <valid-hour>3</valid-hour>
                        ]]>          
    </text>
      <ref key="file-handlerType">common-handlerType</ref>
           
    <text key="smtp-handlerType.send-for-all-messages"><![CDATA[
                        [Description]: 이 handler가 등록한 logger의 log() method를 통해 들어온 message들이 이
                        handler로 들어왔을때 이를 email로 보낼 대상으로 여길지를 설정한다. 만약 false로 설정되어
                        있으면 logger의 특별한 send() method로 호출된 message들만 email로 전송된다.
                        즉, 처음부터 email로 보낼 의도로 지정된 message들만 email로 전송된다.
                    ]]>          
    </text>
      <ref key="smtp-handlerType">smtp-propertyGroup</ref>
      <ref key="smtp-handlerType">common-handlerType</ref>
      <ref key="smtp-senderType">smtp-propertyGroup</ref>
           
    <text key="socket-handlerType.address"><![CDATA[
                        [Description]: 이 handler가 생성될때 message들을 보낼 곳의 IP address를 설정한다.
                    ]]>          
    </text>
           
    <text key="socket-handlerType.port"><![CDATA[
                        [Description]: 이 handler가 생성될때 message들을 보낼 곳의 port를 설정한다.
                    ]]>          
    </text>
      <ref key="socket-handlerType">common-handlerType</ref>
           
    <text key="user-handlerType.handler-class"><![CDATA[
                        [Description]: user가 만든 handler의 fully qualified class name을 설정한다.이 클래스는
                        java.util.logging.Handler를 상속받고 jeus.util.logging.JeusHandler를 구현해야 한다.
                        [Example]: <handler-class>com.tmax.logging.handler.MyHandler</handler-class>
                    ]]>          
    </text>
           
    <text key="user-handlerType.handler-property"><![CDATA[
                        [Description]: handler가 생성될 때 넘겨줄 property를 설정한다. 이 property들은
                        key-value로 Map 객체에 저장되어 JeusHandler.setProperty() method를 통해 handler로
                        전달된다.
                    ]]>          
    </text>
           
    <text key="user-handlerType.formatter-class"><![CDATA[
                        [Description]: 이 handler가 사용할 formatter의 fully qualified class name을 설정한다.이 클래스는
                        java.util.logging.Formatter를 상속받고 jeus.util.logging.JeusFormatter를 구현해야 한다.
                        [Example]: <formatter-class>com.tmax.logging.handler.MyHandler</formatter-class>
                    ]]>          
    </text>
           
    <text key="user-handlerType.formatter-property"><![CDATA[
                        [Description]: handler가 생성될 때 만들어진 formatter에게 넘겨줄 property를 설정한다.
                        이 property들은 key-value로 Map 객체에 저장되어 JeusFormatter.setProperty() method를 통해
                        formatter로 전달된다.
                    ]]>          
    </text>
      <ref key="user-handlerType">common-handlerType</ref>
           
    <text key="handlerPropertySetType.property"><![CDATA[
                        [Description]: handler 등에게 전달할 property들을 설정한다.
                    ]]>          
    </text>
           
    <text key="propertyType.key"><![CDATA[
                        [Description]: property의 key값이다.
                    ]]>          
    </text>
           
    <text key="propertyType.value"><![CDATA[
                        [Description]: property의 value값이다.
                    ]]>          
    </text>
           
    <text key="securityPermissionType.description"><![CDATA[
                  [Description]: 이 security permission 설정에 대한 설명을 적을 수 있다.
                    ]]>          
    </text>
           
    <text key="securityPermissionType.security-permission-spec"><![CDATA[
                  [Description]: security permission을 기술한다. 형식은 Java policy file을 따른다.
                  [Example]: grant {
                                permission java.lang.RuntimePermission "foo";
                            }
                    ]]>          
    </text>
           
    <text key="rolePermissionType.principal"><![CDATA[
                        [Description]: role에 해당하는 user principal을 지정한다.
                        [Value Description]: security의 accounts.xml에서 지정되어 있는 principal 이름
                    ]]>          
    </text>
           
    <text key="rolePermissionType.role"><![CDATA[
                        [Description]: principal들에게 부여할 role 이름을 지정한다.
                    ]]>          
    </text>
           
    <text key="rolePermissionType.actions"><![CDATA[
                        [Description]: 이 role permission 객체에 대한 action을 정의한다. default로 사용되는
                        role permission은 정해진 action이 없다.
                    ]]>          
    </text>
           
    <text key="rolePermissionType.classname"><![CDATA[
                    [Description]: 사용할 role permission class name을 지정한다. 지정하지 않으면 JEUS에서
                    기본적으로 제공하는 class가 사용된다.
                    ]]>          
    </text>
           
    <text key="rolePermissionType.excluded"><![CDATA[
                        [Description]: role을 사용하지 못하도록 만든다.
                        [Example]: <excluded/>
                    ]]>          
    </text>
           
    <text key="rolePermissionType.unchecked"><![CDATA[
                        [Description]: 아무런 체크없이 role을 사용가능하도록 만든다.
                        [Example]: <unchecked/>
                    ]]>          
    </text>
           
    <text key="poolingType.min"><![CDATA[
                        [Description]: pooling되는 객체의 최소값을 지정한다.
                    ]]>          
    </text>
           
    <text key="poolingType.max"><![CDATA[
                        [Description]: pooling되는 객체의 최대값을 지정한다.
                    ]]>          
    </text>
           
    <text key="poolingType.period"><![CDATA[
                        [Description]: pooling되는 객체를 정리하는 시간을 지정한다.
                        [Performance Recommendation]: 이 값이 클수록 정리하는 주기가 길어져 server 운영에는 부하가
                        적게 가해지나 그만큼 메모리가 누수될 수 있으므로 적당한 값으로 지정한다.
                    ]]>          
    </text>
           
    <text key="oldPoolingType.min"><![CDATA[
                        [Description]: pooling되는 객체의 최소값을 지정한다.
                    ]]>          
    </text>
           
    <text key="oldPoolingType.max"><![CDATA[
                        [Description]: pooling되는 객체의 최대값을 지정한다.
                    ]]>          
    </text>
           
    <text key="oldPoolingType.step"><![CDATA[
                        [Description]: pooling되는 객체가 증가될때의 증가량을 설정한다.
                    ]]>          
    </text>
           
    <text key="oldPoolingType.period"><![CDATA[
                        [Description]: pooling되는 객체를 정리하는 시간을 지정한다.
                        [Performance Recommendation]: 이 값이 클수록 정리하는 주기가 길어져 server 운영에는 부하가
                        적게 가해지나 그만큼 메모리가 누수될 수 있으므로 적당한 값으로 지정한다.
                    ]]>          
    </text>
           
    <text key="methodParamType.method-name"><![CDATA[
                            [Description]: method의 이름을 지정한다.
                            [Example]: foo
                    ]]>          
    </text>
           
    <text key="methodParamType.method-params"><![CDATA[
                            [Description]: method의 parameter들을 순서대로 지정한다.
                    ]]>          
    </text>
           
    <text key="method-paramsType.method-param"><![CDATA[
                            [Description]: method의 parameter의 fully qualified class name을 지정한다.
                            [Example]: java.lang.String
                    ]]>          
    </text>
           
    <text key="jndi-infoType.ref-name"><![CDATA[
                        [Description]: 이 element는 소스코드상에서 사용할 수 있는 참조 이름을 선언할 수 있다.
                        [Value Description]: 실제 JNDI 이름에 bind될 참조 이름. 이것은 해당하는 J2EE 표준 descriptor element의 ref-name에 대응된다.
                        [Example]: <ref-name>ejb/AccountEJB</ref-name>
                    ]]>          
    </text>
           
    <text key="jndi-infoType.export-name"><![CDATA[
                        [Description]: JEUS DD 에 정의된 실제 JNDI 이름.
                        [Example]: <export-name>ACCEJB</export-name>
                    ]]>          
    </text>
           
    <text key="envType.type"><![CDATA[
                        [Description]: 환경 변수의 자바 타입.
                        [Value Description]: 다음의 자바 타입 중 하나를 선택해야 한다. java.lang.Boolean,
                        java.lang.String, java.lang.Integer, java.lang.Double, java.lang.Byte, java.lang.Short,
                        java.lang.Long, java.lang.Float, java.lang.Character.
                        [Example]: <type>java.lang.Integer</type>
                    ]]>          
    </text>
           
    <text key="envType.name"><![CDATA[
                        [Description]: 코드에서 사용하는 환경 변수의 이름.
                        [Example]: <name>minAmount</name>
                    ]]>          
    </text>
           
    <text key="envType.value"><![CDATA[
                        [Description]: 이 값은 대응하는 wrapper 클래스 생성자의 파라미터로서 사용 된다.
                        [Example]: <value>100</value>
                    ]]>          
    </text>
           
    <text key="jndi-refType.jndi-info"><![CDATA[
                        [Description]: 이 element는 코드에서 사용하는 EJB 참조를 실제 EJB JNDI 이름으로 bind한다.
                        예를 들면 실제 JNDI 이름이 "ACCEJB"인 account EJB를 코드상에서
                        "ejb/account"으로 lookup 할 수 있다.
                    ]]>          
    </text>
           
    <text key="invoke-httpType.url"><![CDATA[
                        [Description]: HTTP-RMI stub에 의해 호출될 RMI Handler Servlet (jeus.rmi.http.ServletHandler)
                        의 URI 경로가 반드시 설정되어야 한다. 이 URL은 프로토콜, 웹 서버 IP, 포트번호를 제외하고 오직
                        Servlet 요청 경로만을 설정해야 한다.  프로토콜은 HTTP, RMI 실행환경과 웹 서버는 같은 IP 주소를
                        가지고 있다고 가정 한다(이것은 웹 서버와 웹 컨테이너는 반드시 HTTP-RMI 요청을 같은 머신에서
                        받는다는 것을 의미한다). 포트번호는 다음에 설명할 element(HTTP-port)에서 설정한다.
                        [Value Description]: RMI Handler Servlet을 명시한 Servlet 컨텍스트 경로
                        [Example]: <url>/mycontext/RMIHandlerServlet</url>
                    ]]>          
    </text>
           
    <text key="invoke-httpType.http-port"><![CDATA[
                        [Description]: HTTP-RMI 요청을 받고 처리할 웹 서버의 포트번호를 설정한다. 이 웹 서버/웹
                        컨테이너에서는 반드시 RMI Handler Servlet이 Deploy되어 있고 이미 실행 중이어야만 한다.
                        [Value Description]: HTTP-RMI stub가 연결할 웹 서버의 포트번호.
                    ]]>          
    </text>
           
    <text key="res-refType.jndi-info"><![CDATA[
                        [Description]: 이 Engine Container의 JNDI에 등록할 각 resource reference의 export name과 reference name을 지정한다.
                    ]]>          
    </text>
      <ref key="system-loggingType">loggingGroup</ref>
      <ref key="user-logType">system-loggingType</ref>
           
    <text key="jsp-engineType.keep-generated"><![CDATA[
                        [Description]: 이 element는 JSP페이지로부터 생성된 자바 소스 파일을 컴파일하여 Servlet클래스 파일을 생성한 이후에 자바 소스 파일의 저장 여부를 결정한다.
                                                디버깅 목적으로 이 파일들은 유용하다.
                        [Value Description]: Boolean값으로 이 설정을 활성화 또는 비활성화 한다.
                        [Value Type Description]: Boolean
                        [Defined Value]: default : true
                                                     true : 자바 소스 파일을 유지한다.
                                                     false : 자바 소스 파일을 삭제한다.
                    ]]>          
    </text>
           
    <text key="jsp-engineType.java-compiler"><![CDATA[
                        [Description]: JSP의 자바 소스를 Servlet 클래스 파일로 컴파일하기 위한 자바 컴파일러를 지정한다.
                                                디폴트설정이 가장 효율적이기 때문에 이 element를 사용하지 않는 것을 권장한다.
                        [Value Description]: 자바 컴파일러를 지정하는 문자열. 컴파일러는 시스템 경로에 반드시 포함되어야만 실행 가능하다.
                        [Defined Value]: default : com.sun.tools.javac
                                                    sun.tools.javac : JDK1.4에서 deprecated 됨. 패키지가 명시되지 않는 클래스를 jsp에서 참조하는 경우에 사용한다.
                                                    javac : 시스템 패스에 포함된 외부 "javac" 컴파일러를 지정한다.
                                                    com.sun.tools.javac: JDK1.4 디폴트 컴파일러. sun.tools.javac 보다 효율적이고 보다 안정적이므로 우선시하는 옵션이다.
                    ]]>          
    </text>
           
    <text key="jsp-engineType.jsp-work-dir"><![CDATA[
                        [Description]: JSP workdir은 Servlet 소스 파일과 클래스파일들이 저장되는 위치다. 개발자 또는 관리자는 디버깅목적으로 해당 디렉토리를 사용할 수 있다.
                                                본  element는 일반적으로 사용할 필요가 없다.
                        [Value Description]: JSP 컴파일을 위해서 사용되는 절대 경로.
                        [Defined Value]: default : %SERVLET_HOME%\jspwork \enginename\GroupDocBase\DocBase
                    ]]>          
    </text>
           
    <text key="jsp-engineType.compile-output-dir"><![CDATA[
                        [Description]: 이 속성을 설정하여 JSP 파일에 의해 생성된 클래스 파일들을 <jsp-work-dir> 디렉토리가 아닌 다른 디렉토리에 둘 수 있다.
                                                이 속성을 설정하지 않으면 클래스 파일들은 jspwork 디렉토리에 위치한다. 본  element는 보통 사용되지 않는다.
                        [Value Description]: JSP 클래스 파일들을 저장하는데 사용되는 절대 경로.
                        [Defined Value]: default : %SERVLET_HOME%\jspwork \enginename\GroupDocBase\DocBase
                    ]]>          
    </text>
           
    <text key="jsp-engineType.compile-option"><![CDATA[
                        [Description]: Servlet 컴파일러로 사용되는 옵션으로, 일반적으로는 사용되지 않는다.
                        [Value Description]: 컴파일에 사용되는 적절한 컴파일 옵션(<java-compiler>element를 참조)
                    ]]>          
    </text>
           
    <text key="jsp-engineType.compile-encoding"><![CDATA[
                        [Description]: 본 속성은 JSP파일들이 파싱되어 생성된 Servlet 소스 파일을 compile할 때 ?encoding 옵션에 지정하는 값이다.
                                                본 설정은 좀처럼 사용되지 않는다. Web Container는 적합한 설정을 자동으로 선택한다.
                        [Value Description]: 사용할 인코딩 scheme를 표시하는 문자열. 더 자세한 정보에 대해서는 javac 컴파일러 문서를 참조한다.
                        [Defined Value]: default : Web Container에서 자동으로 선택한다.
                    ]]>          
    </text>
           
    <text key="jsp-engineType.check-included-jspfile"><![CDATA[
                        [Description]: 이 속성이 “true”로 설정되면, “include” directive 방식으로 include된 JSP파일의 변경 여부를 include한 JSP파일이 실행될 때 체크하여
                                                변경된 경우 해당 JSP파일을 recompile 하도록 하는 기능이다. 기본적으로는 include된 JSP파일들은 변경 여부를 점검되지 않는다.
                        [Value Description]: Boolean값으로 이 설정을 활성화 또는 비활성화 한다.
                        [Value Type Description]: Boolean
                        [Defined Value]: default : false
                                                    true : 해당 설정을 활성화 한다.
                                                    false :해당 설정을 비활성화 한다.
                    ]]>          
    </text>
           
    <text key="schedulerType.enabled"><![CDATA[
                        [Description]: Scheduler Service를 구동시킬지를 설정한다.
                        [Defined Value]: default : true
                                                    true : 활성화 한다.
                                                    false : 비활성화 한다.
                    ]]>          
    </text>
           
    <text key="schedulerType.thread-pool"><![CDATA[
                    [Description]: scheduler에서 multi-thread로 job을 실행할때 사용하는 thread pool을 설정한다.  
                    ]]>          
    </text>
           
    <text key="schedulerType.job-list"><![CDATA[
                        [Description]: scheduler에 등록할 job list을 지정한다.
                    ]]>          
    </text>
           
    <text key="job-listType.job"><![CDATA[
                        [Description]: scheduler에 등록할 하나의 job을 지정한다.
                    ]]>          
    </text>
           
    <text key="jobType.class-name"><![CDATA[
                        [Description]: job을 수행하는 class의 fully qualified name이다.
                    ]]>          
    </text>
           
    <text key="jobType.name"><![CDATA[
                        [Description]: 이 job의 이름을 지정한다.
                    ]]>          
    </text>
           
    <text key="jobType.description"><![CDATA[
                        [Description]: 이 job의 설명을 적을 수 있다.
                    ]]>          
    </text>
           
    <text key="jobType.begin-time"><![CDATA[
                        [Description]: 이 job의 시작 시간을 지정한다. 만약 시작 시간이 주어지지 않으면 job은 바로 시작된다.
                    ]]>          
    </text>
           
    <text key="jobType.end-time"><![CDATA[
                        [Description]: 이 job의 종료 시간을 지정한다. 만약 종료 시간이 주어지지 않으면 job은 종료되지 않는다.
                    ]]>          
    </text>
           
    <text key="jobType.interval"><![CDATA[
                        [Description]: 이 job이 수행되는 주기를 지정한다.
                    ]]>          
    </text>
           
    <text key="jobType.count"><![CDATA[
                        [Description]: 이 job이 수행되는 횟수를 지정한다.
						[Defined Value]: [-1]:
										수행되는 횟수를 제한하지 않는다.
                    ]]>          
    </text>
           
    <text key="intervalType.millisecond"><![CDATA[
                        [Description]: 주기를 millisecond 단위로 지정한다.
                    ]]>          
    </text>
           
    <text key="intervalType.minutely"><![CDATA[
                        [Description]: 주기를 분 단위로 지정한다.
                    ]]>          
    </text>
           
    <text key="intervalType.hourly"><![CDATA[
                        [Description]: 주기를 시간 단위로 지정한다.
                    ]]>          
    </text>
           
    <text key="intervalType.daily"><![CDATA[
                        [Description]: 주기를 날짜 단위로 지정한다.
                    ]]>          
    </text>
           
    <text key="run-as-identityType.principal-name"><![CDATA[
                    [Description]: ejb-jar.xml 또는 web.xml안에서 run-as-specified-identity의 role로 사용되는 principal 이름.
                    [Value Description]: security의 subjects.xml에서 지정되어 있는 principal 이름
                    ]]>          
    </text>
           
    <text key="SecurityServiceType.classname"><![CDATA[
                        [Description]: jeus.security.spi의 클래스들 중 하나를 확장한 Java 클래스명
                        [Value Description]: Java 클래스명
                        [Example]: <classname>mypackage.MyAutenticationService</classname>
                    ]]>          
    </text>
           
    <text key="SecurityServiceType.property"><![CDATA[
                        [Description]: 선택사항으로 해당 보안 서비스에 name-value쌍으로 속성을 정의한다. 정의할 수 있는 속성과 각 속성에 대한 설명은 서비스 클래스에 대한 문서를 참조하기 바란다.
                    ]]>          
    </text>
           
    <text key="SecurityServicePropertyType.name"><![CDATA[
                        [Description]: 속성명
                        [Value Description]: 속성명
                        [Example]: <name>filename</name>
                    ]]>          
    </text>
           
    <text key="SecurityServicePropertyType.value"><![CDATA[
                        [Description]: 선택사항으로 속성에 대한 값.
                        [Value Description]: 속성 값
                        [Example]: <value>c:\security\myAccounts.xml</value>
                    ]]>          
    </text>
           
    <text key="keystore-configType.keystore-path"><![CDATA[
                        [Description]: 현 도메인에 적용할 keystore file경로를 정의함.
                    ]]>          
    </text>
           
    <text key="keystore-configType.keystore-password"><![CDATA[
                        [Description]: 현 도메인에 적용할 keystore file에 대한 password를 정의함.
                    ]]>          
    </text>
           
    <text key="keystore-configType.keystore-keypassword"><![CDATA[
                        [Description]: 현 도메인에 적용할 keystore file에 대한 keypassword를 정의함.
                    ]]>          
    </text>
           
    <text key="keystore-configType.truststore-path"><![CDATA[
                        [Description]: 현 도메인에 적용할 truststore file 경로를 정의함.
                    ]]>          
    </text>
           
    <text key="keystore-configType.truststore-password"><![CDATA[
                        [Description]: 현 도메인에 적용할 truststore file에 대한 password를 정의함..
                    ]]>          
    </text>
           
    <text key="loggingGroup.name"><![CDATA[
                  [Description]: 기본 logger (jeus, jeus.ejb, jeus.servlet, jeus.jms 등) 이외에 다른 logger (jeus.transaction, jeus.jndi 등) 에 대해 
		  		 설정을 적용할 때 해당 logger name을 지정한다. 따라서 일반적인 경우에는 name을 지정하지 않는다.
				 logger의 이름을 알고 싶을 때는 logger 페이지를 따로 참고한다.
                                 이 Element가 생략될 때 logging 설정이 <node>나 <EngineContainer>에 있는 경우 name은 jeus logger이다.
		                 engine 아래 설정된 경우에는 항상 각 엔진의 로거 설정을 말하므로 name은 무시된다. 
		                 default container의 경우는 node의 logging 설정을 따르므로 name은 무시된다.
                    ]]>          
    </text>
           
    <text key="loggingGroup.level"><![CDATA[
                  [Description]: logging의 level을 설정한다. 각 level의 의미는 J2SE의 logging API의 Level class를
                  참고하기 바란다.
                    ]]>          
    </text>
           
    <text key="loggingGroup.use-parent-handlers"><![CDATA[
                  [Description]: parent logger의 handler들을 이 logger에서도 사용할지를 결정한다.
                    ]]>          
    </text>
           
    <text key="loggingGroup.filter-class"><![CDATA[
                  [Description]: logger에 지정할 filer class의 fully qualified class name을 설정한다.
                  [Example]: <filter-class>com.tmax.logging.filter.MyFilter</filter-class>
                    ]]>          
    </text>
           
    <text key="loggingGroup.handler"><![CDATA[
                  [Description]: logger에서 사용할 handler를 설정한다.
                    ]]>          
    </text>
           
    <text key="smtp-propertyGroup.smtp-host-address"><![CDATA[
                        [Description]: email을 보낼 smtp server의 주소를 지정한다.
                    ]]>          
    </text>
           
    <text key="smtp-propertyGroup.from-address"><![CDATA[
                        [Description]: email을 보내는 사람의 address를 지정한다.
                    ]]>          
    </text>
           
    <text key="smtp-propertyGroup.to-address"><![CDATA[
                        [Description]: email을 받는 사람의 address를 지정한다.
                    ]]>          
    </text>
           
    <text key="smtp-propertyGroup.cc-address"><![CDATA[
                        [Description]: email을 참조로 받는 사람의 address를 지정한다.
                    ]]>          
    </text>
           
    <text key="smtp-propertyGroup.bcc-address"><![CDATA[
                        [Description]: email을 숨은 참조로 받는 사람의 address를 지정한다.
                    ]]>          
    </text>
           
    <text key="off-intType"><![CDATA[
               [Value Type Description]: 기본적으로 non-negative int 형이지만 -1인 경우에는 설정을 하지 않은게 된다.즉, off된다.
            ]]>          
    </text>
           
    <text key="nonNegativeIntType"><![CDATA[
               [Value Type Description]: 0 보다 큰 int type이다. 즉, int 범위에서
               0 보다 큰 값들을 포함한다.
            ]]>          
    </text>
           
    <text key="nonNegativeLongType"><![CDATA[
               [Value Type Description]: 0 보다 큰 long type이다. 즉, long 범위에서
               0 보다 큰 값들을 포함한다.
            ]]>          
    </text>
           
    <text key="positiveLongType"><![CDATA[
                [Value Type Description]: 0 이상의 long type이다. 즉, long 범위에서 1 이상의 값들을 포함한다.
            ]]>          
    </text>
           
    <text key="positiveIntType"><![CDATA[
                [Value Type Description]: 기본적으로 non-negative int 형이지만 1 이상의 값만 허용한다.
            ]]>          
    </text>
           
    <text key="positiveShortType"><![CDATA[
                [Value Type Description]: JMS broker 의 borkerID 로 사용된다. 0 은 local brokerID 로 예약되어 있다.
            ]]>          
    </text>
           
    <text key="off-longType"><![CDATA[
                [Value Type Description]: 기본적으로 unsigned long 형이지만 -1인 경우에는 설정을 하지 않은게 된다.즉, off된다.
            ]]>          
    </text>
           
    <text key="fractionType"><![CDATA[
                [Value Type Description]: 0과 1사이의 float 형으로 비율을 나타낸다.
            ]]>          
    </text>
           
    <text key="loggingLevelType.FATAL"><![CDATA[
                        [Description]: SEVERE에 해당하는 level이다. JEUS 4.x대의 logger의 level로 compatibility를 위해 지원한다.
                    ]]>          
    </text>
           
    <text key="loggingLevelType.NOTICE"><![CDATA[
                        [Description]: WARNING에 해당하는 level이다. JEUS 4.x대의 logger의 level로 compatibility를 위해 지원한다.
                    ]]>          
    </text>
           
    <text key="loggingLevelType.INFORMATION"><![CDATA[
                        [Description]: INFO에 해당하는 level이다. JEUS 4.x대의 logger의 level로 compatibility를 위해 지원한다.
                    ]]>          
    </text>
           
    <text key="loggingLevelType.DEBUG"><![CDATA[
                        [Description]: FINE에 해당하는 level이다. JEUS 4.x대의 logger의 level로 compatibility를 위해 지원한다.
                    ]]>          
    </text>
           
    <text key="loggingLevelType.fatal"><![CDATA[
                        [Enumeration Display]: false
                    ]]>          
    </text>
           
    <text key="loggingLevelType.notice"><![CDATA[
                        [Enumeration Display]: false
                    ]]>          
    </text>
           
    <text key="loggingLevelType.information"><![CDATA[
                        [Enumeration Display]: false
                    ]]>          
    </text>
           
    <text key="loggingLevelType.debug"><![CDATA[
                        [Enumeration Display]: false
                    ]]>          
    </text>
           
    <text key="loggingLevelType.SEVERE"><![CDATA[
                        [Description]: J2SE Logging API의 Level class documentation을 참고하기 바란다.
                    ]]>          
    </text>
           
    <text key="loggingLevelType.WARNING"><![CDATA[
                        [Description]: J2SE Logging API의 Level class documentation을 참고하기 바란다.
                    ]]>          
    </text>
           
    <text key="loggingLevelType.INFO"><![CDATA[
                        [Description]: J2SE Logging API의 Level class documentation을 참고하기 바란다.
                    ]]>          
    </text>
           
    <text key="loggingLevelType.CONFIG"><![CDATA[
                        [Description]: J2SE Logging API의 Level class documentation을 참고하기 바란다.
                    ]]>          
    </text>
           
    <text key="loggingLevelType.FINE"><![CDATA[
                        [Description]: J2SE Logging API의 Level class documentation을 참고하기 바란다.
                    ]]>          
    </text>
           
    <text key="loggingLevelType.FINER"><![CDATA[
                        [Description]: J2SE Logging API의 Level class documentation을 참고하기 바란다.
                    ]]>          
    </text>
           
    <text key="loggingLevelType.FINEST"><![CDATA[
                        [Description]: J2SE Logging API의 Level class documentation을 참고하기 바란다.
                    ]]>          
    </text>
           
    <text key="loggingLevelType.ALL"><![CDATA[
                        [Description]: J2SE Logging API의 Level class documentation을 참고하기 바란다.
                    ]]>          
    </text>
           
    <text key="loggingLevelType.severe"><![CDATA[
                        [Enumeration Display]: false
                    ]]>          
    </text>
           
    <text key="loggingLevelType.warning"><![CDATA[
                        [Enumeration Display]: false
                    ]]>          
    </text>
           
    <text key="loggingLevelType.info"><![CDATA[
                        [Enumeration Display]: false
                    ]]>          
    </text>
           
    <text key="loggingLevelType.config"><![CDATA[
                        [Enumeration Display]: false
                    ]]>          
    </text>
           
    <text key="loggingLevelType.fine"><![CDATA[
                        [Enumeration Display]: false
                    ]]>          
    </text>
           
    <text key="loggingLevelType.finer"><![CDATA[
                        [Enumeration Display]: false
                    ]]>          
    </text>
           
    <text key="loggingLevelType.finest"><![CDATA[
                        [Enumeration Display]: false
                    ]]>          
    </text>
           
    <text key="loggingLevelType.all"><![CDATA[
                        [Enumeration Display]: false
                    ]]>          
    </text>
           
    <text key="db-vendorType.oracle"><![CDATA[
                        [Description]: Oracle DBMS 인 경우
                    ]]>          
    </text>
           
    <text key="db-vendorType.informix"><![CDATA[
                        [Description]: Informix DBMS 인 경우
                    ]]>          
    </text>
           
    <text key="db-vendorType.db2"><![CDATA[
                        [Description]: IBM DB2 DBMS인 경우
                    ]]>          
    </text>
           
    <text key="db-vendorType.mssql"><![CDATA[
                        [Description]: Microsoft SQL Server DBMS 인 경우
                    ]]>          
    </text>
           
    <text key="db-vendorType.sybase"><![CDATA[
                        [Description]: Sybase DBMS인 경우
                    ]]>          
    </text>
           
    <text key="db-vendorType.hsql"><![CDATA[
                        [Description]: HSQL DBMS 인 경우
                    ]]>          
    </text>
           
    <text key="db-vendorType.cloudscape"><![CDATA[
                        [Description]: Cloudscape DBMS인 경우
                    ]]>          
    </text>
           
    <text key="db-vendorType.mysql"><![CDATA[
                        [Description]: MySQL DBMS인 경우
                    ]]>          
    </text>
           
    <text key="engineType.EXCLUSIVE_ACCESS"><![CDATA[
                    [Description]: 각각의 Entity Bean 인스턴스는 그것이 나타내는 데이터베이스의 열과 일대일 관계를 가지고 그에
                    대해서 독점적인 접근을 한다. 이것은 하나의 인스턴스가 살아있는 동안 다른 Entity Bean은
                    데이터에 접근하거나 변경할 수 없다는 사실을 의미하기 때문에 EJB 엔진은 ejbLoad() 호출을
                    모두 생략할 수 있다는 것을 나타낸다. 엔진은 빈이 생성될 때 한 번  ejbLoad() 호출을 실행하고
                    빈이 살아있는 동안 데이터베이스에 더 이상의 어떤 변화도 없다고 가정하고 ejbLoad() 호출을 하지
                    않는다. 이 빈은 이것이 클러스터링된 빈의 일부일 때 사용할 수 없다. 데이터베이스는 WAS에
                    의해서만 변경이 허락된다는 점을 반드시 기억하기 바란다( WAS 가 아닌 접근은 허용되지 않는다).
                    ]]>          
    </text>
           
    <text key="engineType.SINGLE_OBJECT"><![CDATA[
                    [Description]: element의 값을 이것으로 설정한다면 다른 EJB 엔진의 여러 EJB들이 같은 데이터베이스 열에 매핑될
                    수 있다. ejbLoad()는 Entity Bean으로 요청이 들어오기 앞서서 항상 호출된다.  SINGLE_OBJECT와
                    MULTIPLE_OBJECT는 같은 종류의 EJB를 클러스터링할 때 필요하다. SINGLE_OBJECT와
                    MULTIPLE_OBJECT의 차이점은 SINGLE_OBJECT인 경우 각각의 EJB 엔진 안에서 오직 하나의 EJB
                    Entity Bean이 EJB 클라이언트의 모든 요청을 처리한다. 즉 같은 EJB 엔진으로 다른 EJB
                    클라이언트의 요청이 도착한다면 먼저 연결을 맺고 있는 다른 클라이언트의 요청이 끝날 때까지
                    대기상태에 있어야 한다.
                    ]]>          
    </text>
           
    <text key="engineType.MULTIPLE_OBJECT"><![CDATA[
                    [Description]: element의 값을 이것으로 설정한다면 다른 EJB 엔진의 여러 EJB 들이 같은 데이터베이스 열에 매핑될
                    수 있다. ejbLoad()는 Entity Bean으로 요청이 들어오기 앞서서 항상 호출된다.  SINGLE_OBJECT 과
                    MULTIPLE_OBJECT는 같은 종류의 EJB를 클러스터링할 때 필요하다. SINGLE_OBJECT와
                    MULTIPLE_OBJECT의 차이점은 MULTIPLE_OBJECT 인 경우 각각의 EJB 엔진 안에서 모든 EJB
                    클라이언트의 요청을 동시에 처리할 여러 EJB Entity Bean 인스턴스가 생성된다.즉 SINGLE_OBJECT 모드와
                    달리 EJB 클라이언트의 요청은 먼저 처리하고 있는 다른 요청이 끝날 때까지 대기하지 않아도 된다.
                    ]]>          
    </text>
           
    <text key="vendorType.oracle"><![CDATA[
                        [Description]: Oracle JDBC driver
                    ]]>          
    </text>
           
    <text key="vendorType.sybase"><![CDATA[
                        [Description]: Sybase JDBC driver
                    ]]>          
    </text>
           
    <text key="vendorType.mssql"><![CDATA[
                        [Description]: JEUS MS SQL JDBC driver
                    ]]>          
    </text>
           
    <text key="vendorType.db2"><![CDATA[
                        [Description]: DB2 JDBC driver
                    ]]>          
    </text>
           
    <text key="vendorType.tibero"><![CDATA[
                        [Description]: Tibero JDBC driver
                    ]]>          
    </text>
           
    <text key="vendorType.informix"><![CDATA[
                        [Description]: Informix JDBC driver
                    ]]>          
    </text>
           
    <text key="vendorType.mysql"><![CDATA[
                        [Description]: MySQL JDBC driver(Connector/J)
                    ]]>          
    </text>
           
    <text key="vendorType.others"><![CDATA[
                        [Description]: Other JDBC drivers
                    ]]>          
    </text>
  <ref key="console-handlerType">common-handlerType</ref>
     <ref key="file-handlerType">common-handlerType</ref>
     <ref key="smtp-handlerType">smtp-propertyGroup</ref>
     <ref key="smtp-handlerType">common-handlerType</ref>
     <ref key="smtp-senderType">smtp-propertyGroup</ref>
     <ref key="socket-handlerType">common-handlerType</ref>
     <ref key="user-handlerType">common-handlerType</ref>
     <ref key="system-loggingType">loggingGroup</ref>
     <ref key="user-logType">system-loggingType</ref>
 <ref key="console-handlerType">common-handlerType</ref>
    <ref key="file-handlerType">common-handlerType</ref>
    <ref key="smtp-handlerType">smtp-propertyGroup</ref>
    <ref key="smtp-handlerType">common-handlerType</ref>
    <ref key="smtp-senderType">smtp-propertyGroup</ref>
    <ref key="socket-handlerType">common-handlerType</ref>
    <ref key="user-handlerType">common-handlerType</ref>
    <ref key="system-loggingType">loggingGroup</ref>
    <ref key="user-logType">system-loggingType</ref>
</description>
