<?xml version="1.0" encoding="EUC-KR"?>
<description>          
    <text key="jeus-system"><![CDATA[
                [Description]: JEUS 설정 파일의 최상위 element. JEUS 시스템에 속하는 모든 노드의 설정을
                이 element 아래에 기록한다.
            ]]>          
    </text>
           
    <text key="application"><![CDATA[
                [Description]: jeus-application-dd.xml의 element이다.
            ]]>          
    </text>
           
    <text key="jeus-systemType.node"><![CDATA[
                        [Description]: JEUS ’node’는 기본적으로 JEUS가 실행 중인 서버의 머신 이름이다. JEUS 클러스터링
                        환경에서는 각 JEUS 노드마다 하나의 <node> element를 가진다.각 서버마다 JEUSMain.xml을 가지고
                        있으며, 이 파일을 통해서 다른 서버의 정보를 얻는다.
                    ]]>          
    </text>
           
    <text key="jeus-systemType.naming-server"><![CDATA[
                        [Description]: Naming-Server element는 JEUS Naming Server의 정보를 포함한다.
                    ]]>          
    </text>
           
    <text key="jeus-systemType.security-manager"><![CDATA[
                        [Description]: security-manager element는 JEUS security 정보 관리에 대한 설명이다.
                    ]]>          
    </text>
           
    <text key="jeus-systemType.resource"><![CDATA[
                        [Description]: 여기서는 JEUS와 연동되는 외부 리소스의 정보를 담고 있다. 여기서 사용되는 리소스는
                        DB, TP monitor가 있다.
                    ]]>          
    </text>
           
    <text key="jeus-systemType.application"><![CDATA[
                        [Description]: JEUS가 실행될 때 deploy가 되는 application을 지정한다.
                    ]]>          
    </text>
           
    <text key="jeus-nodeType.name"><![CDATA[
                        [Description]: 노드의 이름.
                        [Value Description]: 실제 JEUS가 동작하는 머신의 이름. 유닉스에서는 “uname -n”으로 알아낼 수
                        있으며, Windows에서는 [시스템 등록 정보]-[네트워크 식별]에서 나오는 컴퓨터 이름이다.
                    ]]>          
    </text>
           
    <text key="jeus-nodeType.listener"><![CDATA[
                                [Description]: 이 노드의 JEUS 시스템이
                                사용하는 socket listener 및 socket
                                connection request 처리에 필요한 각종
                                속성을 지정한다.
                    ]]>          
    </text>
           
    <text key="jeus-nodeType.backup-node"><![CDATA[
                        [Description]: 이 node가 감시할 node를 지정한다. 지정된 node가 down되면 이 node가 boot되지 않은 경우 boot시킨다.
                        [Value Description]: backup node로 작동할 노드의 이름.
                    ]]>          
    </text>
           
    <text key="jeus-nodeType.engine-container"><![CDATA[
                        [Description]: 여러 개의 JEUS의 Engine을 관리하는 container이다. application은 이 container
                        단위로 deploy되고 실행된다.
                    ]]>          
    </text>
           
    <text key="jeus-nodeType.remote-webtob-list"><![CDATA[
                        [Description]: 원격 Webtob Web Server 시스템의 관리 환경에 대해 정의하는 부분이다.
                    ]]>          
    </text>
           
    <text key="jeus-nodeType.class-ftp"><![CDATA[
                        [Description]: class FTP는 EJB 스텁을 클라이언트로 FTP를 사용해서 전송한다. class FTP를 사용하지
                        않으면 직접 해당 파일을 복사해줘야 한다. 이 설정이 true로 설정되지 않으면 기본적으로 class FTP 기능이
                        비활성화 된다.
                    ]]>          
    </text>
           
    <text key="jeus-nodeType.sequential-start"><![CDATA[
                        [Description]: ‘true’이면 Engine Container가 순서대로 부팅된다. 기본적으로 Engine Container는
                        동시에 부팅되도록 되어있는데, 어떤 경우에는 문제가 발생할 수 있다.
                    ]]>          
    </text>
           
    <text key="jeus-nodeType.scheduler"><![CDATA[
                        [Description]: JEUS Scheduler에 관련된 설정을 담고있다.
                    ]]>          
    </text>
           
    <text key="jeus-nodeType.enable-jnlp"><![CDATA[
                        [Description]: JNLP Server를 사용할지 지정한다.
                    ]]>          
    </text>
           
    <text key="jeus-nodeType.enable-webadmin"><![CDATA[
                        [Description]: WebAdmin을 사용할지 지정한다. WebAdmin은 JEUS를 관리하는 웹 기반의 툴이다.
                    ]]>          
    </text>
           
    <text key="jeus-nodeType.webadmin-config"><![CDATA[
                        [Description]: JEUS WebAdmin에 대한 설정을 한다.
                    ]]>          
    </text>
           
    <text key="jeus-nodeType.system-logging"><![CDATA[
                        [Description]: JEUS Manager에서 사용할 logger의 설정이다.
                    ]]>          
    </text>
           
    <text key="jeus-nodeType.session-server"><![CDATA[
                        [Description]: 중앙 session clustering을 제공하는 server에 관한 설정이다.
                        Servlet/JSP에서 사용하는 HttpSession 클러스터링 및 EJB 세션 클러스터링을 서비스할 수 있다.
                    ]]>          
    </text>
           
    <text key="jeus-nodeType.session-router-config"><![CDATA[
                        [Description]: 분산식 session clustering을 제공하는 server에 관한 설정이다.
                        Servlet/JSP에서 사용하는 HttpSession 클러스터링을 서비스한다.
                    ]]>          
    </text>
           
    <text key="jeus-nodeType.jmx-manager"><![CDATA[
                        [Description]: JEUS Manager JVM에서 사용하는 JMX에 대한 설정이다.
                    ]]>          
    </text>
           
    <text key="listenerType.backlog"><![CDATA[
                                [Description]: $JEUS_BASEPORT로 지정한
                                JEUS system listener port에 대한 backlog값을 지정한다.
                    ]]>          
    </text>
           
    <text key="listenerType.ssl"><![CDATA[
                                [Description]: Jeus Security system에
                                관련된 SSL 속성을 지정한다. 이
                                element를 설정하면 Jeus Security system을 사용하는
                                모든 socket connection에 SSL이 적용된다.
                    ]]>          
    </text>
           
    <text key="listenerType.thread-pool"><![CDATA[
                                [Description]: Jeus system listener port ($JEUS_BASEPORT)
                                에 요청되는 socket connection처리를 위한 thread pool을 설정한다.
                    ]]>          
    </text>
           
    <text key="security-sslType.port"><![CDATA[
                                [Description]: Jeus Security system이 SSL connection에 사용할 listen  port를 지정한다.
                                [Value Description]: 기본값은 $JEUS_BASEPORT + 1이다.
                    ]]>          
    </text>
           
    <text key="jeusmain-session-serverType.resolution"><![CDATA[
                                    [Description]: session removal, session passivation등의 operation을 수행하는
                                    thread의 활동 주기를 지정한다.
                    ]]>          
    </text>
           
    <text key="jeusmain-session-serverType.thread-pool"><![CDATA[
                                [Description]: 중앙집중식 세션서버에서 사용되는 socket connection처리를 위한 thread pool을 설정한다.
                    ]]>          
    </text>
           
    <text key="jeusmain-session-serverType.use-nio"><![CDATA[
                        [Description]: 중앙집중식 세션서버의 통신을 Nonblocking I/O를 사용해서 할지의 여부를 지정한다.
                    ]]>          
    </text>
           
    <text key="jeusmain-session-serverType.connect-timeout"><![CDATA[
                            [Description]: Manager에 존재하는 중앙집중식 세션서버들 간의 socket connection을
                            생성할 때 적용되는 timeout 값이다.
                    ]]>          
    </text>
           
    <text key="jeusmain-session-serverType.read-timeout"><![CDATA[
                            [Description]: Manager에 존재하는 중앙집중식 세션서버들 간의 통신시에 적용되는
                            read timeout 값이다. 데이타를 보낸후 응답을 최대 이 시간만큼 기다리게 된다.
                    ]]>          
    </text>
           
    <text key="jeusmain-session-serverType.session-manager"><![CDATA[
                                    [Description]: session을 보관하고 WebContainer/EJB에 session 객체를 서비스하는 관리자를 설정한다.
                    ]]>          
    </text>
           
    <text key="session-managerType.name"><![CDATA[
                                    [Description]: session의 이름을 설정한다. jeus clustering system상에서 unique한 값을 지정해야한다.
                    ]]>          
    </text>
           
    <text key="session-managerType.passivation-to"><![CDATA[
                                    [Description]: memory에 존재하는 session 객체를 일정시간 사용하지 않으면 삭제하고
                                    대신 file-db에 저장된 객체를 사용하게 하는 설정이다.
                                    [Value Description]: -1이면 passivation을 수행하지 않는다. 0이상의 시간을 설정하면
                                    지정된 시간 이상 사용하지 않는 memory상의 session 객체는 passivation된다. 단위는 msec이다.
                                    기본값은 -1이다.
                    ]]>          
    </text>
           
    <text key="session-managerType.removal-to"><![CDATA[
                                    [Description]: file-db에 저장된 session 객체의 보존 기간을 지정한다. passivation-to의
                                    값이 -1일 경우는 memory에 존재하는 session 객체를 제거하는 주기의 역할을 한다.
                                    [Value Description]: -1이면 file-db에서 제거하지 않는다. 0이상의 시간을 설정한 경우에는,
                                    생성시간으로 부터 지정 시간이 지난 session객체는 제거한다.
                                    단위는 msec이다. 기본값은 -1이다.
                    ]]>          
    </text>
           
    <text key="session-managerType.file-db-path"><![CDATA[
                                    [Description]: file-db에 경로를 지정한다.
                                    [Value Description]: 절대 경로로 나타내야 한다. 기본 값은 $JEUS_HOME/.workspace이다.
                    ]]>          
    </text>
           
    <text key="session-managerType.file-db-name"><![CDATA[
                                    [Description]: file-db이름을 지정한다.
                                    [Value Description]: 기본 값은 session-manager의 name 설정을 이용한다.
                    ]]>          
    </text>
           
    <text key="session-managerType.min-hole"><![CDATA[
                                    [Description]: 일정 시간 file-db를 운용하면 file의 크기가 필요이상 커지게 된다.
                                    이 설정에 지정된 횟수 만큼 file I/O가 발생하면 file packing을 수행하여 필요이상
                                    file 크기가 늘어나는 것을 막는다.
                    ]]>          
    </text>
           
    <text key="session-managerType.packing-rate"><![CDATA[
                                    [Description]: 일정 시간 file-db를 운용하면 file의 크기가 필요이상 커지게 된다.
                                    현재 session객체 갯수 대비 file I/O 횟수가 지정된 ratio를 넘어서면 file packing을 수행하여 필요이상
                                    file 크기가 늘어나는 것을 막는다.
                    ]]>          
    </text>
           
    <text key="session-managerType.check-to"><![CDATA[
                                    [Description]: 얼마만큼의 시간 간격으로 backup과정을 수행할 지를 결정한다.
                                    이 설정에 지정된 시간 주기로 update된 session 객체가 있는지를 조사하고 update된
                                    session 객체가 존재하면 backup을 수행한다.
                    ]]>          
    </text>
           
    <text key="session-managerType.backup-name"><![CDATA[
                                    [Description]: 이 session-manager의 backup으로 사용할 session-manager의 name을 지정한다.
                    ]]>          
    </text>
           
    <text key="session-managerType.backup-trigger"><![CDATA[
                                    [Description]: local session manager에서 session
                                    객체의 update가 어느 정도 발생하였을 때 backup session manager로 update된 session
                                    객체들을 backup할지를 결정한다. 이 설정에 지정된 횟수 만큼 local session manager에 session
                                    object update가 발생하면 backup을 수행한다.
                    ]]>          
    </text>
           
    <text key="session-managerType.operation-to"><![CDATA[
                                    [Description]: session-manager와 WebContainer간 read operation에 적용될
                                    timeout을 지정한다.(RMI를 사용할 경우에만 의미가 있다.)
                    ]]>          
    </text>
           
    <text key="engine-containerType.name"><![CDATA[
                        [Description]: Engine Container의 이름.
                        [Value Description]: 적절한 이름을 입력한다. 여기서 입력한 이름과 노드의 이름을 조합해서 실제
                        Engine Container 이름이 생성된다.예) “johan_mycontainer”에서 “mycontainer”가 여기서 입력한
                        이름이다.
                        [Defined Value]:
						  [default]:
                            이 이름이 사용되면, 이 Engine Container가 JEUSManager와 동일한 JVM에서 동작하게 된다.
                            다른 이름에 대해서는 새로운 JVM process로 Engine Container가 운영된다.
                    ]]>          
    </text>
           
    <text key="engine-containerType.id"><![CDATA[
                        [Description]: Engine Container의 ID
                        [Value Description]: 이 Engine Container가 사용할 id를 0 이상 128 미만의 정수로 입력한다. 이 값은
                          Transaction Manager가 transaction ID를 만들때에 사용하므로 recovery시에는 이 값이 fail전과 후가
                          같아야 한다. default 값은 name의 hashcode를 바탕으로 만든다. 다른 EngineContainer와 겹치면 container
                          boot가 실패한다.
                    ]]>          
    </text>
           
    <text key="engine-containerType.base-port"><![CDATA[
                        [Description]: container별로 listen port를 사용할때 기본적으로 base port + 15 + containerID * 10 의 값이 container의 base port로 사용된다. 이 값을 직접 지정할때 사용한다.
                        [Value Description]: 이 Engine Container가 사용할 listen port의 값. 이 값은
                          Transaction Manager가 transaction ID를 만들때에 사용하므로 recovery시에는 이 값이 fail전과 후가
                          같아야 한다. 다른 EngineContainer와 겹치면 container boot가 실패한다.
                    ]]>          
    </text>
           
    <text key="engine-containerType.command-option"><![CDATA[
                        [Description]: Engine Container의 JVM에 들어가는 JVM옵션을 적어준다.
                        [Example]: <command-option>-Xms64m -Xmx128m</command-option>
                    ]]>          
    </text>
           
    <text key="engine-containerType.engine-command"><![CDATA[
                        [Description]: Engine은 J2EE 어플리케이션이 작동하기 위한 환경을 제공한다. J2EE 스펙에서의
                        Container에 대응하는 기능이다.모든 Engine은 Engine Container가 부팅될 때 실행되며,
                        Engine Container 하나에서는 각 Engine 타입 당 하나씩 지원한다. Engine 타입으로는
                        servlet, ejb, jms, ws가 있다. 각각 EJB Engine, Servlet Engine, JMS Engine,
                        WebServer Engine을 나타낸다.
                    ]]>          
    </text>
           
    <text key="engine-containerType.enable-interop"><![CDATA[
                      [Description]: 이 설정이 존재한다면 이 엔진 컨테이너는 IIOP 프로토콜을 사용하는
		      모든 ORB와 상호동작 할 수 있다. 이 경우 두 개의 특별한 리스너 인터페이스가 엔진 컨테이너에
		      Deploy된다( CSI 리스너와 OTS 리스너 ). 이 인터페이스는 보안( 예 : "principal" )과
		      트랜잭션( 예: GTID )을 포함하는 IIOP 메시지 헤더를 인식하고 조정한다. 만약 이 기능을
		      활성화 하려면 엔진 컨테이너의 JVM에 반드시 보안 파라미터가 명시 되어야만 한다.
                    ]]>          
    </text>
           
    <text key="engine-containerType.start-on-boot"><![CDATA[
                        [Description]: 부팅 시에 이 컨테이너를 띄울지를 정한다.
                                       이 값이 false이면 부팅 시에 이 컨테이너를 띄우지 않는다.
                    ]]>          
    </text>
           
    <text key="engine-containerType.sequential-start"><![CDATA[
                        [Description]: Engine을 하나씩 부팅할지를 정한다. 기본적으로 모든 Engine은 동시에 부팅되기 때문에
                        문제가 발생할 수 있다. 부팅 순서는 JEUSMain.xml에서 지정된 순서에 따라서 부팅된다.
                        [Performance Recommendation]: 이 기능이 사용되면 Engine Container의 실행시간은 길어지지만,
                        좀 더 안정적으로 부팅된다.
                    ]]>          
    </text>
           
    <text key="engine-containerType.user-class-path"><![CDATA[
                        [Description]: Engine Container 를 실행하는 JVM의 classpath에 패스를 추가한다. 이 설정은
                        default Engine Container에는 적용되지 않는다. default Engine Container에 적용하기 위해서는
			jeus.server.classpath system property를 사용하여야 한다.
			default가 아닌 container에 대해서는 JEUSMain.xml의 설정이 system property에 우선한다.
                        [Value Description]: “;”로 구분되는 classpath(유닉스의 경우 “:”
                        [Example]: <user-class-path>c:\mylib\classes;c:\mylib\lib\mylib.jar</user-class-path>
                    ]]>          
    </text>
           
    <text key="engine-containerType.tm-config"><![CDATA[
                        [Description]: 트랜잭션 매니저(TM)는 Global Transaction을 시작하고 종료한다. 트랜잭션을
                        종료할 때 TM은 RM(리소스 매니저)과 통신을 하면서 commit인지 rollback인지 결정한다.
                        이렇게 함으로써 TM은 Global Transaction의 원자성을 보장하게 된다.그러나 실제 상황에서는
                        많은 예외적인 상황이 발생하는데, 이에 대한 대응책으로 다양한 타임아웃 메커니즘을 제공한다.
                        하위 element에서는 TM의 타임아웃 등을 설정한다.
                    ]]>          
    </text>
           
    <text key="engine-containerType.scheduler"><![CDATA[
                        [Description]: JEUS Scheduler에 관련된 설정을 담고있다.
                    ]]>          
    </text>
           
    <text key="engine-containerType.user-logging"><![CDATA[
                        [Description]: 이 element는 jeus.util.UserLogger클래스를 사용해서 생성한 로그를 어떻게
                        처리할 것인지 세팅한다.
                    ]]>          
    </text>
           
    <text key="engine-containerType.system-logging"><![CDATA[
                        [Description]: 이 Engine Container에서 사용할 logger를 설정한다. 이 logger에는
                        Engine Container에서 발생하는 error message들이 출력된다.
                    ]]>          
    </text>
           
    <text key="engine-containerType.invocation-manager-action"><![CDATA[
                        [Description]: invocation manager는 Engine Container 내의 Stateless 메소드(Servlet/JSP,
                        Stateless EJB와 MDB)에서 사용한 리소스를 추적해서 보고한다.
                        [Performance Recommendation]: “NoAction”이 성능면에서 가장 좋다. 다른 옵션은 어플리케이션
                        코드에 버그가 많아서 신뢰성이 떨어질 때 사용한다.
                    ]]>          
    </text>
           
    <text key="engine-containerType.jmx-manager"><![CDATA[
                        [Description]: JMX Manager element는 이 Engine Container의 JMX관련 모든 설정을 담고 있다.
                    ]]>          
    </text>
           
    <text key="engine-containerType.use-MEJB"><![CDATA[
                        [Description]: J2EE Management Spec에서 제시하는 MEJB를 사용할 것인지를 설정한다. 사용하지
                        않는다면 MEJB를 deploy하지 않는다.
                    ]]>          
    </text>
           
    <text key="engine-containerType.lifecycle-invocation"><![CDATA[
                        [Description]: Engine Container의 각종 lifecycle event에 호출할 method를 지정할 수 있다.
                    ]]>          
    </text>
           
    <text key="engine-containerType.application-path"><![CDATA[
                        [Description]: application archive file들을 넣을 디렉토리를 지정한다. 상대경로인 경우에는
                        JEUS_HOME path에서의 상대경로이다. application은 이 element의 순서대로 검색된다.
                        default는 jeus.apphome system property로 설정한 path거나 webhome/app_home
                    ]]>          
    </text>
           
    <text key="engine-containerType.res-ref"><![CDATA[
                        [Description]: 이 Engine Container의 JNDI에 등록할 resource reference들이다.
                    ]]>          
    </text>
           
    <text key="remote-webtob-listType.remote-webtob"><![CDATA[
                        [Description]: 원격 WebtoB 설정
                        [Hidden]: true
                    ]]>          
    </text>
           
    <text key="remote-webtobType.name"><![CDATA[
                        [Description]: 원격 webtob instance의 이름
                        [Hidden]: true
                    ]]>          
    </text>
           
    <text key="remote-webtobType.config-file-name"><![CDATA[
                        [Description]: 원격 webtob에 설정되어 있는 config 파일 이름
                        [Hidden]: true
                    ]]>          
    </text>
           
    <text key="remote-webtobType.remote-addr"><![CDATA[
                        [Description]: webtob 관리 데몬이 실행되는 IP 어드레스
                        [Hidden]: true
                    ]]>          
    </text>
           
    <text key="remote-webtobType.control-port"><![CDATA[
                        [Description]: webtob 관리 데몬의 listen 포트
                        [Hidden]: true
                    ]]>          
    </text>
           
    <text key="enable-interopType.use-OTS"><![CDATA[
                        [Description]: OTS를 지원하는 ORB로 interoperability를 사용할지를 결정한다.
						false라면 OTS를 지원하지 않는 방식으로 동작한다.
                    ]]>          
    </text>
           
    <text key="enable-interopType.interop-ssl-config"><![CDATA[
                        [Description]: keystore/truststore file에 대한 설정을 함.
                    ]]>          
    </text>
           
    <text key="lifecycle-invocationType.class-name"><![CDATA[
                        [Description]: lifecycle event의 callback method가 존재하는 fully qualified class name을 지정한다.
                        [Example]: com.tmax.event.EngineContainerHandler
                    ]]>          
    </text>
           
    <text key="lifecycle-invocationType.invocation"><![CDATA[
                        [Description]: 이 class 내의 invocation 세부 정보를 설정한다.
                    ]]>          
    </text>
           
    <text key="invocationType.invocation-method"><![CDATA[
                      [Description]: 이 invocation에 사용될 method를 지정한다.
                    ]]>          
    </text>
           
    <text key="invocationType.invocation-argument"><![CDATA[
                      [Description]: method를 호출할 때 사용하는 argument를 지정한다.
                    ]]>          
    </text>
           
    <text key="invocationType.invocation-type"><![CDATA[
                      [Description]: 이 method가 호출되는 시점을 지정한다.
                    ]]>          
    </text>
           
    <text key="engine-commandType.type"><![CDATA[
                        [Description]: Engine Container에 포함되는 Engine 타입.
                    ]]>          
    </text>
           
    <text key="engine-commandType.name"><![CDATA[
                        [Description]: Engine의 이름.
                        [Value Description]: 적절한 이름을 입력한다. 이 이름은 <node_name>_<engine_type><engine_name>
                        형태로 변경되어서 사용된다.예) “johan_servlet_Engine1”은 “Engine1”이라는 EJB Engine의 이름이다.
                    ]]>          
    </text>
           
    <text key="engine-commandType.system-logging"><![CDATA[
                        [Description]: 이 Engine의 error log를 기록하는 logger에 대한 설정이다.
                    ]]>          
    </text>
           
    <text key="jmx-managerType.jmx-connector"><![CDATA[
                        [Description]: 다른 process에서 이 Engine Container의 JMX를 access할 때 사용하는
                        JMX Connector를 설정한다. 기본적으로는 JEUSMP Connector를 사용한다.
                    ]]>          
    </text>
           
    <text key="jmx-managerType.html-adaptor-port"><![CDATA[
                        [Description]: JMX의 adapter중 하나인 HTML adapter의 port를 지정한다.
                        여기에 지정된 값으로 Web Browser가 접속하게 된다.
                    ]]>          
    </text>
           
    <text key="jmx-managerType.snmp-adaptor"><![CDATA[
                        [Description]: JMX의 adapter중 하나인 SNMP adapter를 설정한다.
                    ]]>          
    </text>
           
    <text key="jmx-managerType.mlet-url"><![CDATA[
                        [Description]: 이 Engine Container의 MBeanServer에 등록할 MLet의 URL을
                        지정한다.
                    ]]>          
    </text>
           
    <text key="jmx-connectorType.jmxmp-connector"><![CDATA[
                        [Description]: JMX Connector로 JMXMP Connector를 사용한다.
                                       JMXMP Connector Reference를 '/mgmt/rmbs/<JEUS Manager or Engine Container name>'으로 JNDI에 bind하여,
                                       access하려는 곳에서 해당 export-name으로 lookup하여 JMXMP Connector를 얻을 수 있다.
                    ]]>
    </text>
           
    <text key="jmx-connectorType.rmi-connector"><![CDATA[
                        [Description]: JMX Connector로 RMI Connector를 사용한다.
                            만약 jmxmp-connector와 같이 설정되어 있는 경우에는 JEUS system 내부적으로는 JMXMP Connector를 사용한다.
                            또한, 이 경우에는 rmi-connector의 ref-export-name이 별도로 설정되어 있어야 한다.
                            이 이름이 JEUS에서 기본적으로 사용하는 이름과 같거나 설정이 되어있지 않다면 exception이 발생한다.
                            좀 더 자세한 내용이 하위 export-name과 ref-export-name에 있다.
                    ]]>        
    </text>
           
    <text key="jmxmp-connectorType.jmxmp-connector-port"><![CDATA[
                        [Description]: 다른 process에서 이 Engine Container의 JMX를 access할 때 사용하는
                        JEUSMP Connector의 listen port를 지정한다. 만약 이 값이 0이거나 지정하지 않으면
                        JEUSMP Connector가 사용하는 listen port를 따로 만들지 않고 JEUS의 공통 port를 사용한다.
                            만약 JEUS의 JMX RemoteAPI를 사용하지 않고 다른 Runtime에서 JMXMP protocol로 접근하고자 한다면
                            이를 0이 아닌 다른 값으로 지정해야 한다.
                        [Defined Value]: [0]:
                                        jeus의 공통 port를 사용한다.
                    ]]>        
    </text>
           
    <text key="rmi-connectorType.rmi-connector-port"><![CDATA[
                        [Description]: 다른 process에서 이 Engine Container의 JMX를 access할 때 사용하는
                        RMI Connector의 port를 지정한다.
						[Defined Value]: [0]:
										random하게 port를 지정한다.
                    ]]>          
    </text>
           
    <text key="rmi-connectorType.export-name"><![CDATA[
                        [Description]: JEUS의 기본 export name 대신에 지정한 export-name을 사용할때 설정한다.
                              이 export name은 JMXServiceURL의 URL path에 들어가게 되며,
                       RMI Connector를 시작할 때 RMIServer stub 객체를 Naming Server에 bind하는 데 이용한다.
                       RMIServer stub의 기본 export name은 '/mgmt/rmi/<JEUS Manager or Engine Container name>' 이다.
                       JEUS5 Fix#27부터 RMIServer stub 객체를 export name으로 bind하던 것을 rebind하도록 수정하였다.
                              이전에는 서로 다른 JVM (JEUS Manager와 Engine Container들)에서 동일한 export name을 지정할 경우,
                       JEUS Manager에 있는 JNDI에 bind하는 과정에서 exception이 발생하고 booting을 실패하였지만,
                              변경 이후 rebind하므로 exception이 발생하지 않고 최후 RMIServer stub 객체만을 bind한다.
                              따라서, 동일한 export-name을 여러 JVM에서 사용하지 않도록 주의한다.

                    ]]>          
    </text>
           
    <text key="rmi-connectorType.ref-export-name"><![CDATA[
                        [Description]: 이 RMI connector를 얻을수 있는 JNDI name을 JEUS의 기본 JNDI name이 아닌 다른 name으로 지정하고자 할 때 사용한다.
                             이 ref-export-name으로 lookup하면 RMIConnector 객체를 얻을수 있다.
                      RMI Connector를 JMXMP Connector와 같이 사용하지 않을 경우,
                      ref-export-name을 설정하지 않으면 '/mgmt/rmbs/<JEUS Manager or Engine Container name>'으로 RMI Connector Reference를 bind한다.
                      RMI Connector를 JMXMP Connector와 같이 사용하는 경우,
                            반드시 JMXMP Connector Reference의 export name과 다른 이름으로 지정해주어야 한다.
                      RMI Connector는 JNDI에 지정한 name으로 rebind하므로, export-name과 같이 여러 JVM에서 동일한 ref-export-name을 사용하지 않도록 주의한다.
                     ]]>
    </text>
           
    <text key="snmp-adaptorType.snmp-adaptor-port"><![CDATA[
                        [Description]: SNMP 어댑터의 리스너 포트
                    ]]>          
    </text>
           
    <text key="snmp-adaptorType.snmp-version"><![CDATA[
                        [Description]: SNMP 버전을 지정하며 1, 2 또는 3을 지정할 수 있다
                    ]]>          
    </text>
           
    <text key="snmp-adaptorType.snmp-max-packet-size"><![CDATA[
						[Description]: SNMP 패킷에 대한 최대값을 설정하며 최소 256바이트부터 설정 할 수 있다.
                    ]]>          
    </text>
           
    <text key="snmp-adaptorType.snmp-security"><![CDATA[
						[Description]: 보안을 적용시킬 것 인지를 설정한다. 보안은 SNMP 버전 3에서만 지정이 가능 하다.
                    ]]>          
    </text>
           
    <text key="snmp-adaptorType.trap-demon"><![CDATA[
						[Description]: 장애 상황 발생시 TRAP 메세지를 보낼 서버를 설정한다. 여러 개 설정이 가능하며
						설정된 모든 ip, address로 메세지를 보낸다.
                    ]]>          
    </text>
           
    <text key="snmp-adaptorType.pooling"><![CDATA[
                        [Description]: SNMP Server에서 요청을 처리하는 쓰레드로 구성되어 있다. 아래 element는 이
                        쓰레드를 관리하는 pool을 설정한다.
                    ]]>          
    </text>
           
    <text key="trap-demonType.ip-address"><![CDATA[
                        [Description]: Demon의 IP address
                        [Value Description]: a valid IP address
                        [Example]: <host-name>111.111.111.1</host-name>
                    ]]>          
    </text>
           
    <text key="trap-demonType.port"><![CDATA[
                        [Description]: Demon의 port
                        [Value Description]: a port number
                        [Example]: <port>8888</port>
                    ]]>          
    </text>
           
    <text key="tm-configType.use-nio"><![CDATA[
                        [Description]: TM 사이의 통신을 Nonblocking I/O를 이용할지의 여부를 결정한다.
                        [Performance Recommendation]: 많은 수의 Engine Container 및 client를 사용할 경우에는
                        Nonblocking I/O가 더 좋은 효율을 보인다. transaction에 참여하는 JVM process의 수가 적다면
                        Blocking I/O가 더 효율적일수 있다.
                    ]]>          
    </text>
           
    <text key="tm-configType.pooling"><![CDATA[
                        [Description]: TM pool은 트랜잭션을 처리하는 쓰레드로 구성되어 있다. 아래 element는 이
                        쓰레드를 관리하는 pool을 설정한다.
                    ]]>          
    </text>
           
    <text key="tm-configType.active-timeout"><![CDATA[
                        [Description]: 글로벌 트랜잭션이 시작되면 이 시간 안에 commit이 실행되어야 한다. 그렇지 않으면
                        트랜잭션 매니저가 rollback 시켜버린다.
                        [Value Description]: milliseconds 단위의 시간 간격.
                    ]]>          
    </text>
           
    <text key="tm-configType.prepare-timeout"><![CDATA[
                        [Description]: transaction이 commit될때 Root Coordinator는 이 시간 내에 Sub Coordinator와
                        리소스 매니저로부터 ‘prepare’ 신호를 받아야 한다. 만약 받지를 못하면 Root Coordinator는
                        글로벌 트랜잭션을 rollback 시킨다.
                        [Value Description]: milliseconds 단위의 시간 간격.
                    ]]>          
    </text>
           
    <text key="tm-configType.prepared-timeout"><![CDATA[
                        [Description]: transaction이 commit되어 Root Coordinator로부터 prepare message를 받으면
                        Sub Coordinator는 prepare에 대한 응답을 Root Coordinator로 보내고 global decision을 기다린다.
                        Sub Coordinator는 자신의 Root Coordinator로부터 여기에 설정된 시간 안에 global decision을
                        받아야 한다. 만약 이 시간 내에 받질 못하면, Root Coordinator 로 다시 ‘prepare’에 대한 응답 메시지를
                        보낸다. 그래도 여전히 시간 내에 global decision이 오지 않는다면, Root Coordinator로 메시지를 보내고
                        global decision을 기다리기를 계속 한다.
                        [Value Description]: milliseconds 단위의 시간 간격.
                    ]]>          
    </text>
           
    <text key="tm-configType.commit-timeout"><![CDATA[
                        [Description]: Root Coordinator는 Sub Coordinator와 리소스 매니저에거 commit message를
                        보낸 후 이 시간 이내에 ‘commit’이나 ‘rollback’ 에 대한 결과를 받아야 한다. 만약 결과가 오지 않으면,
                        Root Coordinator는 글로벌 트랜잭션을 ‘Uncompleted List’에 기록해서, 트랜잭션이 완전히 끝나지
                        않았음을 남겨둔다.
                        [Value Description]: milliseconds 단위의 시간 간격.
                    ]]>          
    </text>
           
    <text key="tm-configType.recovery-timeout"><![CDATA[
                        [Description]: 이 값은 트랜잭션 복구 시에 사용된다. 트랜잭션 매니저는 트랜잭션 복구를 위해서
                        복구될 트랜잭션 정보를 가져오려고 한다. 만약 다른 트랜잭션 매니저에서 이 시간 내에 복구 정보를
                        알려주지 않으면, 트랜잭션 복구를 시스템 관리자에게 남겨두고 더 이상 진행하지 않는다.
                        [Value Description]: milliseconds 단위의 시간 간격.
                    ]]>          
    </text>
           
    <text key="tm-configType.uncompleted-timeout"><![CDATA[
                        [Description]: 트랜잭션 매니저는 전체 트랜잭션 처리를 완료하기 위해, 실패한 글로벌 트랜잭션의
                        목록을 보관한다. 완료되지 못한 글로벌 트랜잭션의 정보는 복구 처리시에 사용되므로, 이 타임 아웃
                        시간까지 보관된다. 그러므로 이 시간이 너무 짧으면 복구 정보가 빨리 지워지게 되고, 트랜잭션
                        매니저가 해당 글로벌 트랜잭션의 무결성을 복구할 수 없게 된다. 그 결과 글로벌 트랜잭션 복구를
                        위해서, 시스템 관리자가 많은 작업을 직접 처리해야만 한다.
                        [Value Description]: milliseconds 단위의 시간 간격.
                    ]]>          
    </text>
           
    <text key="tm-configType.capacity"><![CDATA[
                        [Description]: 이 값을 사용해서 JEUS 트랜잭션 매니저는 내부 구조를 최적화시킨다. 트랜잭션 매니저가
                        동시에 처리하는 글로벌 트랜잭션의 개수를 고려해서 값을 정한다.
                        [Performance Recommendation]: 이 값은 트랜잭션 매니저가 처리하는 동시 트랜잭션의 수에 가깝게
                        세팅해야 한다.
                    ]]>          
    </text>
           
    <text key="tm-configType.recovery-log-file"><![CDATA[
                        [Description]: TM recovery에서 사용할 logging file에 대한 설정을 지정한다.
                    ]]>          
    </text>
           
    <text key="naming-serverType.server"><![CDATA[
                        [Description]: server element는 JNSServer가 다른 JNSServer와 그것의 JNSLocal과 연결을 관리하기
                        위해 사용하는 리소스들을 정한다.
                    ]]>          
    </text>
           
    <text key="naming-serverType.local"><![CDATA[
                        [Description]: local element는 JNSLocal이 JNSServer와 JNDI트리의 내용들을 얻기 위해서
                        사용하는 리소스를 정한다.
                    ]]>          
    </text>
           
    <text key="jns-serverType.use-nio"><![CDATA[
                        [Description]: JNSServer가 Nonblocking I/O를 사용해서 통신을 할지의 여부를 지정한다.
                        [Performance Recommendation]: 많은 수의 Engine Container 및 client를 사용할 경우에는
                        Nonblocking I/O가 더 좋은 효율을 보인다. JNDI를 사용하는 client의 수가 적다면
                        Blocking I/O가 더 효율적일수 있다.
                    ]]>          
    </text>
           
    <text key="jns-serverType.export-cos-naming"><![CDATA[
                        [Description]: Export-cos-naming element는 JEUS가 COS Naming Server(tnameserver)로 작동할
                        것인지 아닌지를 정한다. 만약 true이면,tnameserver는 %JEUS_BASEPORT%+4 포트를 가지고 실행을
                        시작할 것이다.
                    ]]>          
    </text>
           
    <text key="jns-serverType.backlog-size"><![CDATA[
                        [Description]: backlog-size element는 다른 Naming Server의 접속을 받아들이는 한계인 back log의
                        크기를 정한다.
                    ]]>          
    </text>
      <ref key="jns-serverType">jndi-propertyGroup</ref>
      <ref key="localType">jndi-propertyGroup</ref>
           
    <text key="resourceType.data-source"><![CDATA[
                        [Description]: 어플리케이션에서 사용할 수 있는 datasource를 정의 한다.
                    ]]>          
    </text>
           
    <text key="resourceType.mail-source"><![CDATA[
                        [Description]: Mail Source는 클라이언트 어플리케이션에서 메일을 보낼 때 사용되어질
                        여러 SMTP 호스트를 설정한다.
                    ]]>          
    </text>
           
    <text key="resourceType.url-source"><![CDATA[
                        [Description]: URL Source 는 클라이언트가 표준 JNDI lookup 방식으로 URL resource에 접근
                        가능하도록 하기 위해 Naming Server의 JNDI name에 URL 주소를 bind 하는데 사용된다.
                    ]]>          
    </text>
           
    <text key="resourceType.external-source"><![CDATA[
                        [Description]: 이 element는 IBM MQ나 TMAX 에 연결할 때 사용된다.
                    ]]>          
    </text>
           
    <text key="resourceType.jaxr-source"><![CDATA[
                        [Description]: JAXR 어플리케이션에서 사용할 수 있는 xml-registry source를 정의 한다.
                    ]]>          
    </text>
           
    <text key="external-sourceType.jms-source"><![CDATA[
                        [Description]: JEUS Transation Manager 와 IBM MQ나 Sonic MQ 등 messasing source 제품 사이의 상호 작용을 하기위해서는
                        아래 element들을 설정해야 한다. 이 절의 설정에 대한 자세한 정보는 해당 제품 메뉴얼을 참조하기 바란다.
                    ]]>          
    </text>
           
    <text key="external-sourceType.tmax-source"><![CDATA[
                        [Description]: TMAX 서버와 관련된 서비스를 지정하기 위하여 사용한다.
                        아웃바운드 서비스를 위한 데이터소스의 설정 및 인바운드 서비스를 위한 Jtmax 리스너 설정이 여기에 포함된다.
                    ]]>          
    </text>
           
    <text key="jmsSourceType.vendor"><![CDATA[
                        [Description]: jms source 드라이버 밴더의 이름.
                    ]]>          
    </text>
           
    <text key="jmsSourceType.factory-class-name"><![CDATA[
                        [Description]: jms source 드라이버의 factory 클래스 이름.
                    ]]>          
    </text>
           
    <text key="jmsSourceType.resource-type"><![CDATA[
                        [Description]: jms source type
                    ]]>          
    </text>
           
    <text key="jmsSourceType.export-name"><![CDATA[
                        [Description]: JNDI 에 등록되어 서비스 되는 이름이다.
                    ]]>          
    </text>
           
    <text key="jmsSourceType.queue"><![CDATA[
                        [Description]: resource-type이 Q일때만 사용된다.자세한 것은 IBM MQ 나 Sonic MQ 매뉴얼을 참조하기 바란다.
                    ]]>          
    </text>
           
    <text key="jmsSourceType.queueManager"><![CDATA[
                        [Description]: T type을 제외한 ibmmq를 사용할때만 사용된다. 자세한 것은 IBM MQ 매뉴얼을 참조하기 바란다.
                    ]]>          
    </text>
           
    <text key="jmsSourceType.topic"><![CDATA[
                        [Description]: resource-type이 T일때만 사용된다.자세한 것은 IBM MQ 나 Sonic MQ 매뉴얼을 참조하기 바란다.
                    ]]>          
    </text>
           
    <text key="jmsSourceType.property"><![CDATA[
                        [Description]: jms source 설정에 필요한 property들을 기술한다.
                    ]]>          
    </text>
           
    <text key="tmaxSourceType.fdl-file"><![CDATA[
                        [Description]: TMAX FDL 버퍼를 사용하기 위한 필드 테이블의 위치를 지정한다.
                        [Value Description]: a tmax fdl filename
                        [Example]: <fdl-file>/home/tmax/fdl/tmax.fdl</fdl-file>
                    ]]>          
    </text>
           
    <text key="tmaxSourceType.default-charset"><![CDATA[
                        [Description]: TMAX 버퍼의 내용에 적용되는 캐릭터셋을 지정한다. 지정하지 않으면 사용중인 JDK 디폴트값이 사용된다.
                        [Value Description]: a encoding name
                        [Example]: <default-charset>euc-kr</default-charset>
                    ]]>          
    </text>
           
    <text key="tmaxSourceType.tmax"><![CDATA[
                        [Description]: J2EE 어플리케이션에서 TMAX 의 서비스를 사용하기 위한 데이터소스를 설정한다.
                    ]]>          
    </text>
           
    <text key="tmaxSourceType.tmax-cluster"><![CDATA[
                        [Description]: 다수의 TMAX 서버가 존재하는 경우 failover 및 부하분산을 위한 데이터소스 클러스터링을 설정한다.
                    ]]>          
    </text>
           
    <text key="tmaxSourceType.jtmax"><![CDATA[
                        [Description]: TMAX 에서 EJB 를 호출하기 위한 Jtmax 리스너를 설정한다.
                    ]]>          
    </text>
           
    <text key="tmaxSourceType.tmax-monitor"><![CDATA[
                        [Description]: TMAX 데이터소스 내에 존재하는 커넥션 풀의 상태를 점검하기 위한 모니터링 주기 및 방식을 지정한다.
                    ]]>          
    </text>
           
    <text key="tmaxClusterType.export-name"><![CDATA[
                        [Description]: TMAX 클러스터 데이터소스가 바인딩 되는 JNDI 이름이다.
                        여기에 지정된 이름은 MBean 이름으로 사용되며 <tmax-source> 태그내에서 유일하여야 한다.
                        [Value Description]: a JNDI export name
                        [Example]: <export-name>webtCluster</export-name>
                    ]]>          
    </text>
           
    <text key="tmaxClusterType.tmax-delegation-source"><![CDATA[
                        [Description]: 클러스터링에 참여하는 데이터소스들의 JNDI 이름의 리스트를 지정한다.
                        [Value Description]: a JNDI export name of TMAX datasource
                        [Example]: <tmax-delegation-source>webtResource1</tmax-delegation-source>
                                   <tmax-delegation-source>webtResource2</tmax-delegation-source>
                    ]]>          
    </text>
           
    <text key="tmaxType.export-name"><![CDATA[
                        [Description]: TMAX 데이터소스가 바인딩 되는 JNDI 이름이다.
                        여기에 지정된 이름은 MBean 이름으로 사용되며 <tmax-source> 태그내에서 유일하여야 한다.
                        [Value Description]: a JNDI export name
                        [Example]: <export-name>webtResource</export-name>
                    ]]>          
    </text>
           
    <text key="tmaxType.webt-logging"><![CDATA[
                        [Description]: TMAX 데이터소스에서 남기는 로깅 정책에 대한 설정이다.
                        [Example]: <webt-logging> ... </webt-logging>
                    ]]>          
    </text>
           
    <text key="tmaxType.host-name"><![CDATA[
                        [Description]: TMAX 서버의 IP 어드레스를 지정한다.
                        [Value Description]: a valid IP address
                        [Example]: <host-name>111.111.111.1</host-name>
                    ]]>          
    </text>
           
    <text key="tmaxType.port"><![CDATA[
                        [Description]: TMAX 서버의 TCP PORT 값을 지정한다.
                        [Value Description]: a port number
                        [Example]: <port>8888</port>
                    ]]>          
    </text>
           
    <text key="tmaxType.backup-host-name"><![CDATA[
                        [Description]: 백업 서버를 사용하는 경우 백업 TMAX 서버의 IP 어드레스를 지정한다.
                        [Value Description]: a valid IP address
                        [Example]: <backup-addresss>111.111.111.2</backup-address>
                    ]]>          
    </text>
           
    <text key="tmaxType.backup-port"><![CDATA[
                        [Description]: 백업 서버를 사용하는 경우 백업 TMAX 서버의 TCP PORT 값을 지정한다.
                        [Value Description]: a port number
                        [Example]: <backup-port>8889</backup-port>
                    ]]>          
    </text>
           
    <text key="tmaxType.fdl-file"><![CDATA[
                        [Description]: TMAX FDL 버퍼를 사용하기 위한 필드 테이블 파일의 위치를 지정한다.
                        [Value Description]: a tmax fdl filename
                        [Example]: <fdl-file>/home/tmax/fdl/tmax.fdl</fdl-file>
                    ]]>          
    </text>
           
    <text key="tmaxType.default-charset"><![CDATA[
                        [Description]: TMAX 버퍼의 내용에 적용되는 캐릭터셋을 지정한다. 지정하지 않으면 사용중인 JDK 디폴트값이 사용된다.
                        <tmax-source> 태그 밑의 <default-charset>에 지정된 내용을 오버라이딩 하게 된다.
                        [Value Description]: a encoding name
                        [Example]: <default-charset>euc-kr</default-charset>
                    ]]>          
    </text>
           
    <text key="tmaxType.header-type"><![CDATA[
                        [Description]: TMAX 데이터소스에서 사용하는 기본 헤더 타입을 설정한다. default, extendedV2, extendedV3, extendedV4 중에 결정할 수 있다.
                        <tmax-source> 태그 밑의 <header-type>에 지정된 내용을 오버라이딩 하게 된다.
                        [Value Description]: tmax header type
                        [Example]: <header-type>extendedV4</header-type>
                    ]]>          
    </text>
           
    <text key="tmaxType.support-xa"><![CDATA[
                        [Description]: XA 트랜잭션 서비스를 사용할 것인지를 결정한다.
                        커넥션의 메인 및 백업 어드레스는 반드시 JeusGW 의 어드레스를 사용해야만 한다.
                        XA 트랜잭션을 사용하는 경우 RQ 나 대화형 서비스의 사용은 제한된다.
                        [Value Description]: xa transaction support
                        [Example]:<support-xa>true</support-xa>
                    ]]>          
    </text>
           
    <text key="tmaxType.fair-provision"><![CDATA[
                        [Description]: 커넥션 풀에서 커넥션을 얻는 정책을 결정한다.
                        true 로 설정하는 경우 모든 커넥션을 순서대로 제공하며 false 인 경우 일부 커넥션에 사용량이 몰리게 된다.
                        [Value Description]: connection provisioning policy
                        [Example]:<fair-provision>true</fair-provision>
                    ]]>          
    </text>
           
    <text key="tmaxType.check-acquired"><![CDATA[
                        [Description]: 커넥션 풀에서 얻은 커넥션에 대해 liveness 체크를 할 것인지를 설정한다.
                        [Value Description]: liveness-check for acquired connection from pool
                        [Example]:<check-acquired>true</check-acquired>
                    ]]>          
    </text>
           
    <text key="tmaxType.enable-autoclose"><![CDATA[
                        [Description]: 사용후 반납되지 않은 커넥션을 자동적으로 풀에 반환한다. servlet/jsp 에서만 유효하다.
                        [Value Description]: returns not closed connection to pool automatically
                        [Example]:<enable-autoclose>true</enable-autoclose>
                    ]]>          
    </text>
           
    <text key="tmaxType.service-timeout"><![CDATA[
                        [Description]: 서비스 요청에 대해 여기에 지정된 시간동안 응답을 없는 경우 익셉션을 반환하게 된다.
                        0 이하의 값을 설정하면 XA 사용 여부에 따라 디폴트 값이 결정된다.
                        [Value Description]: millisecond
                        [Example]: <service-timeout>60000</service-timeout>
                    ]]>          
    </text>
           
    <text key="tmaxType.transaction-timeout"><![CDATA[
                        [Description]: 트랜잭션을 사용하는 경우 이 시간동안 처리되지 않은 트랜잭션은 롤백처리된다.
                        0 이하의 값을 설정하면 XA 사용 여부에 따라 디폴트 값이 결정된다.
                        [Value Description]: millisecond
                        [Example]: <transaction-timeout>60000</transaction-timeout>
                    ]]>          
    </text>
           
    <text key="tmaxType.transaction-block-timeout"><![CDATA[
                        [Description]: 트랜잭션에 대하여 커밋이나 롤백을 요청했을 때 여기에 지정된 시간동안 응답을 없는 경우 익셉션을 반환하게 된다.
                        [Value Description]: millisecond
                        [Example]: <transaction-block-timeout>60000</transaction-block-timeout>
                    ]]>          
    </text>
           
    <text key="tmaxType.connect-timeout"><![CDATA[
                        [Description]: 데이터 소스에서 커넥션을 가져올때 사용되는 타임아웃 값이다.
                        이 시간내에 커넥션을 얻거나 새로 만들지 못하면 익셉션을 반환하게 된다.
                        [Value Description]: millisecond
                        [Example]: <connect-timeout>20000</connect-timeout>
                    ]]>          
    </text>
           
    <text key="tmaxType.security"><![CDATA[
                        [Description]: SSL 을 사용하거나 TMAX 서버에서 보안 인증을 요구하는 경우에 지정한다.
                        [Example]: <securityType> ... </securityType>
                    ]]>          
    </text>
           
    <text key="tmaxType.tmax-connection-pool"><![CDATA[
                        [Description]: TMAX 서버와의 커넥션 풀에 대한 설정이다.
                        [Example]: <tmax-connection-pool> ... </tmax-connection-pool>
                    ]]>          
    </text>
           
    <text key="tmaxType.tmax-property"><![CDATA[
                        [Description]: 몇가지 특수한 속성을 지정할때 사용한다. 이벤트 서비스의 설정은 여기에서 이루어진다.
                        [Example]: <tmax-property> ... </tmax-property>
                    ]]>          
    </text>
           
    <text key="jtmaxType.context-name"><![CDATA[
                        [Description]: Jtmax 리스너의 컨텍스트 이름을 지정한다.
                        여기에 지정된 이름은 MBean 이름으로 사용되며 <tmax-source> 태그내에서 유일하여야 한다.
                        [Example]: <context-name>JTMAX1</context-name>
                    ]]>          
    </text>
           
    <text key="jtmaxType.listen-port"><![CDATA[
                        [Description]: Jtmax 리스너의 서비스 포트를 지정한다.
                        [Example]: <listen-port>9800</listen-port>
                    ]]>          
    </text>
           
    <text key="jtmaxType.webt-logging"><![CDATA[
                        [Description]: Jtmax 리스너에서 남기는 로깅 방식에 대한 설정이다.
                    ]]>          
    </text>
           
    <text key="jtmaxType.pooling"><![CDATA[
                        [Description]: Jtmax 내부적으로 사용되는 쓰레드풀에 대한 설정이다.
                    ]]>          
    </text>
           
    <text key="jtmaxType.ejb-service"><![CDATA[
                        [Description]: TMAX 에서 전달된 서비스 이름을 EJB 메쏘드와 매칭시키기 위한 설정이다.
                    ]]>          
    </text>
           
    <text key="jtmaxType.beans-service"><![CDATA[
                        [Description]: TMAX 에서 전달된 서비스 이름을 Java Beans 와 매칭시키기 위한 설정이다.
                    ]]>          
    </text>
           
    <text key="tmaxMonitorType.monitor-interval"><![CDATA[
                        [Description]: TMAX 데이터소스의 상태를 점검하는 주기이다.
                        [Value Description]: millisecond
                        [Example]: <monitor-interval>600000</monitor-interval>
                    ]]>          
    </text>
           
    <text key="tmaxMonitorType.check-alive"><![CDATA[
                        [Description]: 지정된 주기마다 liveness 체크를 통하여 커넥션들의 상태를 점검한다.
                    ]]>          
    </text>
           
    <text key="tmaxMonitorType.enable-failback"><![CDATA[
                        [Description]: 백업 어드레스를 지정한 데이터소스에 대해서 메인 서버의 문제가 해결된 경우 다시 메인서버의 서비스를 이용하도록 한다.
                    ]]>          
    </text>
           
    <text key="jtmax-ejb-serviceType.name"><![CDATA[
                        [Description]: 해당 서비스의 이름이다. Jtmax 컨텍스트 내에서 유일해야 한다.
                        [Example]: <name>TOUPPER</name>
                    ]]>          
    </text>
           
    <text key="jtmax-ejb-serviceType.export-name"><![CDATA[
                    [Description]: 호출하고자 하는 EJB 의 JNDI 바인딩 이름이다.
                    [Example]: <export-name>StringServices</export-name>
                ]]>          
    </text>
           
    <text key="jtmax-ejb-serviceType.method-name"><![CDATA[
                    [Description]: 호출 대상이 되는 메쏘드의 이름이다.
                    [Example]: <method-name>toupper</method-name>
                ]]>          
    </text>
           
    <text key="jtmax-ejb-serviceType.method-signiture"><![CDATA[
                    [Description]: 호출 대상이 되는 메쏘드 인자값의 타입을 지정한다.
                    [Example]: <method-signiture>String,String</method-signiture>
                ]]>          
    </text>
           
    <text key="jtmax-beans-serviceType.name"><![CDATA[
                        [Description]: 해당 서비스의 이름이다. Jtmax 컨텍스트 내에서 유일해야 한다.
                        [Example]: <name>TOUPPER</name>
                    ]]>          
    </text>
           
    <text key="jtmax-beans-serviceType.class-name"><![CDATA[
                    [Description]: 사용하고자 하는 Beans의 FQCN 이다.
                    해당 클래스는 tmax.jtmax.JtmaxService 를 구현해야 하며, 디폴트 생성자를 제공해야 한다.
                    [Example]: <class-name>com.tmax.service.EJBInvoker</class-name>
                ]]>          
    </text>
           
    <text key="jtmax-beans-serviceType.create-per-invoke"><![CDATA[
                    [Description]: 오브젝트를 서비스 호출시 마다 매번 새로 생성할 것인지를 설정한다.
                    [Example]: <create-per-invoke>true</create-per-invoke>
                ]]>          
    </text>
           
    <text key="jtmax-beans-serviceType.property"><![CDATA[
                        [Description]: 사용하고자 하는 Beans의 프로퍼티를 설정한다.
                    ]]>          
    </text>
           
    <text key="tmax-connection-poolType.pooling"><![CDATA[
                        [Description]: 풀 설정.
                    ]]>          
    </text>
           
    <text key="tmax-securityType.encryption"><![CDATA[
                        [Description]: TMAX 서버와의 통신에서 SSL 을 사용할 것인지를 결정한다.
                        [Example]:<encryption>true</encryption>
                    ]]>          
    </text>
           
    <text key="tmax-securityType.user-name"><![CDATA[
                        [Description]: 사용자 보안 인증을 위해서 사용자의 이름을 설정한다.
                        [Value Description]: a user name
                        [Example]:<user-name>admin</user-name>
                    ]]>          
    </text>
           
    <text key="tmax-securityType.user-password"><![CDATA[
                        [Description]: 사용자 보안 인증을 위해서 사용자의 암호를 설정한다.
                        [Value Description]: a password string
                        [Example]:<user-password>tmax</user-password>
                    ]]>          
    </text>
           
    <text key="tmax-securityType.domain-name"><![CDATA[
                        [Description]: 도메인 보안 인증을 위해서 도메인 이름을 설정한다.
                        [Value Description]: a domain name
                        [Example]:<domain-name>tmaxadm</domain-name>
                    ]]>          
    </text>
           
    <text key="tmax-securityType.domain-password"><![CDATA[
                        [Description]: 도메인 보안 인증을 위해서 도메인 암호를 설정한다.
                        [Value Description]: a domain password
                        [Example]:<domain-password>tmaxadm</domain-password>
                    ]]>          
    </text>
           
    <text key="tmax-propertyType.name"><![CDATA[
                        [Description]: WebT Service에서 사용자 속성을 추가하고자 할때의 Key값.
                        [Example]: <name>eventHandler</name>
                    ]]>          
    </text>
           
    <text key="tmax-propertyType.value"><![CDATA[
                        [Description]: WebT Service에서 사용자 속성을 추가하고자 할때의 Value값.
                        [Example]: <value>GenericServlet</value>
                    ]]>          
    </text>
           
    <text key="webt-file-handlerType.file-name"><![CDATA[
                        [Description]: 로그 파일의 상대 경로 혹은 절대 경로를 지정한다.
                        상대 경로의 경우 $JEUS_HOME/logs 디렉토리 밑에 생성되며 이 값을 지정하지 않는 경우 STDOUT 으로 로그가 나오게 된다.
                        OS가 Windows인 경우에는 파일 구분자를 '\'가 아닌 '\\'로 해 주어야 한다.
                        [Example]: <file-name>/home/jeus/log/webt.log</file-name>
                    ]]>          
    </text>
           
    <text key="webt-file-handlerType.level"><![CDATA[
                        [Description]: 로그 레벨을 지정한다. none, info, debug, dev 중에서 결정할 수 있다.
                        [Value Description]: none/info/debug
                        [Defined Value]:
                        [none]: 로그 메시지를 남기지 않는다.
                        [info]: 처음 설정 내용과 비정상적인 상황에 대한 로그를 남긴다.
                        [debug]: WebT 에서 일어나는 모든 상황에 대한 로그를 남긴다.
                        [dev]: 네트웍 패킷을 포함한 모든 로그를 출력하도록 한다.
                        [Example]: <level>debug</level>
                    ]]>          
    </text>
           
    <text key="webt-file-handlerType.valid-day"><![CDATA[
                        [Description]: 로그 파일을 사용하는 경우 며칠 주기로 파일 이름을 갱신할 것인지를 지정한다.
                        0이나 음수값을 지정하는 경우 하나의 파일을 사용하게 된다.
                        파일 이름은 별도로 지정하지 않으면 아래의 규칙에 따라 만들어진다.
                        webt.log -> webt_MMddyyyy.log
                        [Value Description]: a number of days
                        [Example]: <valid-day>1</valid-day>
                    ]]>          
    </text>
           
    <text key="webt-file-handlerType.buffer-size"><![CDATA[
                        [Description]: 로그를 남길때 사용되는 버퍼의 크기를 지정한다.
                        [Value Description]: bytes
                        [Example]: <buffer-size>1024</buffer-size>
                    ]]>          
    </text>
           
    <text key="mail-sourceType.mail-entry"><![CDATA[
                        [Description]: 각 mail entry는 JNDI naming lookup을 통해서 이용하는 e-mail host를 말한다.
                        이 기능에 대한 더 많은 정보는 JavaMail 1.2 스펙을 참조하기 바란다.
                    ]]>          
    </text>
           
    <text key="mail-entryType.export-name"><![CDATA[
                        [Description]: 클라이언트는 서비스에 등록되어 있는 이름을 간접적으로 사용한다. 이는 클라이언트
                        디스크립터에서 export name으로 bind한 것이다. 이 이름은 java.mail.Session 객체로 bind된다.
                    ]]>          
    </text>
           
    <text key="mail-entryType.mail-property"><![CDATA[
                        [Description]: 이는 mail host를 지정하거나 접근하는데 사용된다.
                    ]]>          
    </text>
           
    <text key="mail-propertyType.name"><![CDATA[
                        [Description]: mail property의 이름. property 이름은 JavaMail 1.2 스펙을 따라야 한다
                        [Defined Value]:    [mail.user]:
                                                서버에서 인식하는 사용자 명.
                                            [mail.host]:
                                                메일 서버의 IP 주소.
                                            [mail.from]:
                                                보내는 측의 e-mail.
                                            [mail.transport.protocol]:
                                                사용할 메일 프로토콜.
                    ]]>          
    </text>
           
    <text key="mail-propertyType.value"><![CDATA[
                        [Description]: mail property의 값.
                    ]]>          
    </text>
           
    <text key="url-sourceType.url-entry"><![CDATA[
                        [Description]: 각 entry 는 실제 URL 주소와JNDI name 을 매핑한다. 이는 URL이 Naming Server에
                        bind 되는것을 말한다.
                    ]]>          
    </text>
           
    <text key="url-entryType.export-name"><![CDATA[
                        [Description]: JNDI name 은 Naming Server에 URL을 bind할 때 사용된다.
                        [Example]: <export-name>MYURL</export-name>
                    ]]>          
    </text>
           
    <text key="url-entryType.url"><![CDATA[
                        [Description]: URL은 bind된 JNDI Server의 JNDI name 에 매핑된다.
                        [Example]: <url>http://www.foo.com</url>
                    ]]>          
    </text>
           
    <text key="data-sourceType.database"><![CDATA[
                        [Description]: DataSource를 구성하기 위해 JDBC드라이버에 필수 적인 특성들을 담고 있다.
                    ]]>          
    </text>
           
    <text key="data-sourceType.cluster-ds"><![CDATA[
                        [Description]: 어플리케이션 서버 차원에서 데이터베이스의 FailOver 기능을 제공하기 위해서
                        데이터소스 클러스터링을 사용한다. 데이터소스 클러스터링은 근본적으로는 하나의 JNDI export
                        name을 가진 데이터소스 인스턴스이다. 이 인스턴스는 DB 호출을 받아서 여러 DB(실제 데이터소스
                        ) 중 하나로 전달시켜주는 역할을 한다. 만약 주 DB가 다운되었을 경우, 클러스터링의 다른 DB가
                        선택되어서 어플리케이션의 요청 사항을 처리하게 된다.
                    ]]>          
    </text>
           
    <text key="cluster-dsType.export-name"><![CDATA[
                        [Description]: 데이터소스 클러스터링의 export name
                    ]]>          
    </text>
           
    <text key="cluster-dsType.is-pre-conn"><![CDATA[
                        [Description]: 이 기능이 사용되면, 데이터소스 클러스터링은 클러스터링 상의 모든 DB에서
                        Connection을 열게된다. 이것은 성능에는 좋지만 리소스의 절약면에서는 좋지 못하다. 만약
                        true로 설정하면 총 생성된 Connection의 개수가 <connection-pool> <pooling> <min>값과
                        동일하게 된다.
                        [Performance Recommendation]: 성능 향상을 위해서는 “true”를, 리소스의 절약을 위해서는
                        “false”를 설정한다.
                    ]]>          
    </text>
           
    <text key="cluster-dsType.data-source"><![CDATA[
                        [Description]: 이 클러스터링에 참여할 DB의 export name을 적는다. 리스트의
                        첫번째 DB가 주 DB로 동작한다.
                        [Example]: <data-source>datasource1</data-source>
                                   <data-source>datasource2</data-source>
                    ]]>          
    </text>
           
    <text key="databaseType.vendor"><![CDATA[
                        [Description]: JDBC 드라이버 밴더의 이름.
                    ]]>          
    </text>
           
    <text key="databaseType.export-name"><![CDATA[
                        [Description]: DataSource의 JNDI이름. 이 값은 Naming Server에 datasource를 등록할 때 사용될 것이다.
                    ]]>          
    </text>
           
    <text key="databaseType.data-source-class-name"><![CDATA[
                        [Description]: JDBC드라이버의 datasource클래스 이름.
                        [Example]: <data-source-class-name>oracle.jdbc.pool.OracleConnectionPoolDataSource</data-source-class-name>
                    ]]>          
    </text>
           
    <text key="databaseType.data-source-type"><![CDATA[
                        [Description]: DataSource의 타입.
                    ]]>          
    </text>
           
    <text key="databaseType.database-name"><![CDATA[
                        [Description]: Database의 이름. Oracle은 database의 SID.
                    ]]>          
    </text>
           
    <text key="databaseType.data-source-name"><![CDATA[
                        [Description]: DataSource의 이름. 드라이버 밴더에 의존적이며 일반적으로 DataSourceClassName
                        값과 동일하다.
                    ]]>          
    </text>
           
    <text key="databaseType.service-name"><![CDATA[
                        [Description]: 단지 i-net JDBC 드라이버에서만 해당하는 설정으로 Oracle DB의 SID를 지정한다.
                    ]]>          
    </text>
           
    <text key="databaseType.description"><![CDATA[
                        [Description]: DataSource에 대한 설명을 할수 있는 element이다.
                        [Example]: <description>이 DataSource는 Oracle XA를 사용한다.</description>
                    ]]>          
    </text>
           
    <text key="databaseType.network-protocol"><![CDATA[
                        [Description]: Database와 연결에 사용되는 프로토콜을 나타낸다.
                        [Value Description]: Sybase의 경우 “Tds”이고 JDBC 밴더에 의존적이다.
                    ]]>          
    </text>
           
    <text key="databaseType.port-number"><![CDATA[
                        [Description]: Database listener의 포트번호.
                    ]]>          
    </text>
           
    <text key="databaseType.server-name"><![CDATA[
                        [Description]: Database가 실행되는 곳의 서버이름.
                    ]]>          
    </text>
           
    <text key="databaseType.user"><![CDATA[
                        [Description]: DB 사용자 ID로 transaction처리등을 위해서는 충분한 system특권을 가지고 있어야 한다.
                    ]]>          
    </text>
           
    <text key="databaseType.password"><![CDATA[
                        [Description]: DB 사용자의 password이다.
                    ]]>          
    </text>
           
    <text key="databaseType.driver-type"><![CDATA[
                        [Description]: JDBC 드라이버의 타입으로 Oracle드라이버에만 해당되는 설정이다.
                        [Example]: <driver-type>thin</driver-type>
                    ]]>          
    </text>
           
    <text key="databaseType.auto-commit"><![CDATA[
                        [Description]:ConnectionPoolDataSource, DataSource type의 auto commit 설정을 지정한다.
                        [Example]: <auto-commit>true</auto-commit>
                    ]]>          
    </text>
           
    <text key="databaseType.stmt-query-timeout"><![CDATA[
                        [Description]: Statement에 사용 될 query timeout을 설정한다. 단위는 밀리초 이다.
                    ]]>          
    </text>
           
    <text key="databaseType.property"><![CDATA[
                        [Description]: DataSource에 설정할 property들을 지정한다. 이 설정은 위의 다른 설정들을 대체할수 있다.
                    ]]>          
    </text>
           
    <text key="databaseType.connection-pool"><![CDATA[
                        [Description]: Connection Pool를 위해 필요한 정보를 담고 있다.
                    ]]>          
    </text>
           
    <text key="typePropertyType.name"><![CDATA[
                        [Description]: 프로퍼티의 이름.
                    ]]>          
    </text>
           
    <text key="typePropertyType.type"><![CDATA[
                        [Description]: 프로퍼티의 값의 타입.
                        [Value Description]: primitive타입이나 java.lang.String, Primitive Wrapper Class등이 올 수 있다.
			또한 java.util.Properties type이 오면 value의 값을 property에 넣는다.
                        [Example]: <type>java.lang.Integer</type>
                    ]]>          
    </text>
           
    <text key="typePropertyType.value"><![CDATA[
                        [Description]: property의 값. type이 java.util.Properties이면 value는 key=value[,key=value]*
			형식이 된다.
                    ]]>          
    </text>
           
    <text key="database-connection-poolType.pooling"><![CDATA[
                        [Description]: DB Connection Pooling에 관한 정보를 담고 있다.
                    ]]>          
    </text>
           
    <text key="database-connection-poolType.wait-free-connection"><![CDATA[
                        [Description]: Pool안에 있는 모든 connection들이 점유되어 있을 때 연결요청을 핸들링하는
                        메소드를 정의한다.
                    ]]>          
    </text>
           
    <text key="database-connection-poolType.delegation-datasource"><![CDATA[
                        [Description]: 이 설정은 현재의 XA DataSource의 global/local transaction을
                        NonXA-DataSource로 넘길때 사용한다. 이 경우 여기에 지정된 datasource의 connection을
                        사용한다.
                        [Value Description]: 대리할 datasource의 export name.
                    ]]>          
    </text>
           
    <text key="database-connection-poolType.max-use-count"><![CDATA[
                        [Description]: 하나의 connetion은 이 element 회수만큼 사용되고 교체된다.
                        [Defined Value]: [0]:
                                            무한대를 의미한다. 즉, 한번 얻어진 Connection은 계속 사용된다.
                    ]]>          
    </text>
           
    <text key="database-connection-poolType.delegation-dba"><![CDATA[
                        [Description]: “DBA” 권한을 가진 특별한 <database> 를 지정한다. 이 connection은
                        DBMS 관리자의 connection으로, 특권을 가진 사용자 ID와 password로 생성된다.이 connection은
                        DB connection에 문제가 발생했을 때 JEUS가 사용한다. 예를 들면, JEUS가 DB connection을
                        종료하려고 하지만 Exception이 발생해서 실패하는 경우를 보자. 이 경우 JEUS는 low-level의
                        “kill” 시그널을 보내어 강제로 close하려고 한다. 이 때 이 “kill” 시그널을 보내기 위해서는
                        DBA connection이 필요하다.이 element에는 DBA connection을 설정한 DataSource의
                        export-name을 넣어준다. 그러면 이 DataSource를 사용해서 “kill” 시그널을 보내게 된다.
                        이 element는 Oracle과 Sybase에서만 적용된다.
                        [Value Description]: DBA database connection구성의 JNDI export name
                    ]]>          
    </text>
           
    <text key="database-connection-poolType.dba-timeout"><![CDATA[
                        [Description]: DBA 모드는 Oracle, Sysbase의 DB에서 사용된다. DBA 모드는 “kill” 시그널을
                        보낼 수 있는 권한을 말하며, DB상에 문제(Deadlock 같은)가 발생했을 때 어플리케이션 서버가
                        사용하게 된다. 이 element는 “kill” 시그널을 보내기 전, getConnection()부터 Connection
                        Pool로의 반환까지 동안의 시간을 지정한다. 이 시간이 초과되면 “kill” 시그널이 강제로
                        그 Connection을 중단시켜버린다. 이 옵션은 Oracle과 Sybase에서만 사용된다.
                        [Value Description]: millisecond 단위이다.
                    ]]>          
    </text>
           
    <text key="database-connection-poolType.check-query"><![CDATA[
                        [Description]: 어떤 DB는 getConnection()에서 새로운 DB Connection을 요청할 때 문제가 있어도
                        제대로 보고하지를 않는다. 이런 DB를 위해서 JEUS에서는 “check query”를 보내어서 Connection의
                        상태를 알아온다. check query는 간단한 SQL로서, 제대로 된 결과를 가져와야 한다. 이 query는
                        JEUS에서 Connection의 상태를 알아야 할 때 DB로 전송된다. Oracle, Sybase, MS SQL Server와
                        같이 setAutoCommit()을 통해서 에러를 보고할 수 있다면, 이 기능을 사용하지 않아야 한다.
                        [Value Description]: DB로 전송될 간단한 SQL 문장
                        [Example]: <check-query>SELECT check FROM checktable;</check-query>
                        [Performance Recommendation]: Oracle, Sybase, MS SQL에서는 성능 저하가 발생하므로 사용하지 않는다.
                    ]]>          
    </text>
           
    <text key="database-connection-poolType.check-query-period"><![CDATA[
                        [Description]: 어떤 DB의 configuration의 경우 방화벽이 JEUS와 DB사이에 구성 됨으로써,
                        일정 시간 이후 connection을 끊는 경우가 발생한다. 그러므로 connection을 일정 시간마다
                        체크하여, 다시 만들어주는 작업을 해야 한다. 현재 idle connection에 대해 모두 적용이
                        되므로 성능상의 overhead가 발생할 수 있다.
                        [Value Description]: check-query를 할 시간. (단위 msec)
                        [Example]: <check-query-period>200000</check-query-period>
                    ]]>          
    </text>
           
    <text key="database-connection-poolType.check-query-class"><![CDATA[
                        [Description]: 사용자나 개발자가 JEUS에서 제공하는 check-query 기능이 아닌 customized 된
                         check-query를 수행하고 싶을때, 그 class의 full path를 적어준다. 이 때 check query class는
                         반드시 jeus.jdbc.JEUSConnectionChecker interface를 구현해야 한다.
                        [Value Description]: Check query 기능이 있는 class의 full path
                        [Example]: <check-query-class>foo.bar.ABCheckConnection</check-query-class>
                        [Performance Recommendation]: Oracle, Sybase, MS SQL에서는 성능 저하가 발생하므로 사용하지 않는다.
                    ]]>          
    </text>
           
    <text key="database-connection-poolType.stmt-caching-size"><![CDATA[
                        [Description]: 어플리케이션에서 prepareStatement()를 호출할 때 마다 SQL 문장이 전처리되고,
                        PreparedStatement가 DB로 전송된다. 매 호출마다 PreparedStatement가 계속 재생성되는 것을
                        피하기 위해서, JEUS는 PreparedStatement를 내부적으로 캐시할 수 있다. 이 element는
                        PreparedStatement를 캐시할 개수를 지정한다. 가장 많이 사용되는 PreparedStatement들만
                        캐시에서 유지된다.
                        그리고 이 옵션의 제약사항을 반드시 숙지해야 한다.
                        Statement Caching을 사용하면 커넥션을 항상 열어둔 채로 사용하기 때문에
                        커넥션을 닫았을 때 드라이버가 해주는 클리어 작업이 이뤄지지 않는다.
                        예를 들어 Oracle JDBC 드라이버의 경우, auto-commit을 false로 해놓고 사용하다가
                        commit이나 rollback을 하지 않고 커넥션을 닫으면 무조건 commit을 하도록 되어 있는데 이런 처리가 되지 않는다는 것이다.
                        이러한 제약사항을 피해가려면 드라이버에서 Statement Caching 기능을 제공할 경우 그것을 사용하기 바란다.
                        [Performance Recommendation]: 이 element는 성능을 위해서 꼭 사용한다. 어플리케이션에서
                        Connection.prepareStatement()를 사용한다면 10 이상의 값을 설정한다. 그러면 성능 향상이
                        있다.
                    ]]>          
    </text>
           
    <text key="database-connection-poolType.stmt-fetch-size"><![CDATA[
                        [Description]: Connection에서 만드는 statement의 fetch size를 설정한다.
                    ]]>          
    </text>
           
    <text key="database-connection-poolType.keep-connection-handle-open"><![CDATA[
                        [Description]: XA 데이터 소스를 사용할 때 해당하는 옵션이다. 이 옵션을 true로 하면
                        XA 커넥션을 사용하고 풀에 반납할 때 그에 대한 핸들(또는 논리적 커넥션)을 닫지 않고 열어둔다.
                        DB2 Universal driver의 경우에 사용할 필요가 있다.
                        그리고 이 옵션의 제약사항을 반드시 숙지해야 한다.
                        커넥션을 항상 열어둔 채로 사용하기 때문에 커넥션을 닫았을 때 드라이버가 해주는 클리어 작업이 이뤄지지 않는다.
                        예를 들어 Oracle JDBC 드라이버의 경우, auto-commit을 false로 해놓고 사용하다가 commit이나 rollback을 하지 않고 커넥션을 닫으면
                        무조건 commit을 하도록 되어 있는데 이런 처리가 되지 않는다는 것이다.
                    ]]>          
    </text>
           
    <text key="wait-free-connectionType.enable-wait"><![CDATA[
                        [Description]: 이 태그는 pool안에 이용 가능한 connection이 없거나 pool안에 connection들이
                        이미 최대값이 되어질 때 connection을 요청 처리하는 방법을 결정한다. 만약 true라면
                        시스템은 이용 가능한 connection을 얻기위해 대기한다. 만약 false라면, 시스템은 사용자 요청이
                        올 때 새로운 connection을 만들고 사용이 끝난 이후에 pool에 반납하지 않는다.
                    ]]>          
    </text>
           
    <text key="wait-free-connectionType.wait-time"><![CDATA[
                        [Description]: 이 태그는 <enable-wait>가 true일때만 유효하다. 이것은 사용자가 connection을
                        위해 대기하는 시간을 나타낸다. 만약 어떠한 connection도 사용자가 이 시간동안 대기하여도 이용할
                        수 없을 때는 시스템은 사용자에게 exception을 던져준다.
                        [Value Description]: millisecond 단위이다.
                    ]]>          
    </text>
           
    <text key="auto-deployType.check-absolute-path"><![CDATA[
                        [Description]: JEUSMain.xml에서 application의 absolute-path를 지정하고 이 설정을 하면
						path 상에 추가, 삭제되는 application에 대해서 자동적으로 deploy, undeploy를 수행한다.
                    ]]>          
    </text>
           
    <text key="auto-deployType.auto-deploy-check-interval"><![CDATA[
                        [Description]: application이 변경되었는지 check하는 주기를 설정할 수 있다.
                        [Performance Recommendation]: 너무 자주 check하게 되면 성능저하가 생길 수 있으므로
                        필요한 간격만큼만 설정하도록 한다.
                    ]]>          
    </text>
           
    <text key="applicationType.absolute-path"><![CDATA[
                    	[Description]: 하위 application들이 존재하는 절대경로를 지정할 수 있다. 지정하지 않으면 각 container의
                        application home directory 들에서 찾는다.
	                ]]>          
    </text>
           
    <text key="applicationType.absolute-ejb-jar"><![CDATA[
                    	[Description]: 하위 standalone EJB module의 ejb-jar.xml을 찾을 수 있는 절대 경로를 지정할 수 있다.
                        이는 4.x의 EJB module과의 호환성을 위한 것이다. 자세한 것은 JEUS Server 메뉴얼을 참고하기 바란다.
                    ]]>          
    </text>
           
    <text key="applicationType.absolute-jeus-ejb-dd"><![CDATA[
                    	[Description]: 하위 standalone EJB module의 jeus-ejb-dd.xml을 찾을 수 있는 절대 경로를 지정할
                        수 있다. 이는 4.x의 EJB module과의 호환성을 위한 것이다. 자세한 것은 JEUS Manager 메뉴얼을
                        참고하기 바란다.
                    ]]>          
    </text>
           
    <text key="applicationType.auto-deploy"><![CDATA[
                        [Description]: 이 application 설정에 대해 auto-deploy 기능이 적용되도록 한다.
                    ]]>          
    </text>
           
    <text key="applicationType.deploy-when-booting"><![CDATA[
                        [Description]: Jeus booting시 deploy 여부를 나타낸다.설정 하지 않으면 true이다.
                    ]]>          
    </text>
      <ref key="applicationType">application-propertyGroup</ref>
           
    <text key="applicationType.name"><![CDATA[
                        	[Description]: 이 application의 name를 설정한다.module name을 archive file이나 directory name으로 하지 않고
	                        특정한 이름을 주고 싶을 때 설정한다.deploy나 undeploy때 archive file이나 directory name대신 사용할 수 있다.
    	                ]]>          
    </text>
           
    <text key="applicationType.path"><![CDATA[
                	        [Description]: 이 application의 path를 설정한다. EAR, COMPONENT 공통적으로 archive file일 경우에는
                    	    file path, directory일 경우에는 directory path가 사용된다. 절대 경로가 아니라 file name이나 directory name일
                        	경우에는 APP_HOME에 있다고 간주된다.
	                    ]]>          
    </text>
           
    <text key="applicationType.deployment-type"><![CDATA[
                            [Description]: 이 application이 deploy되는 type을 지정한다.
                        ]]>          
    </text>
           
    <text key="applicationType.client-component"><![CDATA[
                            [Description]: 이 application내의 client-component에 대한 특별한 설정을 하고 싶을때 사용한다.
                        ]]>          
    </text>
           
    <text key="applicationType.connector-component"><![CDATA[
                            [Description]: 이 application내의 connector-component에 대한 특별한 설정을 하고 싶을때 사용한다.
                        ]]>          
    </text>
           
    <text key="applicationType.ejb-component"><![CDATA[
                            [Description]: 이 application내의 ejb-component에 대한 특별한 설정을 하고 싶을때 사용한다.
                        ]]>          
    </text>
           
    <text key="applicationType.web-component"><![CDATA[
                            [Description]: 이 application내의 web-component에 대한 특별한 설정을 하고 싶을때 사용한다.
                        ]]>          
    </text>
           
    <text key="deployment-targetType.all-targets"><![CDATA[
                      [Description]: 이 설정을 읽는 모든 engine container가 target에 해당된다.
                    ]]>          
    </text>
           
    <text key="deployment-targetType.target"><![CDATA[
                      [Description]: 이 application을 deploy할 target을 설정한다.
                    ]]>          
    </text>
           
    <text key="all-targetsType.web-context-group"><![CDATA[
                    [Description]: 이 application을 deploy할 target의 web context group을 지정한다.
                    ]]>          
    </text>
           
    <text key="web-context-groupType.name"><![CDATA[
                      [Description]: 이 application내의 web module이 deploy될 때 사용될 context group 이름을 지정한다.
                      [Value Description]: 이 application을 deploy하는 target의 Servlet Engine이 이 context group을 가지고 있어야 한다.
                    ]]>          
    </text>
           
    <text key="web-context-groupType.virtual-host-name"><![CDATA[
                      [Description]: 이 application내의 web module이 deploy될 때 사용될 virtual host 이름을 지정한다.
                      [Value Description]: 이 context group 내에 지정된 virtual host을 가지고 있어야 한다.
                    ]]>          
    </text>
           
    <text key="app-targetType.web-context-group"><![CDATA[
                    [Description]: 이 application을 deploy할 target의 web context group을 지정한다.
                    ]]>          
    </text>
           
    <text key="app-targetType.node-name"><![CDATA[
                        [Description]: 이 application을 deploy할 target을 여기에 지정된 이름의 node 내의 engine container
                        들로 지정한다.
                        [Example]: <node-name>MyNode</node-name>
                        ]]>          
    </text>
           
    <text key="app-targetType.engine-container-name"><![CDATA[
                        [Description]: 이 application을 deploy할 target을 여기에 지정된 이름의 engine container로 지정한다.
                        [Example]: <engine-container-name>MyNode_container1</engine-container-name>
                        ]]>          
    </text>
           
    <text key="client-componentType.uri"><![CDATA[
                        [Description]: 이 client component 설정에 해당하는 uri 이름이다.
                        [Value Description]: EAR이나 COMPONENT type인 경우에는 .jar로 끝나고 EXPLODED 형태인 경우
                            해당 directory 이름이 온다.
                        [Example]: <uri>client.jar</uri>
                    ]]>          
    </text>
           
    <text key="client-componentType.deployment-target"><![CDATA[
                        [Description]: 이 client component를 deploy하고자 하는 target을 설정할 수 있다.
                    ]]>          
    </text>
           
    <text key="connector-componentType.uri"><![CDATA[
                        [Description]: 이 connector component 설정에 해당하는 uri 이름이다.
                        [Value Description]: EAR이나 COMPONENT type인 경우에는 .rar로 끝나고 EXPLODED 형태인 경우
                            해당 directory 이름이 온다.
                        [Example]: <uri>connector.rar</uri>
                    ]]>          
    </text>
           
    <text key="ejb-componentType.uri"><![CDATA[
                        [Description]: 이 ejb component 설정에 해당하는 uri 이름이다.
                        [Value Description]: EAR이나 COMPONENT type인 경우에는 .jar로 끝나고 EXPLODED 형태인 경우
                            해당 directory 이름이 온다.
                        [Example]: <uri>ejb.jar</uri>
                    ]]>          
    </text>
           
    <text key="ejb-componentType.deployment-target"><![CDATA[
                        [Description]: 이 ejb component를 deploy할 target을 지정한다.
                    ]]>          
    </text>
           
    <text key="ejb-componentType.client-view-path"><![CDATA[
                        [Description]: 이 ejb component의 stub class들이 존재할 directory를 설정한다.
                    ]]>          
    </text>
           
    <text key="ejb-componentType.keep-generated"><![CDATA[
                        [Description]: 이 ejb component의 stub class들을 생성할때 java source file을 남길지의
                        여부를 지정한다. 이 설정이 없으면 <application>의 설정을 사용한다.
                    ]]>          
    </text>
           
    <text key="ejb-componentType.ejb-jar"><![CDATA[
                        [Description]: 이 ejb component의 ejb-jar.xml file의 path를 설정할 수 있다. 이는 JEUS 4.x의
                        packaging을 지원하기 위해 사용한다.
                        [Example]: d:\jeus\config\node_ejb_engine1\ejb-jar_modulename.xml
                    ]]>          
    </text>
           
    <text key="ejb-componentType.jeus-ejb-dd"><![CDATA[
                        [Description]: 이 ejb component의 jeus-ejb-dd.xml file의 path를 설정할 수 있다. 이는 JEUS 4.x의
                        packaging을 지원하기 위해 사용한다.
                        [Example]: d:\jeus\config\node_ejb_engine1\jeus-ejb-dd_modulename.xml
                    ]]>          
    </text>
           
    <text key="ejb-componentType.java-security-permission"><![CDATA[
                        [Description]: 이 ejb component에게 부여할 J2SE security permission을 설정할 수 있다.
                    ]]>          
    </text>
           
    <text key="web-componentType.uri"><![CDATA[
                        [Description]: 이 web component 설정에 해당하는 uri 이름이다.
                        [Value Description]: EAR이나 COMPONENT type인 경우에는 .war로 끝나고 EXPLODED 형태인 경우
                            해당 directory 이름이 온다.
                        [Example]: <uri>web.war</uri>
                    ]]>          
    </text>
           
    <text key="web-componentType.context-root"><![CDATA[
            			[Description]: 이 web component의 context root를 지정한다. 
            				이는 appication.xml의 context-root 와 jeus-web-dd.xml의 context-path와 같은 의미이며,
            			JEUSMain.xml(jeus-application-dd.xml), application.xml, jeus-web-dd.xml 순으로 우선순위를 가진다.            			     
        			]]>          
    </text>
           
    <text key="web-componentType.deployment-target"><![CDATA[
                        [Description]: 이 web component를 deploy할 target을 지정한다.
                    ]]>          
    </text>
           
    <text key="web-componentType.keep-generated"><![CDATA[
                        [Description]: 이 web component가 웹서비스이거나 웹서비스 클라이언트를 포함하고 있을때
						생성한 웹서비스의 Tie 및 웹서비스 클라이언트의 Stub의  java source file을 남길지의
                        여부를 지정한다. 이 설정이 없으면 <application>의 설정을 사용한다.
                    ]]>          
    </text>
           
    <text key="web-componentType.jeus-web-dd"><![CDATA[
                        [Description]: 이 web component의 jeus-web-dd.xml file의 path를 설정할 수 있다. 이는 JEUS 4.x의
                        packaging을 지원하기 위해 사용한다.
                        [Example]: d:\jeus\config\node_servlet_engine1\jeus-web-dd_modulename.xml
                    ]]>          
    </text>
           
    <text key="web-componentType.java-security-permission"><![CDATA[
                        [Description]: 이 web component에게 부여할 J2SE security permission을 설정할 수 있다.
                    ]]>          
    </text>
           
    <text key="web-componentType.session-timeout"><![CDATA[
                        [Description]: 세션 객체가 가장 최근에 사용된 이후의 유효기간을 결정한다. 유효기간 이후의 세션은 제거된다.
                        			   web.xml에 세션 타임아웃 값보다 우선 적용된다.
                        [Value Description]: 시간주기는 공유세션이 제거되어야 할 분단위로 표현된다.
                        [Value Type Description]: Integer
                        [Defined Value]: [-1]: 본 값을 설정했다면 세션타임아웃 검사는 수행되지 않는다.
                    ]]>          
    </text>
           
    <text key="session-router-configType.thread-pool"><![CDATA[
                                [Description]: 분산식 세션서버에서 사용되는 socket connection처리를 위한 thread pool을 설정한다.
                    ]]>          
    </text>
           
    <text key="session-router-configType.use-nio"><![CDATA[
                        [Description]: 분산식 세션서버간의 통신을 Nonblocking I/O를 사용해서 할지의 여부를 지정한다.
                    ]]>          
    </text>
           
    <text key="session-router-configType.connect-timeout"><![CDATA[
                            [Description]: WebContainer에 존재하는 session server간 socket connection을
                            생성할 때 적용되는 timeout 값이다.
                    ]]>          
    </text>
           
    <text key="session-router-configType.read-timeout"><![CDATA[
                            [Description]: WebContainer에 존재하는 session server간 통신시에 적용되는
                            read timeout 값이다. 데이타를 보낸후 응답을 최대 이 시간만큼 기다리게 된다.
                    ]]>          
    </text>
           
    <text key="session-router-configType.backup-trigger"><![CDATA[
                            [Description]: local session server에서 session
                            객체의 update가 어느 정도 발생하였을 때 backup session server로 update된 session
                            객체들을 backup할지를 결정한다. 이 설정에 지정된 횟수 만큼 local session server에 session
                            object update가 발생하면 backup을 수행한다.
                    ]]>          
    </text>
           
    <text key="session-router-configType.check-to"><![CDATA[
                            [Description]: 얼마만큼의 시간 간격으로 backup과정을 수행할 지를 결정한다.
                            이 설정에 지정된 시간 주기로 update된 session 객체가 있는지를 조사하고 update된
                            session 객체가 존재하면 backup을 수행한다.
                    ]]>          
    </text>
           
    <text key="session-router-configType.check-level"><![CDATA[
                            [Description]: backup session server로 backup을 수행할 update된 session 객체가
                            존재하는지를 검사할 때 적용할 검사 기준을 설정한다.
                    ]]>          
    </text>
           
    <text key="session-router-configType.default-file-db"><![CDATA[
                            [Description]: update된 local session 객체를 backup하는 방법으로는
                             backup session server에 backup하는 방법외에 local file system상에
                             backup하는 방법도 있다. 이 설정은 이와 같이 local file system상에
                             update된 session 객체를 backup하는 방법을 제공한다. 실제 file backup은
                             WebContainer별로 수행된다. 이 설정은 분산식 session clustering에 참여하는
                             모든 WebContainer(session-router)들에 동일하게 적용된다. 단, session-router
                             하위 element로 "file-db"가 설정될 경우 이 설정(default-file-db)은 무시되고
                             "file-db"설정이 적용된다.
                    ]]>          
    </text>
           
    <text key="session-router-configType.session-router"><![CDATA[
                            [Description]: 분산식 session clustering에 참여할 WebContainer를 지정하는데
                            사용하는 설정이다. 이 외에도 session clustering에 참여하는 WebContaienr에 기동될
                            session server에 대한 각종 속성을 설정한다.
                    ]]>          
    </text>
           
    <text key="session-routerType.servlet-engine-name"><![CDATA[
                                [Description]: 분산식 session clustering에 참여할 WebContainer의 엔진 이름을 지정한다.
                                [Example]: engine1 or myNode_servlet_engine1
                    ]]>          
    </text>
           
    <text key="session-routerType.file-db"><![CDATA[
                            [Description]: "default-file-db" 설정과 동일한 역할을 하는 설정이다.
                            단, 이 설정은 해당 WebContainer(session-router)에만 적용된다. "default-file-db"
                            설정보다 높은 우선 순위를 갖는다.
                    ]]>          
    </text>
           
    <text key="session-routerType.backup-session-router"><![CDATA[
                            [Description]: 이 session-router의 in-memory 백업으로 사용할 session-router를 지정한다.
                    ]]>          
    </text>
           
    <text key="webadmin-configType.allowed-server"><![CDATA[
                            [Description]: webadmin에 접근을 허용하는 호스트 리스트를 설정한다.
                            [Example]: <allowed-server>10.10.*.*</allowed-server>
                    ]]>          
    </text>
           
    <text key="backup-session-routerType.node-name"><![CDATA[
                            [Description]: backup으로 사용할 session-router가 존재하는 노드의 노드 이름을 설정한다.
                    ]]>          
    </text>
           
    <text key="backup-session-routerType.servlet-engine-name"><![CDATA[
                            [Description]: backup으로 사용할 session-router "servlet-engine-name"을 설정한다.
                    ]]>          
    </text>
           
    <text key="backup-session-routerType.container-base-port"><![CDATA[
                            [Description]: container별로 listen port를 사용하는 경우 base port를 user가 지정한 경우에 사용한다. default container인 경우에는 JEUS Manager의 listen port를 사용하므로 지정해선 안된다.
                    ]]>          
    </text>
           
    <text key="fileDbType.startup-clear-to"><![CDATA[
                            [Description]: WebContainer를 기동할 때 지정된 file에 저장된 session 객체들이 복구된다.
                            만약 현재 시간과 file의 last modified time의 시간차가 이 설정에 지정된 값보다 크면 복구를
                            시도하지 않고 file의 내용을 모두 clear한다.
                    ]]>          
    </text>
           
    <text key="fileDbType.path"><![CDATA[
                            [Description]: backup session을 저장할 file이름을 지정한다.(절대 경로)
                            기본값은 $(JEUS_HOME)/sessiondb/<servlet_engine_name>_1.fdb이다.
                    ]]>          
    </text>
           
    <text key="fileDbType.passivation-to"><![CDATA[
                            [Description]: memory에 존재하는 session 객체를 일정시간 사용하지 않으면 삭제하고
                            대신 file-db에 저장된 객체를 사용하게 하는 설정이다.
                            [Value Description]: -1이면 passivation을 수행하지 않는다. 0이상의 시간을 설정하면
                            지정된 시간 이상 사용하지 않는 memory상의 session 객체는 passivation된다. 단위는 msec이다.
                            기본값은 -1이다.
                    ]]>          
    </text>
           
    <text key="fileDbType.min-hole"><![CDATA[
                            [Description]: 일정 시간 file-db를 운용하면 file의 크기가 필요이상 커지게 된다.
                            이 설정에 지정된 횟수 만큼 file I/O가 발생하면 file packing을 수행하여 필요이상
                            file 크기가 늘어나는 것을 막는다.
                    ]]>          
    </text>
           
    <text key="fileDbType.packing-rate"><![CDATA[
                            [Description]: 일정 시간 file-db를 운용하면 file의 크기가 필요이상 커지게 된다.
                            현재 session객체 갯수 대비 file I/O 횟수가 지정된 ratio를 넘어서면 file packing을 수행하여 필요이상
                            file 크기가 늘어나는 것을 막는다.
                    ]]>          
    </text>
           
    <text key="jaxr-sourceType.jaxr-entry"><![CDATA[
                        [Description]: JAXR Connection를 구성하기 위한 ConnectionFactory의  구성값을 담고 있다.
                    ]]>          
    </text>
           
    <text key="jaxr-entryType.export-name"><![CDATA[
                        [Description]: JAXR ConnectionFactory의 JNDI이름. 이 값은 Naming Server에 ConnectionFactory를 등록할 때 사용될 것이다.
                    ]]>          
    </text>
           
    <text key="jaxr-entryType.connection-factory-class-name"><![CDATA[
                        [Description]: JAXR ConnectionFactory 클래스 이름.
                        [Example]: <connection-factory-class-name>jeus.webservices.registry.ConnectionFactoryImpl</connection-factory-class-name>
                    ]]>          
    </text>
           
    <text key="jaxr-entryType.query-manager-URL"><![CDATA[
                        [Description]: Target registry provider의 query manager service를 위한 URL.
                        UDDI Registry의 Inquiry URL.
                    ]]>          
    </text>
           
    <text key="jaxr-entryType.lifeCycle-manager-URL"><![CDATA[
                        [Description]: Target registry provider의 life cycle manager service를 위한 URL.
                        UDDI Registry의 Publishing URL. 기술되지 않으면 queryManagerURL과 같다.
                    ]]>          
    </text>
           
    <text key="jaxr-entryType.authentication-method"><![CDATA[
                        [Description]: Registry Provider의 인증을 얻기 위하여 사용하는 인증 방법.
                        [Example]: <authenticationMethod>UDDI_GET_AUTHTOKEN</authenticationMethod>
                    ]]>          
    </text>
           
    <text key="jaxr-entryType.jaxr-property"><![CDATA[
                        [Description]: ConnectionFactory를 구성하기 위한 Configuration properties를 설정하기 위하여 사용된다.
                    ]]>          
    </text>
           
    <text key="jaxr-propertyType.name"><![CDATA[
                        [Description]: jaxr configuration property의 이름. property 이름은 JAXR 1.0 스펙을 따라야 한다.
                        [Standard Properties]:    [javax.xml.registry.uddi.maxRows]:
                        UDDI Provider에서 find operation에 대하여 return하는 열의 최대값.
                                                  [javax.xml.registry.postalAddressScheme]:
                                                이 Connection에 대하여 기본 postal address scheme으로 사용되는 ClassificationScheme의 id.
                    ]]>          
    </text>
           
    <text key="jaxr-propertyType.value"><![CDATA[
                        [Description]: jaxr property의 값.
                    ]]>          
    </text>
           
    <text key="jndi-propertyGroup.pooling"><![CDATA[
                      [Description]: pooling element는 load-balance를 유지하기 위해서 JNSServer의 thread pool
                      구성을 정한다.
                    ]]>          
    </text>
           
    <text key="application-propertyGroup.deployment-target"><![CDATA[
                        [Description]: 이 application이 deploy될 target을 지정한다.
                    ]]>          
    </text>
           
    <text key="application-propertyGroup.classloading"><![CDATA[
                        [Description]: 이 application이 사용할 classloading 방식을 선택한다. 지정하지 않으면
                        jeus.classloading system property에 설정되어 있는 값을 사용한다.
                    ]]>          
    </text>
           
    <text key="application-propertyGroup.class-ftp-unit"><![CDATA[
                        [Description]: 이 application에 포함된 EJB module의 class를 remote로 전송할 때 JAR file
                        자체로 전송할지 한 class씩 전송할지를 설정한다.
                    ]]>          
    </text>
           
    <text key="application-propertyGroup.security-domain-name"><![CDATA[
                        [Description]: 이 application에게 적용할 security domain을 설정한다. 지정하지 않으면
                        DEFAULT_APPLICATION_DOMAIN을 사용하게 된다.
                    ]]>          
    </text>
           
    <text key="application-propertyGroup.role-permission"><![CDATA[
                        [Description]: 이 application의 모든 module에게 적용할 principal - role mapping을
                        설정할때 사용한다.
                    ]]>          
    </text>
           
    <text key="application-propertyGroup.java-security-permission"><![CDATA[
                        [Description]: JEUS가 J2SE security를 사용할 때 이 application에게 허용할 J2SE permission을
                        지정할 수 있다.
                    ]]>          
    </text>
           
    <text key="application-propertyGroup.keep-generated"><![CDATA[
                        [Description]: 이 applicaton 내의 module들에 keep-generated를 적용한다. 즉, 이 appliation이
                        deploy과정에서 generated되어야 하는 클래스를 미리 포함하고 있다고 가정한다. 만약 설정이 되어 있지
                        않으면 jeus.application.keepgenerated system property에 지정된
                        값이 사용된다.
                    ]]>          
    </text>
           
    <text key="application-propertyGroup.fast-deploy"><![CDATA[
                        [Description]: 이 application 내의 EJB module, Web application의 webservice module에 대해
                        fast deploy를 적용한다. 즉, 이 application이 deploy과정에서 generated되어야 하는 클래스를
                        미리 포함하고 있다고 가정한다. 만약 설정이 되어 있지 않다면 engine의 기본 설정을 따른다.
                        이 설정은 jeus.application.fastdeploy system property를 설정한다.
                    ]]>          
    </text>
           
    <text key="invocation-typeType.BOOT"><![CDATA[
                        [Description]: Engine Container가 시작되고 engine들이 띄워지기 전의 시점이다.
                    ]]>          
    </text>
           
    <text key="invocation-typeType.BEFORE_DEPLOY"><![CDATA[
                        [Description]: Engine Container가 시작되고 이 Engine Container에게 지정된 application이
                        deploy되기 전의 시점이다.
                    ]]>          
    </text>
           
    <text key="invocation-typeType.AFTER_DEPLOY"><![CDATA[
                        [Description]: Engine Container가 시작되고 이 Engine Container에게 지정된 application이
                        deploy된 후의 시점이다.
                    ]]>          
    </text>
           
    <text key="invocation-typeType.READY"><![CDATA[
                        [Description]: Engine Container가 시작되고 이 Engine Container에게 지정된 application이
                        deploye된 후 서비스가 준비된 시점이다.
                    ]]>          
    </text>
           
    <text key="invocation-typeType.BEFORE_UNDEPLOY"><![CDATA[
                        [Description]: Engine Container가 down 명령을 받았을 때 이 Engine Container에서 운영중인
                        application들을 undeploy하기 전의 시점이다.
                    ]]>          
    </text>
           
    <text key="invocation-typeType.AFTER_UNDEPLOY"><![CDATA[
                        [Description]: Engine Container가 down 명령을 받았고 이 Engine Container에서 운영중인
                        application들을 undeploy한 후의 시점이다.
                    ]]>          
    </text>
           
    <text key="engine-typeType.ejb"><![CDATA[
                        [Description]: EJB engine
                    ]]>          
    </text>
           
    <text key="engine-typeType.servlet"><![CDATA[
                        [Description]: Servlet/Web engine
                    ]]>          
    </text>
           
    <text key="engine-typeType.jms"><![CDATA[
                        [Description]: JMS engine
                    ]]>          
    </text>
           
    <text key="engine-typeType.ws"><![CDATA[
                        [Description]: JEUS Web Server engine (JEUS의 기본 Web server).
                    ]]>          
    </text>
           
    <text key="invocation-manager-actionType.NoAction"><![CDATA[
                        [Description]: 아무 작업을 하지 않는다.
                    ]]>          
    </text>
           
    <text key="invocation-manager-actionType.Warning"><![CDATA[
                        [Description]: 리소스를 사용했지만 메소드 종료시에 close하지 않았을 때, Container 로그에
                        이에 대한 로그를 기록한다.
                    ]]>          
    </text>
           
    <text key="invocation-manager-actionType.AutoClose"><![CDATA[
                        [Description]: 리소스를 사용했지만 메소드 종료시에 close하지 않았을 때, 사용된 리소스를
                        자동적으로 close시켜준다.
                    ]]>          
    </text>
           
    <text key="jmsVendorType.ibmmq"><![CDATA[
                        [Description]: ibm mq driver
                    ]]>          
    </text>
           
    <text key="jmsVendorType.sonicmq"><![CDATA[
                        [Description]: sonic mq driver
                    ]]>          
    </text>
           
    <text key="jmsVendorType.others"><![CDATA[
                        [Description]: 기타 jms source driver
                    ]]>          
    </text>
           
    <text key="typeResourceType.QCF"><![CDATA[
                        [Description]: IBM MQ 나 Sonic MQ 매뉴얼을 참조하기 바란다.
                    ]]>          
    </text>
           
    <text key="typeResourceType.TCF"><![CDATA[
                        [Description]: IBM MQ 또는 Sonic MQ 매뉴얼을 참조하기 바란다.
                    ]]>          
    </text>
           
    <text key="typeResourceType.Q"><![CDATA[
                        [Description]: IBM MQ 또는 Sonic MQ 매뉴얼을 참조하기 바란다.
                    ]]>          
    </text>
           
    <text key="typeResourceType.T"><![CDATA[
                        [Description]: IBM MQ 또는 Sonic MQ 매뉴얼을 참조하기 바란다.
                    ]]>          
    </text>
           
    <text key="typeResourceType.XAQCF"><![CDATA[
                        [Description]: IBM MQ 또는 Sonic MQ 매뉴얼을 참조하기 바란다.
                    ]]>          
    </text>
           
    <text key="typeResourceType.XATCF"><![CDATA[
                        [Description]: IBM MQ 또는 Sonic MQ 매뉴얼을 참조하기 바란다.
                    ]]>          
    </text>
           
    <text key="typeResourceType.LOCALXAQCF"><![CDATA[
                        [Description]: IBM MQ 또는 Sonic MQ 매뉴얼을 참조하기 바란다.
                    ]]>          
    </text>
           
    <text key="typeResourceType.LOCALXATCF"><![CDATA[
                        [Description]: IBM MQ 또는 Sonic MQ 매뉴얼을 참조하기 바란다.
                    ]]>          
    </text>
           
    <text key="webt-headerType.default"><![CDATA[
                        [Description]: 일반적인 티맥스 헤더를 사용하는 경우이다.
                        버전에 관계없이 모든 일반적인 TMAX 서비스를 사용할 수 있다.
                    ]]>          
    </text>
           
    <text key="webt-headerType.extendedV2"><![CDATA[
                        [Description]: tmax 3.11.x 버전의 특별한 기능을 위해 사용한다.
                    ]]>          
    </text>
           
    <text key="webt-headerType.extendedV3"><![CDATA[
                        [Description]: tmax 3.14.5 버전의 특별한 기능을 위해 사용한다.
                    ]]>          
    </text>
           
    <text key="webt-headerType.extendedV4"><![CDATA[
                        [Description]: tmax 4.x 버전의 특별한 기능을 위해 사용한다.
                        SYS-MASTER(TM) 사용시에 설정하여야 한다.
                    ]]>          
    </text>
           
    <text key="transportType.BIND"><![CDATA[
                        [Description]: IBM MQ 매뉴얼을 참조하기 바란다.
                    ]]>          
    </text>
           
    <text key="transportType.CLIENT"><![CDATA[
                        [Description]: IBM MQ 매뉴얼을 참조하기 바란다.
                    ]]>          
    </text>
           
    <text key="data-source-typeType.DataSource"><![CDATA[
                        [Description]: Connection을 반환하는 기본적인 DataSource.
                    ]]>          
    </text>
           
    <text key="data-source-typeType.ConnectionPoolDataSource"><![CDATA[
                        [Description]: Connection Pool로부터 Connection을 반환한다.
                    ]]>          
    </text>
           
    <text key="data-source-typeType.LocalXADataSource"><![CDATA[
                        [Description]: XA 연결 Pool로부터 Local Transaction 역할을 하는 connection을 반환한다
                    ]]>          
    </text>
           
    <text key="data-source-typeType.XADataSource"><![CDATA[
                        [Description]: XA 연결 Pool로부터 분산/전역 Transaction 역할을 하는 Connection을 반환한다.
                    ]]>          
    </text>
           
    <text key="classloadingType.ISOLATED"><![CDATA[
                        [Description]: 이 application의 classloader는 다른 application의 classloader와 분리되어서
                        서로의 class들을 사용할수 없게 된다. J2EE spec에 따른 application packaging을 했을 때
                        사용할 수 있다.
                    ]]>          
    </text>
           
    <text key="classloadingType.SHARED"><![CDATA[
                        [Description]: 이 application의 classloader는 다른 application의 classloader와 같이 쓰여서
                        서로의 class를 순서에 따라 공유할 수 있다. JEUS 4.x이전 환경에서 개발한 application의 경우에는
                        이 설정을 이용하여야 한다.
                    ]]>          
    </text>
           
    <text key="class-ftp-unitType.JAR"><![CDATA[
                        [Description]: 이 application내의 class를 remote로 보낼 때 JAR 파일 단위로 보낸다.
                    ]]>          
    </text>
           
    <text key="class-ftp-unitType.CLASS"><![CDATA[
                        [Description]: 이 application내의 class를 remote로 보낼 때 class 파일 단위로 보낸다.
                        JEUS 4.x에서 DIR mode로 EJB를 개발했을때를 위해 사용하는 설정이다.
                    ]]>          
    </text>
           
    <text key="deployment-typeType.EAR"><![CDATA[
                        [Description]: EAR 형태의 archive file type이다.
                    ]]>          
    </text>
           
    <text key="deployment-typeType.COMPONENT"><![CDATA[
                        [Description]: standalone application (.jar, .war, .rar) 형태의 archive file type이다.
                    ]]>          
    </text>
           
    <text key="check-levelType.set"><![CDATA[
                                 [Description]: 해당 session의 setAttribute/putValue/removeAttribute/removeValue 함수
                                     호출이 일어난 경우에만 update된 것으로 간주하여 해당 session 객체를 backup한다.
                    ]]>          
    </text>
           
    <text key="check-levelType.get"><![CDATA[
                                [Description]: 해당 session의 setAttribute/putValue/removeAttribute/removeValue/getAttribute/getValue 함수
                                    호출이 일어난 경우에만 update된 것으로 간주하여 해당 session 객체를 backup한다.
                    ]]>          
    </text>
           
    <text key="check-levelType.all"><![CDATA[
                                [Description]: 조건없이 사용된 세션은 모두 백업한다.
                                    해당 session 객체가 HttpServletRequest.getSession() API로 호출될 경우 update된 것으로 간주하여 해당 session 객체를 backup한다.
                    ]]>          
    </text>
           
    <text key="check-levelType"><![CDATA[
                    [Description]: 사용된 session을 remote web container 또는 local file db에 백업하기 전에
                        백업할 필요가 있는지를 체크하는 것이 필요하다. 이 설정은 백업의 필요성을 체크하는 기준을 정한다.
                        기본적으로 사용된 세션이 invalidate되었을 경우 설정한 기준에 관계없이 백업한다.
            ]]>          
    </text>
           
    <text key="webt-levelType.none"><![CDATA[
                        [Description]: 로그 메시지를 남기지 않는다.
                    ]]>          
    </text>
           
    <text key="webt-levelType.info"><![CDATA[
                        [Description]: 기타 로그 메시지 이외의 Non-critical messages 추가로 볼 수 있다.
                    ]]>          
    </text>
           
    <text key="webt-levelType.debug"><![CDATA[
                        [Description]: debugging을 하기위한 모든 로그 메시지 정보를 살펴볼 수 있다.
                    ]]>          
    </text>
           
    <text key="webt-levelType.dev"><![CDATA[
                        [Description]: 네트웍 패킷을 포함한 모든 로그를 출력하도록 한다.
                    ]]>          
    </text>
  <ref key="jns-serverType">jndi-propertyGroup</ref>
     <ref key="localType">jndi-propertyGroup</ref>
     <ref key="applicationType">application-propertyGroup</ref>
 <ref key="jns-serverType">jndi-propertyGroup</ref>
    <ref key="localType">jndi-propertyGroup</ref>
    <ref key="applicationType">application-propertyGroup</ref>
</description>
