<?xml version="1.0" encoding="EUC-KR"?>
<xs:schema
    xmlns="http://www.tmaxsoft.com/xml/ns/jeus"
    targetNamespace="http://www.tmaxsoft.com/xml/ns/jeus"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    elementFormDefault="qualified"
    attributeFormDefault="unqualified"
    version="5.0">

    <xs:include schemaLocation="jeus-common.xsd"/>

    <xs:element name="jeus-connector-dd" type="jeus-connector-ddType">
        <xs:annotation>
            <xs:documentation><![CDATA[
            [Description]: 단일 JEUS Connector 모듈의 최상위 element. 각각의 jeus-connector-dd.xml 파일에는 이 태그가 반드시 존재한다.
		    ]]></xs:documentation>
        </xs:annotation>
    </xs:element>

    <xs:complexType name="jeus-connector-ddType">
        <xs:sequence>
            <xs:element name="module-name" type="xs:token" minOccurs="1">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: Connector 모듈의 이름이다. 어플리케이션 내의 모듈인 경우 어플리케이션 내에서 유일하여야 하며 서버 모듈인 경우는 전체 JEUS 시스템에서 유일하여야 한다. Message Driven Bean 에서 inflow 타겟을 지정하기 위해 사용된다.
                    [Example]: <module-name>whitebox-xa</module-name>
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="use-workmanager" type="xs:boolean" minOccurs="0" default="false">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: Work Manager 를 사용할 것인지를 설정한다. true 인 경우 리소스 어댑터가 시작(start) 되기 직전에 설정에 따라 초기화 된다.
                    [Example]: <use-workmanager>true</use-workmanager>
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="worker-pool" type="worker-poolType" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: Work Manager 에 관련된 설정을 한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="connection-pool" type="connection-poolType" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: Connection Pool 에 대한 설정을 한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="worker-poolType">
        <xs:sequence>
            <xs:element name="min" type="nonNegativeIntType" minOccurs="0" default="3">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: Work Manager 가 관리하는 쓰레드 갯수의 최소값이다.
                    이 설정값 보다 적은 쓰레드가 존재할 경우 Work Manager 는 사용자의 요청에 따라 즉시 쓰레드를 늘인다.
                    이 설정값 보다 많은 쓰레드가 존재하는 경우 일정 시간동안 사용되지 않은 쓰레드를 줄이기 시작하여 min 갯수의 쓰레즈를 유지한다.
                    [Example]: <min>3</min>
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="max" type="nonNegativeIntType" minOccurs="0" default="10">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: Work Manager 가 관리하는 쓰레드 갯수의 최대값이다. 쓰레드의 갯수는 이 값을 넘지 않는다.
                    [Example]: <max>10</max>
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="step" type="nonNegativeIntType" minOccurs="0" default="1">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: 쓰레드 수가 증가할 필요가 있을 경우, 한번에 증가하게 되는 쓰레드의 갯수이다.
                    총 쓰레드의 수는 위에 설정된 max 값을 넘을 수 없다.
                    [Example]: <max>1</max>
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="pre-allocation" type="xs:boolean" minOccurs="0" default="true">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: Work Manager 가 초기화 될때 min 값에 설정된 수의 쓰레드를 미리 만들어 놓는다.
                    [Example]: <pre-allocation>true</pre-allocation>
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element name="submit-timeout" type="nonNegativeLongType" minOccurs="0" default="5000">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: 클라이언트의 요청에 대해 지정된 시간동안 작업을 시작할 수 없을 경우 작업은 거부된다.
                    사용자는 서비스 요청 방식에 따라 익셉션을 받거나 이벤트를 받게 된다.
                    [Value Description]: 시간값 msec 단위. 0 으로 설정하는 경우 작업이 시작될 때까지 계속 대기상태로 기다린다.
                    [Example]: <submit-timeout>5000</submit-timeout>
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="release-timeout" type="nonNegativeLongType" minOccurs="0" default="60000">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: 작업이 시작되어 이 시간이 지난 후에도 작업이 종료되지 않았다면 Work Manager 는 해당 작업에 대해 release() 메쏘드를 호출해 준다.
                    [Value Description]: 시간값 msec 단위. 0 으로 설정하는 경우 release() 메쏘드는 호출되지 않는다.
                    [Example]: <release-timeout>60000</release-timeout>
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="shutdown-timeout" type="xs:long" minOccurs="0" default="-1">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: Work Manager 가 종료되는 순간 진행중인 작업이 있을 경우 최대 여기에 설정된 시간동안 대기한다.
                    [Value Description]: 시간값 msec 단위. -1 이면 기다리지 않으며, 0 로 설정하는 경우 작업이 종료될 때까지 계속 기다리게 된다.0이상의 값이면 그 시간만큼만 기다린다. 작업중인 쓰레드들은 Interrupt 를 받게 된다.
                    [Example]: <shutdown-timeout>-1</shutdown-timeout>
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="pooled-timeout" type="nonNegativeLongType" minOccurs="0" default="600000">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: Work Manager 에 min 값을 초과하는 수의 쓰레드가 있을 경우 설정된 시간 동안 사용되지 않은 쓰레드를 풀에서 제거한다.
                    [Value Description]: 시간값 msec 단위. 0 이면 제거하지 않는다.
                    [Example]: <pooled-timeout>600000</pooled-timeout>
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="connection-poolType">
        <xs:sequence>
            <xs:element name="export-name" type="xs:token" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: 해당 connection pool 이 JNDI Naming System 에 바인딩 되는 이름이다.
                    [Value Description]: 임의로 지정할 수 있고 해당 모듈내에서 유일한 이름이어야만 한다.
                    [Example]: <export-name>datasource1</export-name>
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="log-file" type="log-fileType" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 해당 connection pool 의 managed connection factory 가 사용할 로그 파일에 대한 설정을 지정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="transaction-support" type="transaction-supportType" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: 해당 connection pool 이 지원하는 트랜잭션 타입을 설정한다. 여기에 설정된 값은 ra.xml 에 설정된 값보다 우선시 된다.
                    [Value Description]: NoTransaction, LocalTransaction, XATransaction, XATransactionOnly 네가지 중 하나를 설정한다.
                    [Example]: <transaction-support>XATransaction</transaction-support>
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="user" type="xs:token" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: security 를 container 에서 관리하는 경우, connection 을 생성하기 위해 사용하는 user 이름이다.
                    [Example]: <user>scott</user>
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="password" type="xs:token" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: security 를 container 에서 관리하는 경우, connection 을 생성하기 위해 사용하는 password 이다.
                    [Example]: <password>tiger</password>
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="use-wrapper" type="xs:boolean" minOccurs="0" default="true">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: 부가적인 기능을 위해서 connection wrapper 를 이용한다. 자세한 내용은 메뉴얼을 참조하도록 한다.
                    [Example]: <use-wrapper>true</use-wrapper>
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="dissociation-timeout" type="nonNegativeLongType" minOccurs="0" default="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: dissociation 을 적용하는 시간 값을 설정한다. 해당 리소스 어댑터에서 이 기능을 지원하지 않는 경우 무시된다.
                    [Value Description]: 시간값 msec 단위. 0 이면 dissociation 을 사용하지 않는다.
                    [Example]: <dissociation-timeout>0</dissociation-timeout>
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="invalidation-timeout" type="nonNegativeLongType" minOccurs="0" default="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: invalidation 을 적용할 시간 값을 설정한다. 이 시간이 지나도 connnection pool 로 돌아오지 않는 connection 은 강제로 제거 된다.
                    [Value Description]: 시간값 msec 단위. 0 이면 invalidation 을 사용하지 않는다.
                    [Example]: <invalidation-timeout>0</invalidation-timeout>
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="validation-timeout" type="nonNegativeLongType" minOccurs="0" default="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: 리소스 어댑터가 connection pool 에 있는 connection 을 검증하는 시간 단위를 설정한다. 리소스 어댑터의 ManagedConnectionFactory 가 ValidatingManagedConnectionFactory 인터페이스를 구현했으면 이 시간 단위로 invalid connection 은 connection pool 에서 제거된다.
                    [Value Description]: 시간값 msec 단위. 0 이면 validation 을 사용하지 않는다.
                    [Example]: <validation-timeout>0</validation-timeout>
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="skip-connection-matching" type="xs:boolean" minOccurs="0" default="false">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: connection 인증을 위한 connection matching 과정을 생략한다. 
                    [Example]: <skip-connection-matching>false</skip-connection-matching>
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="pool-management" type="pool-managementType" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: connection pool 에 관련된 값을 설정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="property" type="connectorPropertyType" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: ManagedConnectionFactory 에 적용할 property 를 추가한다. ra.xml 에 설정된 값보다 우선시 된다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="log-fileType">
        <xs:sequence>
            <xs:element name="file-name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: connection pool 이 사용할 log file name을 설정한다.
                        [Example]: <file-name>C:\logs\mylog.log</file-name>
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="buffer-size" type="nonNegativeIntType" default="512" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: connection pool 이 log file에 출력할 때 사용하는 buffer의 크기를 지정한다.
                        [Value Description]: byte 단위이다.
                        [Performance Recommandation]: 이 값이 클수록 file에 출력되는 message는 지연되어 출력되지만 logging 성능은 좋아진다.
                        [Example]: <buffer-size>512</buffer-size>
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="valid-day" type="off-intType" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                      [Description]: 날짜 단위로 log file을 바꿀 때 사용한다. 1 이상의 값을 설정하면 log file name 뒤에 file이 사용된 날짜가 자동으로 붙게 된다.
                      [Value Description]: day
                      [Example]: <valid-day>1</valid-day>
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:simpleType name="transaction-supportType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="NoTransaction"/>
            <xs:enumeration value="LocalTransaction"/>
            <xs:enumeration value="XATransaction"/>
            <xs:enumeration value="XATransactionOnly"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="pool-managementType">
        <xs:sequence>
            <xs:element name="min" type="nonNegativeIntType" minOccurs="0" default="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: Connection pool 에 의해 관리되는 Connection 갯수의 최소값이다.
                    이 설정값 보다 적은 connection 이 존재할 경우 사용자의 요청에 따라 즉시 새로운 connection 을 생성한다.
                    이보다 많은 connection 이 존재하는 경우 일정 시간동안 사용되지 않은 connection 를 풀에서 제거한다.
                    [Example]: <min>0</min>
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="max" type="nonNegativeIntType" minOccurs="0" default="20">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: Connection pool 에 의해 관리되는 Connection 갯수의 최대값이다.
                    [Example]: <max>20</max>
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="pooled-timeout" type="nonNegativeLongType" minOccurs="0" default="600000">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: Connection pool 에 min 값보다 많은 Connection 이 있을 경우, 설정된 시간 동안 사용되지 않은 Connection 을 풀에서 제거한다
                    [Value Description]: 시간값 msec 단위. 0 으로 설정하면 connection 은 제거되지 않는다.
                    [Example]: <pooled-timeout>600000</pooled-timeout>
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="wait-connection" type="wait-connectionType" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: Connection Pool 에서 Connection 을 얻기 위해 기다릴 필요가 있을 경우 이에 관련된 설정이다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="disposable-connection" type="disposable-connectionType" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: Connection 을 얻지 못했을 경우 임시 Connection 을 이용할 것인지에 대한 설정이다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="wait-connectionType">
        <xs:sequence>
            <xs:element name="wait-connection" type="xs:boolean" minOccurs="0" default="true">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: Connection 을 얻기 위해 기다릴 것인지를 설정한다. 
                    [Example]: <wait-connection>true</wait-connection>
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="max-waiter-count" type="nonNegativeIntType" minOccurs="0" default="5">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: 커넥션을 얻기 위해 기다리는 client 의 최대 수이다. 이보다 많을 경우 바로 실패한 것으로 간주된다.
                    [Example]: <max-waiter-count>5</max-waiter-count>
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="max-wait-trial" type="nonNegativeIntType" minOccurs="0" default="5">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: 이 횟수만큼 connection matching 을 실패했다면 Connection 을 얻는데 실패한 것으로 간주한다.
                    [Example]: <max-waiter-trial>5</max-waiter-trial>
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="wait-timeout" type="nonNegativeLongType" minOccurs="0" default="10000">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: 이 시간동안 기다려도 Connection 을 얻지 못했다면 Connection 을 얻는데 실패한 것으로 간주한다.
                    [Example]: <wait-timeout>10000</wait-timeout>
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="disposable-connectionType">
        <xs:sequence>
            <xs:element name="allow-disposable-connection" type="xs:boolean" minOccurs="0" default="true">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: Connection 을 얻지 못했을 경우 임시 Connection 을 사용할 것인지를 설정한다.
                    [Example]: <allow-disposable-connection>true</allow-disposable-connection>
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="max-disposable-count" type="nonNegativeIntType" minOccurs="0" default="3">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: 임시 Connection 의 최대 갯수이다. 임시 커넥션은 사용이 끝나면 자동적으로 제거된다.
                    [Example]: <max-disposable-count>3</max-disposable-count>
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="connectorPropertyType">
        <xs:sequence>
            <xs:element name="name" type="xs:token"/>
            <xs:element name="type" type="xs:token"/>
            <xs:element name="value" type="xs:token"/>
        </xs:sequence>
    </xs:complexType>
</xs:schema>
