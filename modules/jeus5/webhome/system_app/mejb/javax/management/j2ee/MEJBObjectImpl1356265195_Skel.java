// This is generated by JEUS RMI Compiler.
// Do not edit any part of this.
package javax.management.j2ee;

import jeus.util.*;
import java.util.logging.Level;
import java.rmi.RemoteException;

public final class MEJBObjectImpl1356265195_Skel
	extends jeus.ejb.bean.rmi.RMISkeleton
{
	private static final java.rmi.server.Operation[] operations = {
		new java.rmi.server.Operation("javax.management.AttributeList setAttributes(javax.management.ObjectName, javax.management.AttributeList)"),
		new java.rmi.server.Operation("void setAttribute(javax.management.ObjectName, javax.management.Attribute)"),
		new java.rmi.server.Operation("void remove()"),
		new java.rmi.server.Operation("java.util.Set queryNames(javax.management.ObjectName, javax.management.QueryExp)"),
		new java.rmi.server.Operation("boolean isRegistered(javax.management.ObjectName)"),
		new java.rmi.server.Operation("boolean isIdentical(javax.ejb.EJBObject)"),
		new java.rmi.server.Operation("java.lang.Object invoke(javax.management.ObjectName, java.lang.String, java.lang.Object[], java.lang.String[])"),
		new java.rmi.server.Operation("java.lang.Object getPrimaryKey()"),
		new java.rmi.server.Operation("javax.management.MBeanInfo getMBeanInfo(javax.management.ObjectName)"),
		new java.rmi.server.Operation("java.lang.Integer getMBeanCount()"),
		new java.rmi.server.Operation("javax.management.j2ee.ListenerRegistration getListenerRegistry()"),
		new java.rmi.server.Operation("javax.ejb.Handle getHandle()"),
		new java.rmi.server.Operation("javax.ejb.EJBHome getEJBHome()"),
		new java.rmi.server.Operation("java.lang.String getDefaultDomain()"),
		new java.rmi.server.Operation("javax.management.AttributeList getAttributes(javax.management.ObjectName, java.lang.String[])"),
		new java.rmi.server.Operation("java.lang.Object getAttribute(javax.management.ObjectName, java.lang.String)")
	};
	
	public static final long interfaceHash = 4499074735905930175L;
	
	public MEJBObjectImpl1356265195_Skel() {
	}
	
	public java.rmi.server.Operation[] getOperations() {
		return (java.rmi.server.Operation[]) operations.clone();
	}
	
	public void dispatch(java.rmi.Remote  obj, java.rmi.server.RemoteCall call, int opnum, long hash)
		throws java.lang.Exception
	{
		if (hash != interfaceHash)
			throw new java.rmi.server.SkeletonMismatchException("interface hash mismatch");
		
		javax.management.j2ee.MEJBObjectImpl1356265195 server = (javax.management.j2ee.MEJBObjectImpl1356265195) obj;
		if (server instanceof jeus.ejb.bean.rmi.RMIInterceptorProvider) {
			setServerInterceptor((jeus.ejb.bean.rmi.RMIInterceptorProvider) server);
		}
		try {
			switch (opnum) {
				case 0: // javax.management.AttributeList setAttributes(javax.management.ObjectName, javax.management.AttributeList)
				{
					javax.management.ObjectName param_1;
					javax.management.AttributeList param_2;
					try {
						try {
							callServerInterceptor(call);
							java.io.ObjectInput in = call.getInputStream();
							param_1 = (javax.management.ObjectName) in.readObject();
							param_2 = (javax.management.AttributeList) in.readObject();
						} catch (java.lang.Exception e) {
							throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
						} finally {
							call.releaseInputStream();
						}
						java.io.ObjectOutput out;
						javax.management.AttributeList result;
						try {
							result = server.setAttributes(param_1, param_2);
						} catch(Exception e) {
						try {
								exceptionOccurred(e);
						} catch (Throwable ex) {
							if (ex instanceof Exception)
								throw (Exception) ex;
							else
								throw (Error) ex;
						}
						
							throw e;
						}
						try {
							out = callAfterServerInterceptor(call);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
						try {
							out.writeObject(result);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
					} finally {
						handleFinally();
					}
					break;
				}
				case 1: // void setAttribute(javax.management.ObjectName, javax.management.Attribute)
				{
					javax.management.ObjectName param_1;
					javax.management.Attribute param_2;
					try {
						try {
							callServerInterceptor(call);
							java.io.ObjectInput in = call.getInputStream();
							param_1 = (javax.management.ObjectName) in.readObject();
							param_2 = (javax.management.Attribute) in.readObject();
						} catch (java.lang.Exception e) {
							throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
						} finally {
							call.releaseInputStream();
						}
						java.io.ObjectOutput out;
						try {
							server.setAttribute(param_1, param_2);
						} catch(Exception e) {
						try {
								exceptionOccurred(e);
						} catch (Throwable ex) {
							if (ex instanceof Exception)
								throw (Exception) ex;
							else
								throw (Error) ex;
						}
						
							throw e;
						}
						try {
							out = callAfterServerInterceptor(call);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
					} finally {
						handleFinally();
					}
					break;
				}
				case 2: // void remove()
				{
					try {
						try {
							callServerInterceptor(call);
							java.io.ObjectInput in = call.getInputStream();
						} catch (java.lang.Exception e) {
							throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
						} finally {
							call.releaseInputStream();
						}
						java.io.ObjectOutput out;
						try {
							server.remove();
						} catch(Exception e) {
						try {
								exceptionOccurred(e);
						} catch (Throwable ex) {
							if (ex instanceof Exception)
								throw (Exception) ex;
							else
								throw (Error) ex;
						}
						
							throw e;
						}
						try {
							out = callAfterServerInterceptor(call);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
					} finally {
						handleFinally();
					}
					break;
				}
				case 3: // java.util.Set queryNames(javax.management.ObjectName, javax.management.QueryExp)
				{
					javax.management.ObjectName param_1;
					javax.management.QueryExp param_2;
					try {
						try {
							callServerInterceptor(call);
							java.io.ObjectInput in = call.getInputStream();
							param_1 = (javax.management.ObjectName) in.readObject();
							param_2 = (javax.management.QueryExp) in.readObject();
						} catch (java.lang.Exception e) {
							throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
						} finally {
							call.releaseInputStream();
						}
						java.io.ObjectOutput out;
						java.util.Set result;
						try {
							result = server.queryNames(param_1, param_2);
						} catch(Exception e) {
						try {
								exceptionOccurred(e);
						} catch (Throwable ex) {
							if (ex instanceof Exception)
								throw (Exception) ex;
							else
								throw (Error) ex;
						}
						
							throw e;
						}
						try {
							out = callAfterServerInterceptor(call);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
						try {
							out.writeObject(result);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
					} finally {
						handleFinally();
					}
					break;
				}
				case 4: // boolean isRegistered(javax.management.ObjectName)
				{
					javax.management.ObjectName param_1;
					try {
						try {
							callServerInterceptor(call);
							java.io.ObjectInput in = call.getInputStream();
							param_1 = (javax.management.ObjectName) in.readObject();
						} catch (java.lang.Exception e) {
							throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
						} finally {
							call.releaseInputStream();
						}
						java.io.ObjectOutput out;
						boolean result;
						try {
							result = server.isRegistered(param_1);
						} catch(Exception e) {
						try {
								exceptionOccurred(e);
						} catch (Throwable ex) {
							if (ex instanceof Exception)
								throw (Exception) ex;
							else
								throw (Error) ex;
						}
						
							throw e;
						}
						try {
							out = callAfterServerInterceptor(call);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
						try {
							out.writeBoolean(result);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
					} finally {
						handleFinally();
					}
					break;
				}
				case 5: // boolean isIdentical(javax.ejb.EJBObject)
				{
					javax.ejb.EJBObject param_1;
					try {
						try {
							callServerInterceptor(call);
							java.io.ObjectInput in = call.getInputStream();
							param_1 = (javax.ejb.EJBObject) in.readObject();
						} catch (java.lang.Exception e) {
							throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
						} finally {
							call.releaseInputStream();
						}
						java.io.ObjectOutput out;
						boolean result;
						try {
							result = server.isIdentical(param_1);
						} catch(Exception e) {
						try {
								exceptionOccurred(e);
						} catch (Throwable ex) {
							if (ex instanceof Exception)
								throw (Exception) ex;
							else
								throw (Error) ex;
						}
						
							throw e;
						}
						try {
							out = callAfterServerInterceptor(call);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
						try {
							out.writeBoolean(result);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
					} finally {
						handleFinally();
					}
					break;
				}
				case 6: // java.lang.Object invoke(javax.management.ObjectName, java.lang.String, java.lang.Object[], java.lang.String[])
				{
					javax.management.ObjectName param_1;
					java.lang.String param_2;
					java.lang.Object[] param_3;
					java.lang.String[] param_4;
					try {
						try {
							callServerInterceptor(call);
							java.io.ObjectInput in = call.getInputStream();
							param_1 = (javax.management.ObjectName) in.readObject();
							param_2 = (java.lang.String) in.readObject();
							param_3 = (java.lang.Object[]) in.readObject();
							param_4 = (java.lang.String[]) in.readObject();
						} catch (java.lang.Exception e) {
							throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
						} finally {
							call.releaseInputStream();
						}
						java.io.ObjectOutput out;
						java.lang.Object result;
						try {
							result = server.invoke(param_1, param_2, param_3, param_4);
						} catch(Exception e) {
						try {
								exceptionOccurred(e);
						} catch (Throwable ex) {
							if (ex instanceof Exception)
								throw (Exception) ex;
							else
								throw (Error) ex;
						}
						
							throw e;
						}
						try {
							out = callAfterServerInterceptor(call);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
						try {
							out.writeObject(result);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
					} finally {
						handleFinally();
					}
					break;
				}
				case 7: // java.lang.Object getPrimaryKey()
				{
					try {
						try {
							callServerInterceptor(call);
							java.io.ObjectInput in = call.getInputStream();
						} catch (java.lang.Exception e) {
							throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
						} finally {
							call.releaseInputStream();
						}
						java.io.ObjectOutput out;
						java.lang.Object result;
						try {
							result = server.getPrimaryKey();
						} catch(Exception e) {
						try {
								exceptionOccurred(e);
						} catch (Throwable ex) {
							if (ex instanceof Exception)
								throw (Exception) ex;
							else
								throw (Error) ex;
						}
						
							throw e;
						}
						try {
							out = callAfterServerInterceptor(call);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
						try {
							out.writeObject(result);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
					} finally {
						handleFinally();
					}
					break;
				}
				case 8: // javax.management.MBeanInfo getMBeanInfo(javax.management.ObjectName)
				{
					javax.management.ObjectName param_1;
					try {
						try {
							callServerInterceptor(call);
							java.io.ObjectInput in = call.getInputStream();
							param_1 = (javax.management.ObjectName) in.readObject();
						} catch (java.lang.Exception e) {
							throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
						} finally {
							call.releaseInputStream();
						}
						java.io.ObjectOutput out;
						javax.management.MBeanInfo result;
						try {
							result = server.getMBeanInfo(param_1);
						} catch(Exception e) {
						try {
								exceptionOccurred(e);
						} catch (Throwable ex) {
							if (ex instanceof Exception)
								throw (Exception) ex;
							else
								throw (Error) ex;
						}
						
							throw e;
						}
						try {
							out = callAfterServerInterceptor(call);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
						try {
							out.writeObject(result);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
					} finally {
						handleFinally();
					}
					break;
				}
				case 9: // java.lang.Integer getMBeanCount()
				{
					try {
						try {
							callServerInterceptor(call);
							java.io.ObjectInput in = call.getInputStream();
						} catch (java.lang.Exception e) {
							throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
						} finally {
							call.releaseInputStream();
						}
						java.io.ObjectOutput out;
						java.lang.Integer result;
						try {
							result = server.getMBeanCount();
						} catch(Exception e) {
						try {
								exceptionOccurred(e);
						} catch (Throwable ex) {
							if (ex instanceof Exception)
								throw (Exception) ex;
							else
								throw (Error) ex;
						}
						
							throw e;
						}
						try {
							out = callAfterServerInterceptor(call);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
						try {
							out.writeObject(result);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
					} finally {
						handleFinally();
					}
					break;
				}
				case 10: // javax.management.j2ee.ListenerRegistration getListenerRegistry()
				{
					try {
						try {
							callServerInterceptor(call);
							java.io.ObjectInput in = call.getInputStream();
						} catch (java.lang.Exception e) {
							throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
						} finally {
							call.releaseInputStream();
						}
						java.io.ObjectOutput out;
						javax.management.j2ee.ListenerRegistration result;
						try {
							result = server.getListenerRegistry();
						} catch(Exception e) {
						try {
								exceptionOccurred(e);
						} catch (Throwable ex) {
							if (ex instanceof Exception)
								throw (Exception) ex;
							else
								throw (Error) ex;
						}
						
							throw e;
						}
						try {
							out = callAfterServerInterceptor(call);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
						try {
							out.writeObject(result);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
					} finally {
						handleFinally();
					}
					break;
				}
				case 11: // javax.ejb.Handle getHandle()
				{
					try {
						try {
							callServerInterceptor(call);
							java.io.ObjectInput in = call.getInputStream();
						} catch (java.lang.Exception e) {
							throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
						} finally {
							call.releaseInputStream();
						}
						java.io.ObjectOutput out;
						javax.ejb.Handle result;
						try {
							result = server.getHandle();
						} catch(Exception e) {
						try {
								exceptionOccurred(e);
						} catch (Throwable ex) {
							if (ex instanceof Exception)
								throw (Exception) ex;
							else
								throw (Error) ex;
						}
						
							throw e;
						}
						try {
							out = callAfterServerInterceptor(call);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
						try {
							out.writeObject(result);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
					} finally {
						handleFinally();
					}
					break;
				}
				case 12: // javax.ejb.EJBHome getEJBHome()
				{
					try {
						try {
							callServerInterceptor(call);
							java.io.ObjectInput in = call.getInputStream();
						} catch (java.lang.Exception e) {
							throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
						} finally {
							call.releaseInputStream();
						}
						java.io.ObjectOutput out;
						javax.ejb.EJBHome result;
						try {
							result = server.getEJBHome();
						} catch(Exception e) {
						try {
								exceptionOccurred(e);
						} catch (Throwable ex) {
							if (ex instanceof Exception)
								throw (Exception) ex;
							else
								throw (Error) ex;
						}
						
							throw e;
						}
						try {
							out = callAfterServerInterceptor(call);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
						try {
							out.writeObject(result);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
					} finally {
						handleFinally();
					}
					break;
				}
				case 13: // java.lang.String getDefaultDomain()
				{
					try {
						try {
							callServerInterceptor(call);
							java.io.ObjectInput in = call.getInputStream();
						} catch (java.lang.Exception e) {
							throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
						} finally {
							call.releaseInputStream();
						}
						java.io.ObjectOutput out;
						java.lang.String result;
						try {
							result = server.getDefaultDomain();
						} catch(Exception e) {
						try {
								exceptionOccurred(e);
						} catch (Throwable ex) {
							if (ex instanceof Exception)
								throw (Exception) ex;
							else
								throw (Error) ex;
						}
						
							throw e;
						}
						try {
							out = callAfterServerInterceptor(call);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
						try {
							out.writeObject(result);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
					} finally {
						handleFinally();
					}
					break;
				}
				case 14: // javax.management.AttributeList getAttributes(javax.management.ObjectName, java.lang.String[])
				{
					javax.management.ObjectName param_1;
					java.lang.String[] param_2;
					try {
						try {
							callServerInterceptor(call);
							java.io.ObjectInput in = call.getInputStream();
							param_1 = (javax.management.ObjectName) in.readObject();
							param_2 = (java.lang.String[]) in.readObject();
						} catch (java.lang.Exception e) {
							throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
						} finally {
							call.releaseInputStream();
						}
						java.io.ObjectOutput out;
						javax.management.AttributeList result;
						try {
							result = server.getAttributes(param_1, param_2);
						} catch(Exception e) {
						try {
								exceptionOccurred(e);
						} catch (Throwable ex) {
							if (ex instanceof Exception)
								throw (Exception) ex;
							else
								throw (Error) ex;
						}
						
							throw e;
						}
						try {
							out = callAfterServerInterceptor(call);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
						try {
							out.writeObject(result);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
					} finally {
						handleFinally();
					}
					break;
				}
				case 15: // java.lang.Object getAttribute(javax.management.ObjectName, java.lang.String)
				{
					javax.management.ObjectName param_1;
					java.lang.String param_2;
					try {
						try {
							callServerInterceptor(call);
							java.io.ObjectInput in = call.getInputStream();
							param_1 = (javax.management.ObjectName) in.readObject();
							param_2 = (java.lang.String) in.readObject();
						} catch (java.lang.Exception e) {
							throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
						} finally {
							call.releaseInputStream();
						}
						java.io.ObjectOutput out;
						java.lang.Object result;
						try {
							result = server.getAttribute(param_1, param_2);
						} catch(Exception e) {
						try {
								exceptionOccurred(e);
						} catch (Throwable ex) {
							if (ex instanceof Exception)
								throw (Exception) ex;
							else
								throw (Error) ex;
						}
						
							throw e;
						}
						try {
							out = callAfterServerInterceptor(call);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
						try {
							out.writeObject(result);
						} catch (java.io.IOException e) {
							throw new java.rmi.MarshalException("error marshalling return", e);
						}
					} finally {
						handleFinally();
					}
					break;
				}
			default:
				throw new java.rmi.UnmarshalException("invalid method number");
			}
		} catch (RuntimeException t) {
			if( !(t instanceof javax.ejb.EJBException) )
				logger.log(Level.WARNING, "a problem in dispatch()",t);
			throw t;
		}
	}
	
}
